# Patch release pipeline
#
# This release pipeline does a patch release with the contents of the
# branch that you select when running the workflow. For example, to
# release the next patch release 2.3.2, you can just trigger this
# release pipeline and it will run the steps to get a release out and
# published.
#
# This release pipeline is very basic right now. It assumes that you
# have a release branch with all the commits that should be in it and
# a release commit last that is tagged with the release that should be
# published.
#
# A possible future enhancement is to generate the release commit
# automatically and tag the release based on the previous release tag.
#
# To follow the steps of the release, messages are printed to Slack in
# the form of a release thread. Right now the message is just the
# commits that go into the release.
#
# The following secrets are used in the workflow.
#
# SLACK_BOT_TOKEN
#    OAuth token for the application that will write the message.
#
# SLACK_CHANNEL_RELEASE
#    Channel identifier for channel where the release thread should be
#    created.
name: Patch Release
on:
  workflow_dispatch:
    # We use the timescaledev repository for starters to test this.
    docker_repository:
      description: 'Repository name where to push the image'
      required: true
      default: timescaledev
jobs:
  check-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout TimescaleDB
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # If there are dashes in the describe output, there are commits
      # after the tag.
      - name: Check that branch is tagged properly
        run: git describe --tags $GITHUB_SHA | grep -qe- && exit 1

      # Send a message with the commits in the release, mostly for
      # debug purposes at this point.
      - name: Fetch list of all commits since last tag
        id: fetch
        shell: bash -x {0}
        run: |
          tag=$(git describe --tags --abbrev=0 $GITHUB_REF)
          output=$(git log --format=":black_small_square: %s" $tag..)
          echo "::set-output name=commits::$output"

      - name: Slack
        uses: archive/github-actions-slack@v2.0.0
        id: notify
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_TOKEN }}
          slack-channel: ${{ secrets.SLACK_CHANNEL_FEED_EXPERIMENTAL }}
          slack-text: ${{ steps.fetch.outputs.commits }}

      - name: Result from "Send Slack Message"
        run: echo "The result was ${{ steps.notify.outputs.slack-result }}"

  publish-docker:
    needs: check-release
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        pg_version: [12, 13]
        flavor: ['bitnami', 'alpine']
    steps:
      - name: Checkout TimescaleDB
        uses: actions/checkout@v2
      - name: Read version info
        id: info
        shell: perl -n {0} version.config
        run: |
          print "::set-output name=from_version::$1\n" if /^update_from_version\s*=\s*(\S+)/;
          print "::set-output name=version::$1\n" if /^version\s*=\s*(\S+)/;
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.ORG_DOCKER_HUB_USERNAME }}
          password: ${{ secrets.ORG_DOCKER_HUB_ACCESS_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: $INPUT_DOCKER_REPOSITORY/timescaledb:${{ steps.info.outputs.version }}-pg${{ matrix.pg_version }}
          platforms: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64
          context: .
          file: ./Dockerfile.${{ matrix.flavor }}
          build-args: |
            PG_VERSION=${{ matrix.pg_version }}
            TS_VERSION=${{ steps.info.outputs.version }}
            PREV_TS_VERSION=${{ steps.info.outputs.from_version }}
      - name: Inspect image
        run: |
          docker image inspect ${{ steps.docker_build.outputs.digest }}
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
      - name: Report Docker image push
        uses: archive/github-actions-slack@v2.0.0
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_TOKEN }}
          slack-channel: ${{ secrets.SLACK_CHANNEL_FEED_EXPERIMENTAL }}
          slack-text: |
            Docker image ${{ steps.docker_build.outputs.digest }} released
