# Test building the extension on Windows
name: Regression Windows
on:
  schedule:
    # run daily 20:00 on main branch
    - cron: '0 20 * * *'
  push:
    branches:
      - prerelease_test
  pull_request:
jobs:
  config:
    runs-on: ubuntu-latest
    outputs:
      build_type: ${{ steps.build_type.outputs.build_type }}
      pg12_latest: ${{ steps.config.outputs.pg12_latest }}
      pg13_latest: ${{ steps.config.outputs.pg13_latest }}
      pg14_latest: ${{ steps.config.outputs.pg14_latest }}

    steps:
    - name: Checkout source code
      uses: actions/checkout@v2
    - name: Read configuration
      id: config
      run: python .github/gh_config_reader.py
    - name: Set build_type
      id: build_type
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "::set-output name=build_type::['Debug']"
        else
          echo "::set-output name=build_type::['Debug','Release']"
        fi

  build:
    name: PG${{ matrix.pg }} ${{ matrix.build_type }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: config
    strategy:
      fail-fast: false
      matrix:
        pg: [ 12, 13, 14 ]
        os: [ windows-2022 ]
        build_type: ${{ fromJson(needs.config.outputs.build_type) }}
        ignores: ["chunk_adaptive metadata"]
        tsl_ignores: ["compression_algos dist_partial_agg remote_connection"]
        tsl_skips: ["bgw_db_scheduler cagg_ddl_dist_ht data_fetcher dist_compression dist_move_chunk dist_remote_error remote_txn"]
        pg_config: ["-cfsync=off -cstatement_timeout=60s"]
        include:
          - pg: 12
            pkg_version: ${{ fromJson(needs.config.outputs.pg12_latest) }}.1
          - pg: 13
            pkg_version: ${{ fromJson(needs.config.outputs.pg13_latest) }}.1
            tsl_skips_version: dist_grant-13
          - pg: 14
            pkg_version: ${{ fromJson(needs.config.outputs.pg14_latest) }}.1
    env:
      # PostgreSQL configuration
      PGPORT: 55432
      PGDATA: pgdata
      TABLESPACE1: D:\tablespace1\
      TABLESPACE2: D:\tablespace2\
    steps:
    - name: Configure git
      # Since we want to reuse the checkout in the WSL environment
      # we have to prevent git from changing the line ending in the
      # shell scripts as that would break them.
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
    - name: Checkout TimescaleDB source
      uses: actions/checkout@v2
      # Use a cache for the PostgreSQL installation to speed things up
      # and avoid unnecessary package downloads. Since we only save
      # the directory containing the binaries, the runs with a cache
      # hit won't have PostgreSQL installed with a running service
      # since the installer never runs. We therefore install with
      # --extract-only and launch our own test instance, which is
      # probably better anyway since it gives us more control.
    - name: Cache PostgreSQL installation
      uses: actions/cache@v1
      id: cache-postgresql
      with:
        path: ~\PostgreSQL\${{ matrix.pg }}
        key: ${{ runner.os }}-build-pg${{ matrix.pkg_version }}
    - name: Install PostgreSQL ${{ matrix.pg }}
      if: steps.cache-postgresql.outputs.cache-hit != 'true'
      run: |
        choco feature disable --name=usePackageExitCodes
        choco feature disable --name=showDownloadProgress
        choco install postgresql${{ matrix.pg }} --version ${{ matrix.pkg_version }} --force -y --install-args="'--prefix $HOME\PostgreSQL\${{ matrix.pg }} --extract-only yes'"

    - name: Configure TimescaleDB
      run: cmake -B build_win -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DPG_PATH="$HOME/PostgreSQL/${{ matrix.pg }}" -DOPENSSL_ROOT_DIR="$HOME/PostgreSQL/${{ matrix.pg }}" -DASSERTIONS=ON
    - name: Build TimescaleDB
      run: cmake --build build_win --config ${{ matrix.build_type }}
    - name: Install TimescaleDB
      run: cmake --install build_win --config ${{ matrix.build_type }}

    - name: Setup postgres cluster
      if: matrix.pg != '12'
      run: |
        ~/PostgreSQL/${{ matrix.pg }}/bin/initdb -U postgres -A trust --locale=us --encoding=UTF8
        mkdir -p ${{ env.TABLESPACE1 }}\_default
        mkdir -p ${{ env.TABLESPACE2 }}\_default
        icacls ${{ env.TABLESPACE1 }} /grant runneradmin:F /T
        icacls ${{ env.TABLESPACE2 }} /grant runneradmin:F /T
        copy build_win/test/postgresql.conf ${{ env.PGDATA }}
        copy build_win/test/pg_hba.conf ${{ env.PGDATA }}
        ~/PostgreSQL/${{ matrix.pg }}/bin/pg_ctl start -o "${{ matrix.pg_config }}"
        ~/PostgreSQL/${{ matrix.pg }}/bin/pg_isready -U postgres -d postgres --timeout=30
        ~/PostgreSQL/${{ matrix.pg }}/bin/psql -U postgres -d postgres -c 'CREATE USER root SUPERUSER LOGIN;'
        ~/PostgreSQL/${{ matrix.pg }}/bin/psql -U postgres -d postgres -c 'SHOW log_filename;SHOW data_directory;SELECT version();'

    - name: Setup WSL
      if: matrix.pg != '12'
      uses: Vampire/setup-wsl@v1
      with:
        additional-packages:
          cmake
          gcc
          git
          gnupg
          make
          postgresql-common
    - name: Install postgres for test runner
      if: matrix.pg != '12'
      shell: wsl-bash {0}
      run: |
        yes | /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh || true
        apt-get install -y --force-yes postgresql-server-dev-${{ matrix.pg }}

    - name: Run tests
      if: matrix.pg != '12'
      shell: wsl-bash {0}
      run: |
        export TEST_TABLESPACE1_PREFIX='${{ env.TABLESPACE1 }}'
        export TEST_TABLESPACE2_PREFIX='${{ env.TABLESPACE2 }}'
        cmake -B build_wsl -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DTEST_PGPORT_LOCAL=${{ env.PGPORT }}

        # isolationtester is only packaged with pg14+ so we would have to build our own postgres
        # to get it for earlier versions so we skip it for < 14.
        if [[ "${{ matrix.pg }}" == "14" ]]; then
          make -C build_wsl isolationchecklocal
        fi

        make -C build_wsl regresschecklocal IGNORES="${{ matrix.ignores }}"

    - name: Setup postgres cluster for TSL tests
      if: matrix.pg != '12'
      run: |
        ~/PostgreSQL/${{ matrix.pg }}/bin/pg_ctl stop
        timeout 10
        Remove-Item -Recurse ${{ env.PGDATA }}
        ~/PostgreSQL/${{ matrix.pg }}/bin/initdb -U postgres -A trust --locale=us --encoding=UTF8
        copy build_win/tsl/test/postgresql.conf ${{ env.PGDATA }}
        copy build_win/tsl/test/pg_hba.conf ${{ env.PGDATA }}
        ~/PostgreSQL/${{ matrix.pg }}/bin/pg_ctl start -o "${{ matrix.pg_config }}"
        ~/PostgreSQL/${{ matrix.pg }}/bin/pg_isready -U postgres -d postgres --timeout=30
        ~/PostgreSQL/${{ matrix.pg }}/bin/psql -U postgres -d postgres -c 'CREATE USER root SUPERUSER LOGIN;'

    - name: Run TSL tests
      if: matrix.pg != '12'
      shell: wsl-bash {0}
      run: |
        export TEST_TABLESPACE1_PREFIX='${{ env.TABLESPACE1 }}'
        export TEST_TABLESPACE2_PREFIX='${{ env.TABLESPACE2 }}'

        # isolationtester is only packaged with pg14+ so we would have to build our own postgres
        # to get it for earlier versions so we skip it for < 14.
        if [[ "${{ matrix.pg }}" == "14" ]]; then
          make -C build_wsl isolationchecklocal-t
        fi

        make -C build_wsl -k regresschecklocal-t IGNORES="${{ matrix.tsl_ignores }}" SKIPS="${{ matrix.tsl_skips }} ${{ matrix.tsl_skips_version }}"

    - name: Show regression diffs
      if: always() && matrix.pg != '12'
      id: collectlogs
      shell: wsl-bash {0}
      run: |
        find build_wsl -name regression.out -exec cat {} + > installcheck.log
        find build_wsl -name regression.diffs -exec cat {} + > regression.log
        if [[ -s regression.log ]]; then echo "::set-output name=regression_diff::true"; fi
        grep -e 'FAILED' -e 'failed (ignored)' installcheck.log || true
        cat regression.log

    - name: Save regression diffs
      if: always() && matrix.pg != '12' && steps.collectlogs.outputs.regression_diff == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: Regression diff ${{ matrix.os }} ${{ matrix.name }} ${{ matrix.pg }}
        path: regression.log

