-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
SET timescaledb.enable_now_constify TO FALSE;
set work_mem to '256MB';
set max_parallel_workers_per_gather to 0;
-- Disable plain/sorted aggregation to get a deterministic test output
SET timescaledb.enable_chunkwise_aggregation = OFF;
-- disable memoize on PG14+
SELECT CASE WHEN current_setting('server_version_num')::int/10000 >= 14 THEN set_config('enable_memoize','off',false) ELSE 'off' END AS enable_memoize;
 enable_memoize 
 off
(1 row)

SELECT
       format('include/%s_queries.sql', :'TEST_BASE_NAME') as "TEST_QUERY_NAME",
       format('%s/shared/results/%s_results_uncompressed.out', :'TEST_OUTPUT_DIR', :'TEST_BASE_NAME') as "TEST_RESULTS_UNCOMPRESSED",
       format('%s/shared/results/%s_results_compressed.out', :'TEST_OUTPUT_DIR', :'TEST_BASE_NAME') as "TEST_RESULTS_COMPRESSED"
\gset
SELECT format('\! diff -u --label "Uncompressed results" --label "Compressed results" %s %s', :'TEST_RESULTS_UNCOMPRESSED', :'TEST_RESULTS_COMPRESSED') as "DIFF_CMD"
\gset
-- get EXPLAIN output for all variations
\set PREFIX 'EXPLAIN (analyze, costs off, timing off, summary off)'
\set PREFIX_VERBOSE 'EXPLAIN (analyze, costs off, timing off, summary off, verbose)'
\set TEST_TABLE 'metrics'
\ir :TEST_QUERY_NAME
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
-- test LATERAL with ordered append in the outer query
:PREFIX
SELECT time,
  pg_typeof(l)
FROM :TEST_TABLE,
  LATERAL (
    SELECT *
    FROM (
      VALUES (1),
        (2)) v) l
ORDER BY time DESC
LIMIT 2;
QUERY PLAN
 Limit (actual rows=2 loops=1)
   ->  Nested Loop (actual rows=2 loops=1)
         ->  Custom Scan (ChunkAppend) on metrics (actual rows=1 loops=1)
               Order: metrics."time" DESC
               ->  Index Only Scan using _hyper_X_X_chunk_metrics_time_idx on _hyper_X_X_chunk (actual rows=1 loops=1)
                     Heap Fetches: 1
               ->  Index Only Scan using _hyper_X_X_chunk_metrics_time_idx on _hyper_X_X_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_X_X_chunk_metrics_time_idx on _hyper_X_X_chunk (never executed)
                     Heap Fetches: 0
         ->  Materialize (actual rows=2 loops=1)
               ->  Values Scan on "*VALUES*" (actual rows=2 loops=1)
(12 rows)

-- test LATERAL with ordered append in the lateral query
:PREFIX
SELECT time,
  pg_typeof(v)
FROM (
  VALUES (1),
    (2)) v,
  LATERAL (
    SELECT *
    FROM :TEST_TABLE
    ORDER BY time DESC
    LIMIT 2) l;
QUERY PLAN
 Nested Loop (actual rows=4 loops=1)
   ->  Values Scan on "*VALUES*" (actual rows=2 loops=1)
   ->  Materialize (actual rows=2 loops=2)
         ->  Subquery Scan on l (actual rows=2 loops=1)
               ->  Limit (actual rows=2 loops=1)
                     ->  Result (actual rows=2 loops=1)
                           ->  Custom Scan (ChunkAppend) on metrics (actual rows=2 loops=1)
                                 Order: metrics."time" DESC
                                 ->  Index Only Scan using _hyper_X_X_chunk_metrics_time_idx on _hyper_X_X_chunk (actual rows=2 loops=1)
                                       Heap Fetches: 2
                                 ->  Index Only Scan using _hyper_X_X_chunk_metrics_time_idx on _hyper_X_X_chunk (never executed)
                                       Heap Fetches: 0
                                 ->  Index Only Scan using _hyper_X_X_chunk_metrics_time_idx on _hyper_X_X_chunk (never executed)
                                       Heap Fetches: 0
(14 rows)

-- test plan with best index is chosen
-- this should use device_id, time index
:PREFIX
SELECT time,
  device_id
FROM :TEST_TABLE
WHERE device_id = 1
ORDER BY time DESC
LIMIT 1;
QUERY PLAN
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=1 loops=1)
         Order: metrics."time" DESC
         ->  Index Only Scan using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk (actual rows=1 loops=1)
               Index Cond: (device_id = 1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk (never executed)
               Index Cond: (device_id = 1)
               Heap Fetches: 0
         ->  Index Only Scan using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk (never executed)
               Index Cond: (device_id = 1)
               Heap Fetches: 0
(12 rows)

-- test plan with best index is chosen
-- this should use time index
:PREFIX
SELECT time
FROM :TEST_TABLE
ORDER BY time DESC
LIMIT 1;
QUERY PLAN
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=1 loops=1)
         Order: metrics."time" DESC
         ->  Index Only Scan using _hyper_X_X_chunk_metrics_time_idx on _hyper_X_X_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_X_X_chunk_metrics_time_idx on _hyper_X_X_chunk (never executed)
               Heap Fetches: 0
         ->  Index Only Scan using _hyper_X_X_chunk_metrics_time_idx on _hyper_X_X_chunk (never executed)
               Heap Fetches: 0
(9 rows)

-- test LATERAL with correlated query
-- only last chunk should be executed
:PREFIX
SELECT g.time,
  l.time
FROM generate_series('2000-01-01'::timestamptz, '2000-01-03', '1d') AS g (time)
  LEFT OUTER JOIN LATERAL (
  SELECT *
  FROM :TEST_TABLE o
  WHERE o.time >= g.time
    AND o.time < g.time + '1d'::interval
  ORDER BY time DESC
  LIMIT 1) l ON TRUE;
QUERY PLAN
 Nested Loop Left Join (actual rows=3 loops=1)
   ->  Function Scan on generate_series g (actual rows=3 loops=1)
   ->  Limit (actual rows=1 loops=3)
         ->  Result (actual rows=1 loops=3)
               ->  Custom Scan (ChunkAppend) on metrics o (actual rows=1 loops=3)
                     Order: o."time" DESC
                     Chunks excluded during startup: 0
                     Chunks excluded during runtime: 2
                     ->  Index Only Scan using _hyper_X_X_chunk_metrics_time_idx on _hyper_X_X_chunk o_1 (never executed)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_X_X_chunk_metrics_time_idx on _hyper_X_X_chunk o_2 (never executed)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_X_X_chunk_metrics_time_idx on _hyper_X_X_chunk o_3 (actual rows=1 loops=3)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           Heap Fetches: 3
(17 rows)

-- test LATERAL with correlated query
-- only 2nd chunk should be executed
:PREFIX
SELECT g.time,
  l.time
FROM generate_series('2000-01-10'::timestamptz, '2000-01-11', '1d') AS g (time)
  LEFT OUTER JOIN LATERAL (
  SELECT *
  FROM :TEST_TABLE o
  WHERE o.time >= g.time
    AND o.time < g.time + '1d'::interval
  ORDER BY time
  LIMIT 1) l ON TRUE;
QUERY PLAN
 Nested Loop Left Join (actual rows=2 loops=1)
   ->  Function Scan on generate_series g (actual rows=2 loops=1)
   ->  Limit (actual rows=1 loops=2)
         ->  Result (actual rows=1 loops=2)
               ->  Custom Scan (ChunkAppend) on metrics o (actual rows=1 loops=2)
                     Order: o."time"
                     Chunks excluded during startup: 0
                     Chunks excluded during runtime: 2
                     ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_time_idx on _hyper_X_X_chunk o_1 (never executed)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           Heap Fetches: 0
                     ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_time_idx on _hyper_X_X_chunk o_2 (actual rows=1 loops=2)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           Heap Fetches: 2
                     ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_time_idx on _hyper_X_X_chunk o_3 (never executed)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           Heap Fetches: 0
(17 rows)

-- test startup and runtime exclusion together
:PREFIX
SELECT g.time,
  l.time
FROM generate_series('2000-01-01'::timestamptz, '2000-01-03', '1d') AS g (time)
  LEFT OUTER JOIN LATERAL (
  SELECT *
  FROM :TEST_TABLE o
  WHERE o.time >= g.time
    AND o.time < g.time + '1d'::interval
    AND o.time < now()
  ORDER BY time DESC
  LIMIT 1) l ON TRUE;
QUERY PLAN
 Nested Loop Left Join (actual rows=3 loops=1)
   ->  Function Scan on generate_series g (actual rows=3 loops=1)
   ->  Limit (actual rows=1 loops=3)
         ->  Result (actual rows=1 loops=3)
               ->  Custom Scan (ChunkAppend) on metrics o (actual rows=1 loops=3)
                     Order: o."time" DESC
                     Chunks excluded during startup: 0
                     Chunks excluded during runtime: 2
                     ->  Index Only Scan using _hyper_X_X_chunk_metrics_time_idx on _hyper_X_X_chunk o_1 (never executed)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_X_X_chunk_metrics_time_idx on _hyper_X_X_chunk o_2 (never executed)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_X_X_chunk_metrics_time_idx on _hyper_X_X_chunk o_3 (actual rows=1 loops=3)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                           Heap Fetches: 3
(17 rows)

-- test startup and runtime exclusion together
-- all chunks should be filtered
:PREFIX
SELECT g.time,
  l.time
FROM generate_series('2000-01-01'::timestamptz, '2000-01-03', '1d') AS g (time)
  LEFT OUTER JOIN LATERAL (
  SELECT *
  FROM :TEST_TABLE o
  WHERE o.time >= g.time
    AND o.time < g.time + '1d'::interval
    AND o.time > now()
  ORDER BY time DESC
  LIMIT 1) l ON TRUE;
QUERY PLAN
 Nested Loop Left Join (actual rows=3 loops=1)
   ->  Function Scan on generate_series g (actual rows=3 loops=1)
   ->  Limit (actual rows=0 loops=3)
         ->  Result (actual rows=0 loops=3)
               ->  Custom Scan (ChunkAppend) on metrics o (actual rows=0 loops=3)
                     Order: o."time" DESC
                     Chunks excluded during startup: 3
(7 rows)

-- test JOIN
-- no exclusion on joined table because quals are not propagated yet
-- With PG 14 on i368, this query uses a nested loop join. Disable the nested loop join to get the same query plan in all tests
SET enable_nestloop TO off;
:PREFIX
SELECT o1.time,
  o2.time
FROM :TEST_TABLE o1
  INNER JOIN :TEST_TABLE o2 ON o1.time = o2.time
WHERE o1.time < '2000-02-01'
  AND o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o1.time;
QUERY PLAN
 Merge Join (actual rows=21586 loops=1)
   Merge Cond: (o2."time" = o1."time")
   ->  Custom Scan (ChunkAppend) on metrics o2 (actual rows=21587 loops=1)
         Order: o2."time"
         ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o2_1 (actual rows=21586 loops=1)
               Index Cond: ((device_id = 2) AND ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone))
               Heap Fetches: 21586
         ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o2_2 (actual rows=1 loops=1)
               Index Cond: ((device_id = 2) AND ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone))
               Heap Fetches: 1
         ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o2_3 (never executed)
               Index Cond: ((device_id = 2) AND ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone))
               Heap Fetches: 0
   ->  Materialize (actual rows=21586 loops=1)
         ->  Custom Scan (ChunkAppend) on metrics o1 (actual rows=21586 loops=1)
               Order: o1."time"
               ->  Index Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o1_1 (actual rows=21586 loops=1)
                     Index Cond: ((device_id = 1) AND ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone))
                     Filter: (v0 = 2)
               ->  Index Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o1_2 (actual rows=0 loops=1)
                     Index Cond: ((device_id = 1) AND ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone))
                     Filter: (v0 = 2)
                     Rows Removed by Filter: 30226
               ->  Index Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o1_3 (actual rows=0 loops=1)
                     Index Cond: ((device_id = 1) AND ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone))
                     Filter: (v0 = 2)
                     Rows Removed by Filter: 30226
(27 rows)

RESET enable_nestloop;
-- test JOIN
-- last chunk of o2 should not be executed
:PREFIX
SELECT o1.time,
  o2.time
FROM :TEST_TABLE o1
  INNER JOIN (
    SELECT *
    FROM :TEST_TABLE o2
    ORDER BY time) o2 ON o1.time = o2.time
WHERE o1.time < '2000-01-08'
ORDER BY o1.time
LIMIT 10;
QUERY PLAN
 Limit (actual rows=10 loops=1)
   ->  Merge Join (actual rows=10 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Custom Scan (ChunkAppend) on metrics o1 (actual rows=1 loops=1)
               Order: o1."time"
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_time_idx on _hyper_X_X_chunk o1_1 (actual rows=1 loops=1)
                     Index Cond: ("time" < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                     Heap Fetches: 1
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_time_idx on _hyper_X_X_chunk o1_2 (never executed)
                     Index Cond: ("time" < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                     Heap Fetches: 0
         ->  Materialize (actual rows=10 loops=1)
               ->  Result (actual rows=10 loops=1)
                     ->  Custom Scan (ChunkAppend) on metrics o2 (actual rows=10 loops=1)
                           Order: o2."time"
                           ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_time_idx on _hyper_X_X_chunk o2_1 (actual rows=10 loops=1)
                                 Heap Fetches: 10
                           ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_time_idx on _hyper_X_X_chunk o2_2 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_time_idx on _hyper_X_X_chunk o2_3 (never executed)
                                 Heap Fetches: 0
(21 rows)

-- test join against max query
-- not ChunkAppend so no chunk exclusion
SET enable_hashjoin = FALSE;
SET enable_nestloop = FALSE;
SET enable_hashagg = FALSE;
:PREFIX
SELECT o1.time,
  o2.*
FROM :TEST_TABLE o1
  INNER JOIN (
    SELECT max(time) AS max_time
    FROM :TEST_TABLE) o2 ON o1.time = o2.max_time
WHERE o1.device_id = 1
ORDER BY time;
QUERY PLAN
 Merge Join (actual rows=1 loops=1)
   Merge Cond: (o1."time" = ($0))
   ->  Custom Scan (ChunkAppend) on metrics o1 (actual rows=82038 loops=1)
         Order: o1."time"
         ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o1_1 (actual rows=21586 loops=1)
               Index Cond: (device_id = 1)
               Heap Fetches: 21586
         ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o1_2 (actual rows=30226 loops=1)
               Index Cond: (device_id = 1)
               Heap Fetches: 30226
         ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o1_3 (actual rows=30226 loops=1)
               Index Cond: (device_id = 1)
               Heap Fetches: 30226
   ->  Sort (actual rows=1 loops=1)
         Sort Key: ($0)
         Sort Method: quicksort 
         ->  Result (actual rows=1 loops=1)
               InitPlan 1 (returns $0)
                 ->  Limit (actual rows=1 loops=1)
                       ->  Custom Scan (ChunkAppend) on metrics (actual rows=1 loops=1)
                             Order: metrics."time" DESC
                             ->  Index Only Scan using _hyper_X_X_chunk_metrics_time_idx on _hyper_X_X_chunk (actual rows=1 loops=1)
                                   Index Cond: ("time" IS NOT NULL)
                                   Heap Fetches: 1
                             ->  Index Only Scan using _hyper_X_X_chunk_metrics_time_idx on _hyper_X_X_chunk (never executed)
                                   Index Cond: ("time" IS NOT NULL)
                                   Heap Fetches: 0
                             ->  Index Only Scan using _hyper_X_X_chunk_metrics_time_idx on _hyper_X_X_chunk (never executed)
                                   Index Cond: ("time" IS NOT NULL)
                                   Heap Fetches: 0
(30 rows)

RESET enable_hashjoin;
RESET enable_nestloop;
RESET enable_hashagg;
SET enable_seqscan TO false;
-- test JOIN on time column
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  INNER JOIN :TEST_TABLE o2 ON o1.time = o2.time
WHERE o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o2."time" = o1."time")
         ->  Custom Scan (ChunkAppend) on metrics o2 (actual rows=100 loops=1)
               Order: o2."time"
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 100
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o2_2 (never executed)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o2_3 (never executed)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics o1 (actual rows=100 loops=1)
                     Order: o1."time"
                     ->  Index Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
                     ->  Index Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o1_2 (never executed)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
                     ->  Index Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o1_3 (never executed)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
(26 rows)

-- test JOIN on time column with USING
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  INNER JOIN :TEST_TABLE o2 USING (time)
WHERE o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o2."time" = o1."time")
         ->  Custom Scan (ChunkAppend) on metrics o2 (actual rows=100 loops=1)
               Order: o2."time"
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 100
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o2_2 (never executed)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o2_3 (never executed)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics o1 (actual rows=100 loops=1)
                     Order: o1."time"
                     ->  Index Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
                     ->  Index Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o1_2 (never executed)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
                     ->  Index Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o1_3 (never executed)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
(26 rows)

-- test NATURAL JOIN on time column
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  NATURAL INNER JOIN :TEST_TABLE o2
WHERE o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=0 loops=1)
   ->  Sort (actual rows=0 loops=1)
         Sort Key: o1."time"
         Sort Method: quicksort 
         ->  Result (actual rows=0 loops=1)
               One-Time Filter: false
(6 rows)

-- test LEFT JOIN on time column
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  LEFT JOIN :TEST_TABLE o2 ON o1.time = o2.time
WHERE o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o2."time" = o1."time")
         ->  Custom Scan (ChunkAppend) on metrics o2 (actual rows=100 loops=1)
               Order: o2."time"
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 100
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o2_2 (never executed)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o2_3 (never executed)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics o1 (actual rows=100 loops=1)
                     Order: o1."time"
                     ->  Index Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
                     ->  Index Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o1_2 (never executed)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
                     ->  Index Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o1_3 (never executed)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
(26 rows)

-- test RIGHT JOIN on time column
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  RIGHT JOIN :TEST_TABLE o2 ON o1.time = o2.time
WHERE o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o2.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o2."time" = o1."time")
         ->  Custom Scan (ChunkAppend) on metrics o2 (actual rows=100 loops=1)
               Order: o2."time"
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 100
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o2_2 (never executed)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o2_3 (never executed)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics o1 (actual rows=100 loops=1)
                     Order: o1."time"
                     ->  Index Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
                     ->  Index Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o1_2 (never executed)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
                     ->  Index Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o1_3 (never executed)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
(26 rows)

-- test JOIN on time column with ON clause expression order switched
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  INNER JOIN :TEST_TABLE o2 ON o2.time = o1.time
WHERE o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o2."time" = o1."time")
         ->  Custom Scan (ChunkAppend) on metrics o2 (actual rows=100 loops=1)
               Order: o2."time"
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 100
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o2_2 (never executed)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o2_3 (never executed)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics o1 (actual rows=100 loops=1)
                     Order: o1."time"
                     ->  Index Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
                     ->  Index Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o1_2 (never executed)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
                     ->  Index Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o1_3 (never executed)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
(26 rows)

-- test JOIN on time column with equality condition in WHERE clause
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  INNER JOIN :TEST_TABLE o2 ON TRUE
WHERE o1.time = o2.time
  AND o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o2."time" = o1."time")
         ->  Custom Scan (ChunkAppend) on metrics o2 (actual rows=100 loops=1)
               Order: o2."time"
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 100
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o2_2 (never executed)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o2_3 (never executed)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics o1 (actual rows=100 loops=1)
                     Order: o1."time"
                     ->  Index Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
                     ->  Index Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o1_2 (never executed)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
                     ->  Index Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o1_3 (never executed)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
(26 rows)

-- test JOIN on time column with ORDER BY 2nd hypertable
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  INNER JOIN :TEST_TABLE o2 ON o1.time = o2.time
WHERE o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o2.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o2."time" = o1."time")
         ->  Custom Scan (ChunkAppend) on metrics o2 (actual rows=100 loops=1)
               Order: o2."time"
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 100
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o2_2 (never executed)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o2_3 (never executed)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics o1 (actual rows=100 loops=1)
                     Order: o1."time"
                     ->  Index Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
                     ->  Index Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o1_2 (never executed)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
                     ->  Index Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o1_3 (never executed)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
(26 rows)

-- test JOIN on time column and device_id
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
INNER JOIN :TEST_TABLE o2 ON o1.device_id = o2.device_id
    AND o1.time = o2.time
WHERE o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         Join Filter: (o1.device_id = o2.device_id)
         Rows Removed by Join Filter: 891
         ->  Custom Scan (ChunkAppend) on metrics o1 (actual rows=100 loops=1)
               Order: o1."time"
               ->  Index Scan Backward using _hyper_X_X_chunk_metrics_time_idx on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                     Filter: (v0 = 2)
                     Rows Removed by Filter: 891
               ->  Index Scan Backward using _hyper_X_X_chunk_metrics_time_idx on _hyper_X_X_chunk o1_2 (never executed)
                     Filter: (v0 = 2)
               ->  Index Scan Backward using _hyper_X_X_chunk_metrics_time_idx on _hyper_X_X_chunk o1_3 (never executed)
                     Filter: (v0 = 2)
         ->  Materialize (actual rows=991 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics o2 (actual rows=991 loops=1)
                     Order: o2."time"
                     ->  Index Scan Backward using _hyper_X_X_chunk_metrics_time_idx on _hyper_X_X_chunk o2_1 (actual rows=991 loops=1)
                     ->  Index Scan Backward using _hyper_X_X_chunk_metrics_time_idx on _hyper_X_X_chunk o2_2 (never executed)
                     ->  Index Scan Backward using _hyper_X_X_chunk_metrics_time_idx on _hyper_X_X_chunk o2_3 (never executed)
(20 rows)

-- test JOIN on device_id
-- should not use ordered append for 2nd hypertable
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
INNER JOIN :TEST_TABLE o2 ON o1.device_id = o2.device_id
WHERE o1.device_id = 1
  AND o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Nested Loop (actual rows=100 loops=1)
         ->  Custom Scan (ChunkAppend) on metrics o1 (actual rows=1 loops=1)
               Order: o1."time"
               ->  Index Scan Backward using _hyper_X_X_chunk_metrics_time_idx on _hyper_X_X_chunk o1_1 (actual rows=1 loops=1)
                     Filter: ((device_id = 1) AND (v0 = 2))
               ->  Index Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o1_2 (never executed)
                     Index Cond: (device_id = 1)
                     Filter: (v0 = 2)
               ->  Index Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o1_3 (never executed)
                     Index Cond: (device_id = 1)
                     Filter: (v0 = 2)
         ->  Materialize (actual rows=100 loops=1)
               ->  Append (actual rows=100 loops=1)
                     ->  Index Only Scan using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                           Index Cond: (device_id = 1)
                           Heap Fetches: 100
                     ->  Index Only Scan using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o2_2 (never executed)
                           Index Cond: (device_id = 1)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o2_3 (never executed)
                           Index Cond: (device_id = 1)
                           Heap Fetches: 0
(23 rows)

-- test JOIN on time column with implicit join
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1,
  :TEST_TABLE o2
WHERE o1.v0 = 2
  AND o1.time = o2.time
  AND o1.device_id = 1
  AND o2.device_id = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o2."time" = o1."time")
         ->  Custom Scan (ChunkAppend) on metrics o2 (actual rows=100 loops=1)
               Order: o2."time"
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 100
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o2_2 (never executed)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o2_3 (never executed)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics o1 (actual rows=100 loops=1)
                     Order: o1."time"
                     ->  Index Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
                     ->  Index Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o1_2 (never executed)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
                     ->  Index Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o1_3 (never executed)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
(26 rows)

-- test JOIN on time column with 3 hypertables
-- should use 3 ChunkAppend
SET join_collapse_limit TO 1;
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  INNER JOIN :TEST_TABLE o2 ON o1.time = o2.time
  INNER JOIN :TEST_TABLE o3 ON o1.time = o3.time
WHERE o1.device_id = 1
  AND o2.device_id = 2
  AND o3.device_id = 3
  AND o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o3."time" = o1."time")
         ->  Custom Scan (ChunkAppend) on metrics o3 (actual rows=100 loops=1)
               Order: o3."time"
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o3_1 (actual rows=100 loops=1)
                     Index Cond: (device_id = 3)
                     Heap Fetches: 100
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o3_2 (never executed)
                     Index Cond: (device_id = 3)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o3_3 (never executed)
                     Index Cond: (device_id = 3)
                     Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Merge Join (actual rows=100 loops=1)
                     Merge Cond: (o2."time" = o1."time")
                     ->  Custom Scan (ChunkAppend) on metrics o2 (actual rows=100 loops=1)
                           Order: o2."time"
                           ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                                 Index Cond: (device_id = 2)
                                 Heap Fetches: 100
                           ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o2_2 (never executed)
                                 Index Cond: (device_id = 2)
                                 Heap Fetches: 0
                           ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o2_3 (never executed)
                                 Index Cond: (device_id = 2)
                                 Heap Fetches: 0
                     ->  Materialize (actual rows=100 loops=1)
                           ->  Custom Scan (ChunkAppend) on metrics o1 (actual rows=100 loops=1)
                                 Order: o1."time"
                                 ->  Index Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                                       Index Cond: (device_id = 1)
                                       Filter: (v0 = 2)
                                 ->  Index Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o1_2 (never executed)
                                       Index Cond: (device_id = 1)
                                       Filter: (v0 = 2)
                                 ->  Index Scan Backward using _hyper_X_X_chunk_metrics_device_id_time_idx on _hyper_X_X_chunk o1_3 (never executed)
                                       Index Cond: (device_id = 1)
                                       Filter: (v0 = 2)
(40 rows)

RESET join_collapse_limit;
RESET enable_seqscan;
\set TEST_TABLE 'metrics_space'
\ir :TEST_QUERY_NAME
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
-- test LATERAL with ordered append in the outer query
:PREFIX
SELECT time,
  pg_typeof(l)
FROM :TEST_TABLE,
  LATERAL (
    SELECT *
    FROM (
      VALUES (1),
        (2)) v) l
ORDER BY time DESC
LIMIT 2;
QUERY PLAN
 Limit (actual rows=2 loops=1)
   ->  Nested Loop (actual rows=2 loops=1)
         ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=1 loops=1)
               Order: metrics_space."time" DESC
               ->  Merge Append (actual rows=1 loops=1)
                     Sort Key: _hyper_X_X_chunk."time" DESC
                     ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (actual rows=1 loops=1)
                           Heap Fetches: 1
                     ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (actual rows=1 loops=1)
                           Heap Fetches: 1
                     ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (actual rows=1 loops=1)
                           Heap Fetches: 1
               ->  Merge Append (never executed)
                     Sort Key: _hyper_X_X_chunk."time" DESC
                     ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (never executed)
                           Heap Fetches: 0
               ->  Merge Append (never executed)
                     Sort Key: _hyper_X_X_chunk."time" DESC
                     ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (never executed)
                           Heap Fetches: 0
         ->  Materialize (actual rows=2 loops=1)
               ->  Values Scan on "*VALUES*" (actual rows=2 loops=1)
(30 rows)

-- test LATERAL with ordered append in the lateral query
:PREFIX
SELECT time,
  pg_typeof(v)
FROM (
  VALUES (1),
    (2)) v,
  LATERAL (
    SELECT *
    FROM :TEST_TABLE
    ORDER BY time DESC
    LIMIT 2) l;
QUERY PLAN
 Nested Loop (actual rows=4 loops=1)
   ->  Values Scan on "*VALUES*" (actual rows=2 loops=1)
   ->  Materialize (actual rows=2 loops=2)
         ->  Subquery Scan on l (actual rows=2 loops=1)
               ->  Limit (actual rows=2 loops=1)
                     ->  Result (actual rows=2 loops=1)
                           ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=2 loops=1)
                                 Order: metrics_space."time" DESC
                                 ->  Merge Append (actual rows=2 loops=1)
                                       Sort Key: _hyper_X_X_chunk."time" DESC
                                       ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (actual rows=2 loops=1)
                                             Heap Fetches: 2
                                       ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (actual rows=1 loops=1)
                                             Heap Fetches: 1
                                       ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (actual rows=1 loops=1)
                                             Heap Fetches: 1
                                 ->  Merge Append (never executed)
                                       Sort Key: _hyper_X_X_chunk."time" DESC
                                       ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (never executed)
                                             Heap Fetches: 0
                                       ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (never executed)
                                             Heap Fetches: 0
                                       ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (never executed)
                                             Heap Fetches: 0
                                 ->  Merge Append (never executed)
                                       Sort Key: _hyper_X_X_chunk."time" DESC
                                       ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (never executed)
                                             Heap Fetches: 0
                                       ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (never executed)
                                             Heap Fetches: 0
                                       ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (never executed)
                                             Heap Fetches: 0
(32 rows)

-- test plan with best index is chosen
-- this should use device_id, time index
:PREFIX
SELECT time,
  device_id
FROM :TEST_TABLE
WHERE device_id = 1
ORDER BY time DESC
LIMIT 1;
QUERY PLAN
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=1 loops=1)
         Order: metrics_space."time" DESC
         ->  Index Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (actual rows=1 loops=1)
               Filter: (device_id = 1)
         ->  Index Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (never executed)
               Filter: (device_id = 1)
         ->  Index Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (never executed)
               Filter: (device_id = 1)
(9 rows)

-- test plan with best index is chosen
-- this should use time index
:PREFIX
SELECT time
FROM :TEST_TABLE
ORDER BY time DESC
LIMIT 1;
QUERY PLAN
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=1 loops=1)
         Order: metrics_space."time" DESC
         ->  Merge Append (actual rows=1 loops=1)
               Sort Key: _hyper_X_X_chunk."time" DESC
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (actual rows=1 loops=1)
                     Heap Fetches: 1
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (actual rows=1 loops=1)
                     Heap Fetches: 1
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (actual rows=1 loops=1)
                     Heap Fetches: 1
         ->  Merge Append (never executed)
               Sort Key: _hyper_X_X_chunk."time" DESC
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (never executed)
                     Heap Fetches: 0
         ->  Merge Append (never executed)
               Sort Key: _hyper_X_X_chunk."time" DESC
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (never executed)
                     Heap Fetches: 0
(27 rows)

-- test LATERAL with correlated query
-- only last chunk should be executed
:PREFIX
SELECT g.time,
  l.time
FROM generate_series('2000-01-01'::timestamptz, '2000-01-03', '1d') AS g (time)
  LEFT OUTER JOIN LATERAL (
  SELECT *
  FROM :TEST_TABLE o
  WHERE o.time >= g.time
    AND o.time < g.time + '1d'::interval
  ORDER BY time DESC
  LIMIT 1) l ON TRUE;
QUERY PLAN
 Nested Loop Left Join (actual rows=3 loops=1)
   ->  Function Scan on generate_series g (actual rows=3 loops=1)
   ->  Limit (actual rows=1 loops=3)
         ->  Result (actual rows=1 loops=3)
               ->  Custom Scan (ChunkAppend) on metrics_space o (actual rows=1 loops=3)
                     Order: o."time" DESC
                     ->  Merge Append (actual rows=0 loops=3)
                           Sort Key: o_1."time" DESC
                           ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_1 (actual rows=0 loops=3)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 Heap Fetches: 0
                           ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_2 (actual rows=0 loops=3)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 Heap Fetches: 0
                           ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_3 (actual rows=0 loops=3)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 Heap Fetches: 0
                     ->  Merge Append (actual rows=0 loops=3)
                           Sort Key: o_4."time" DESC
                           ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_4 (actual rows=0 loops=3)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 Heap Fetches: 0
                           ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_5 (actual rows=0 loops=3)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 Heap Fetches: 0
                           ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_6 (actual rows=0 loops=3)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 Heap Fetches: 0
                     ->  Merge Append (actual rows=1 loops=3)
                           Sort Key: o_7."time" DESC
                           ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_7 (actual rows=1 loops=3)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 Heap Fetches: 3
                           ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_8 (actual rows=1 loops=3)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 Heap Fetches: 3
                           ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_9 (actual rows=1 loops=3)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 Heap Fetches: 3
(39 rows)

-- test LATERAL with correlated query
-- only 2nd chunk should be executed
:PREFIX
SELECT g.time,
  l.time
FROM generate_series('2000-01-10'::timestamptz, '2000-01-11', '1d') AS g (time)
  LEFT OUTER JOIN LATERAL (
  SELECT *
  FROM :TEST_TABLE o
  WHERE o.time >= g.time
    AND o.time < g.time + '1d'::interval
  ORDER BY time
  LIMIT 1) l ON TRUE;
QUERY PLAN
 Nested Loop Left Join (actual rows=2 loops=1)
   ->  Function Scan on generate_series g (actual rows=2 loops=1)
   ->  Limit (actual rows=1 loops=2)
         ->  Result (actual rows=1 loops=2)
               ->  Custom Scan (ChunkAppend) on metrics_space o (actual rows=1 loops=2)
                     Order: o."time"
                     ->  Merge Append (actual rows=0 loops=2)
                           Sort Key: o_1."time"
                           ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_1 (actual rows=0 loops=2)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_2 (actual rows=0 loops=2)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_3 (actual rows=0 loops=2)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 Heap Fetches: 0
                     ->  Merge Append (actual rows=1 loops=2)
                           Sort Key: o_4."time"
                           ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_4 (actual rows=1 loops=2)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 Heap Fetches: 2
                           ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_5 (actual rows=1 loops=2)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 Heap Fetches: 2
                           ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_6 (actual rows=1 loops=2)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 Heap Fetches: 2
                     ->  Merge Append (never executed)
                           Sort Key: o_7."time"
                           ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_7 (never executed)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_8 (never executed)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_9 (never executed)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 Heap Fetches: 0
(39 rows)

-- test startup and runtime exclusion together
:PREFIX
SELECT g.time,
  l.time
FROM generate_series('2000-01-01'::timestamptz, '2000-01-03', '1d') AS g (time)
  LEFT OUTER JOIN LATERAL (
  SELECT *
  FROM :TEST_TABLE o
  WHERE o.time >= g.time
    AND o.time < g.time + '1d'::interval
    AND o.time < now()
  ORDER BY time DESC
  LIMIT 1) l ON TRUE;
QUERY PLAN
 Nested Loop Left Join (actual rows=3 loops=1)
   ->  Function Scan on generate_series g (actual rows=3 loops=1)
   ->  Limit (actual rows=1 loops=3)
         ->  Result (actual rows=1 loops=3)
               ->  Custom Scan (ChunkAppend) on metrics_space o (actual rows=1 loops=3)
                     Order: o."time" DESC
                     ->  Merge Append (actual rows=0 loops=3)
                           Sort Key: o_1."time" DESC
                           ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_1 (actual rows=0 loops=3)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                                 Heap Fetches: 0
                           ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_2 (actual rows=0 loops=3)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                                 Heap Fetches: 0
                           ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_3 (actual rows=0 loops=3)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                                 Heap Fetches: 0
                     ->  Merge Append (actual rows=0 loops=3)
                           Sort Key: o_4."time" DESC
                           ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_4 (actual rows=0 loops=3)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                                 Heap Fetches: 0
                           ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_5 (actual rows=0 loops=3)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                                 Heap Fetches: 0
                           ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_6 (actual rows=0 loops=3)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                                 Heap Fetches: 0
                     ->  Merge Append (actual rows=1 loops=3)
                           Sort Key: o_7."time" DESC
                           ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_7 (actual rows=1 loops=3)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                                 Heap Fetches: 3
                           ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_8 (actual rows=1 loops=3)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                                 Heap Fetches: 3
                           ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_9 (actual rows=1 loops=3)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                                 Heap Fetches: 3
(39 rows)

-- test startup and runtime exclusion together
-- all chunks should be filtered
:PREFIX
SELECT g.time,
  l.time
FROM generate_series('2000-01-01'::timestamptz, '2000-01-03', '1d') AS g (time)
  LEFT OUTER JOIN LATERAL (
  SELECT *
  FROM :TEST_TABLE o
  WHERE o.time >= g.time
    AND o.time < g.time + '1d'::interval
    AND o.time > now()
  ORDER BY time DESC
  LIMIT 1) l ON TRUE;
QUERY PLAN
 Nested Loop Left Join (actual rows=3 loops=1)
   ->  Function Scan on generate_series g (actual rows=3 loops=1)
   ->  Limit (actual rows=0 loops=3)
         ->  Result (actual rows=0 loops=3)
               ->  Custom Scan (ChunkAppend) on metrics_space o (actual rows=0 loops=3)
                     Order: o."time" DESC
                     ->  Merge Append (actual rows=0 loops=3)
                           Sort Key: o_1."time" DESC
                           ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_1 (actual rows=0 loops=3)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" > now()))
                                 Heap Fetches: 0
                           ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_2 (actual rows=0 loops=3)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" > now()))
                                 Heap Fetches: 0
                           ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_3 (actual rows=0 loops=3)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" > now()))
                                 Heap Fetches: 0
                     ->  Merge Append (actual rows=0 loops=3)
                           Sort Key: o_4."time" DESC
                           ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_4 (actual rows=0 loops=3)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" > now()))
                                 Heap Fetches: 0
                           ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_5 (actual rows=0 loops=3)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" > now()))
                                 Heap Fetches: 0
                           ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_6 (actual rows=0 loops=3)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" > now()))
                                 Heap Fetches: 0
                     ->  Merge Append (actual rows=0 loops=3)
                           Sort Key: o_7."time" DESC
                           ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_7 (actual rows=0 loops=3)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" > now()))
                                 Heap Fetches: 0
                           ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_8 (actual rows=0 loops=3)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" > now()))
                                 Heap Fetches: 0
                           ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o_9 (actual rows=0 loops=3)
                                 Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" > now()))
                                 Heap Fetches: 0
(39 rows)

-- test JOIN
-- no exclusion on joined table because quals are not propagated yet
-- With PG 14 on i368, this query uses a nested loop join. Disable the nested loop join to get the same query plan in all tests
SET enable_nestloop TO off;
:PREFIX
SELECT o1.time,
  o2.time
FROM :TEST_TABLE o1
  INNER JOIN :TEST_TABLE o2 ON o1.time = o2.time
WHERE o1.time < '2000-02-01'
  AND o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o1.time;
QUERY PLAN
 Merge Join (actual rows=82038 loops=1)
   Merge Cond: (o2."time" = o1."time")
   ->  Custom Scan (ChunkAppend) on metrics_space o2 (actual rows=82038 loops=1)
         Order: o2."time"
         ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o2_1 (actual rows=21586 loops=1)
               Index Cond: ((device_id = 2) AND ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone))
               Heap Fetches: 21586
         ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o2_2 (actual rows=30226 loops=1)
               Index Cond: ((device_id = 2) AND ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone))
               Heap Fetches: 30226
         ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o2_3 (actual rows=30226 loops=1)
               Index Cond: ((device_id = 2) AND ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone))
               Heap Fetches: 30226
   ->  Materialize (actual rows=82038 loops=1)
         ->  Custom Scan (ChunkAppend) on metrics_space o1 (actual rows=82038 loops=1)
               Order: o1."time"
               ->  Index Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o1_1 (actual rows=21586 loops=1)
                     Index Cond: ((device_id = 1) AND ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone))
                     Filter: (v0 = 2)
               ->  Index Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o1_2 (actual rows=30226 loops=1)
                     Index Cond: ((device_id = 1) AND ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone))
                     Filter: (v0 = 2)
               ->  Index Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o1_3 (actual rows=30226 loops=1)
                     Index Cond: ((device_id = 1) AND ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone))
                     Filter: (v0 = 2)
(25 rows)

RESET enable_nestloop;
-- test JOIN
-- last chunk of o2 should not be executed
:PREFIX
SELECT o1.time,
  o2.time
FROM :TEST_TABLE o1
  INNER JOIN (
    SELECT *
    FROM :TEST_TABLE o2
    ORDER BY time) o2 ON o1.time = o2.time
WHERE o1.time < '2000-01-08'
ORDER BY o1.time
LIMIT 10;
QUERY PLAN
 Limit (actual rows=10 loops=1)
   ->  Merge Join (actual rows=10 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Custom Scan (ChunkAppend) on metrics_space o1 (actual rows=1 loops=1)
               Order: o1."time"
               ->  Merge Append (actual rows=1 loops=1)
                     Sort Key: o1_1."time"
                     ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o1_1 (actual rows=1 loops=1)
                           Index Cond: ("time" < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                           Heap Fetches: 1
                     ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o1_2 (actual rows=1 loops=1)
                           Index Cond: ("time" < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                           Heap Fetches: 1
                     ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o1_3 (actual rows=1 loops=1)
                           Index Cond: ("time" < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                           Heap Fetches: 1
               ->  Merge Append (never executed)
                     Sort Key: o1_4."time"
                     ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o1_4 (never executed)
                           Index Cond: ("time" < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o1_5 (never executed)
                           Index Cond: ("time" < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o1_6 (never executed)
                           Index Cond: ("time" < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                           Heap Fetches: 0
         ->  Materialize (actual rows=10 loops=1)
               ->  Result (actual rows=10 loops=1)
                     ->  Custom Scan (ChunkAppend) on metrics_space o2 (actual rows=10 loops=1)
                           Order: o2."time"
                           ->  Merge Append (actual rows=10 loops=1)
                                 Sort Key: o2_1."time"
                                 ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o2_1 (actual rows=5 loops=1)
                                       Heap Fetches: 5
                                 ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o2_2 (actual rows=5 loops=1)
                                       Heap Fetches: 5
                                 ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o2_3 (actual rows=2 loops=1)
                                       Heap Fetches: 2
                           ->  Merge Append (never executed)
                                 Sort Key: o2_4."time"
                                 ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o2_4 (never executed)
                                       Heap Fetches: 0
                                 ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o2_5 (never executed)
                                       Heap Fetches: 0
                                 ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o2_6 (never executed)
                                       Heap Fetches: 0
                           ->  Merge Append (never executed)
                                 Sort Key: o2_7."time"
                                 ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o2_7 (never executed)
                                       Heap Fetches: 0
                                 ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o2_8 (never executed)
                                       Heap Fetches: 0
                                 ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o2_9 (never executed)
                                       Heap Fetches: 0
(55 rows)

-- test join against max query
-- not ChunkAppend so no chunk exclusion
SET enable_hashjoin = FALSE;
SET enable_nestloop = FALSE;
SET enable_hashagg = FALSE;
:PREFIX
SELECT o1.time,
  o2.*
FROM :TEST_TABLE o1
  INNER JOIN (
    SELECT max(time) AS max_time
    FROM :TEST_TABLE) o2 ON o1.time = o2.max_time
WHERE o1.device_id = 1
ORDER BY time;
QUERY PLAN
 Merge Join (actual rows=1 loops=1)
   Merge Cond: (o1."time" = ($0))
   ->  Custom Scan (ChunkAppend) on metrics_space o1 (actual rows=82038 loops=1)
         Order: o1."time"
         ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o1_1 (actual rows=21586 loops=1)
               Index Cond: (device_id = 1)
               Heap Fetches: 21586
         ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o1_2 (actual rows=30226 loops=1)
               Index Cond: (device_id = 1)
               Heap Fetches: 30226
         ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o1_3 (actual rows=30226 loops=1)
               Index Cond: (device_id = 1)
               Heap Fetches: 30226
   ->  Sort (actual rows=1 loops=1)
         Sort Key: ($0)
         Sort Method: quicksort 
         ->  Result (actual rows=1 loops=1)
               InitPlan 1 (returns $0)
                 ->  Limit (actual rows=1 loops=1)
                       ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=1 loops=1)
                             Order: metrics_space."time" DESC
                             ->  Merge Append (actual rows=1 loops=1)
                                   Sort Key: _hyper_X_X_chunk."time" DESC
                                   ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (actual rows=1 loops=1)
                                         Index Cond: ("time" IS NOT NULL)
                                         Heap Fetches: 1
                                   ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (actual rows=1 loops=1)
                                         Index Cond: ("time" IS NOT NULL)
                                         Heap Fetches: 1
                                   ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (actual rows=1 loops=1)
                                         Index Cond: ("time" IS NOT NULL)
                                         Heap Fetches: 1
                             ->  Merge Append (never executed)
                                   Sort Key: _hyper_X_X_chunk."time" DESC
                                   ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (never executed)
                                         Index Cond: ("time" IS NOT NULL)
                                         Heap Fetches: 0
                                   ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (never executed)
                                         Index Cond: ("time" IS NOT NULL)
                                         Heap Fetches: 0
                                   ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (never executed)
                                         Index Cond: ("time" IS NOT NULL)
                                         Heap Fetches: 0
                             ->  Merge Append (never executed)
                                   Sort Key: _hyper_X_X_chunk."time" DESC
                                   ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (never executed)
                                         Index Cond: ("time" IS NOT NULL)
                                         Heap Fetches: 0
                                   ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (never executed)
                                         Index Cond: ("time" IS NOT NULL)
                                         Heap Fetches: 0
                                   ->  Index Only Scan Backward using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk (never executed)
                                         Index Cond: ("time" IS NOT NULL)
                                         Heap Fetches: 0
(54 rows)

RESET enable_hashjoin;
RESET enable_nestloop;
RESET enable_hashagg;
SET enable_seqscan TO false;
-- test JOIN on time column
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  INNER JOIN :TEST_TABLE o2 ON o1.time = o2.time
WHERE o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o2."time" = o1."time")
         ->  Custom Scan (ChunkAppend) on metrics_space o2 (actual rows=100 loops=1)
               Order: o2."time"
               ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 100
               ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o2_2 (never executed)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o2_3 (never executed)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_space o1 (actual rows=100 loops=1)
                     Order: o1."time"
                     ->  Index Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
                     ->  Index Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o1_2 (never executed)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
                     ->  Index Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o1_3 (never executed)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
(26 rows)

-- test JOIN on time column with USING
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  INNER JOIN :TEST_TABLE o2 USING (time)
WHERE o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o2."time" = o1."time")
         ->  Custom Scan (ChunkAppend) on metrics_space o2 (actual rows=100 loops=1)
               Order: o2."time"
               ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 100
               ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o2_2 (never executed)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o2_3 (never executed)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_space o1 (actual rows=100 loops=1)
                     Order: o1."time"
                     ->  Index Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
                     ->  Index Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o1_2 (never executed)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
                     ->  Index Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o1_3 (never executed)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
(26 rows)

-- test NATURAL JOIN on time column
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  NATURAL INNER JOIN :TEST_TABLE o2
WHERE o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=0 loops=1)
   ->  Sort (actual rows=0 loops=1)
         Sort Key: o1."time"
         Sort Method: quicksort 
         ->  Result (actual rows=0 loops=1)
               One-Time Filter: false
(6 rows)

-- test LEFT JOIN on time column
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  LEFT JOIN :TEST_TABLE o2 ON o1.time = o2.time
WHERE o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o2."time" = o1."time")
         ->  Custom Scan (ChunkAppend) on metrics_space o2 (actual rows=100 loops=1)
               Order: o2."time"
               ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 100
               ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o2_2 (never executed)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o2_3 (never executed)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_space o1 (actual rows=100 loops=1)
                     Order: o1."time"
                     ->  Index Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
                     ->  Index Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o1_2 (never executed)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
                     ->  Index Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o1_3 (never executed)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
(26 rows)

-- test RIGHT JOIN on time column
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  RIGHT JOIN :TEST_TABLE o2 ON o1.time = o2.time
WHERE o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o2.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o2."time" = o1."time")
         ->  Custom Scan (ChunkAppend) on metrics_space o2 (actual rows=100 loops=1)
               Order: o2."time"
               ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 100
               ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o2_2 (never executed)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o2_3 (never executed)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_space o1 (actual rows=100 loops=1)
                     Order: o1."time"
                     ->  Index Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
                     ->  Index Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o1_2 (never executed)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
                     ->  Index Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o1_3 (never executed)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
(26 rows)

-- test JOIN on time column with ON clause expression order switched
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  INNER JOIN :TEST_TABLE o2 ON o2.time = o1.time
WHERE o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o2."time" = o1."time")
         ->  Custom Scan (ChunkAppend) on metrics_space o2 (actual rows=100 loops=1)
               Order: o2."time"
               ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 100
               ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o2_2 (never executed)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o2_3 (never executed)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_space o1 (actual rows=100 loops=1)
                     Order: o1."time"
                     ->  Index Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
                     ->  Index Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o1_2 (never executed)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
                     ->  Index Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o1_3 (never executed)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
(26 rows)

-- test JOIN on time column with equality condition in WHERE clause
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  INNER JOIN :TEST_TABLE o2 ON TRUE
WHERE o1.time = o2.time
  AND o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o2."time" = o1."time")
         ->  Custom Scan (ChunkAppend) on metrics_space o2 (actual rows=100 loops=1)
               Order: o2."time"
               ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 100
               ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o2_2 (never executed)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o2_3 (never executed)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_space o1 (actual rows=100 loops=1)
                     Order: o1."time"
                     ->  Index Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
                     ->  Index Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o1_2 (never executed)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
                     ->  Index Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o1_3 (never executed)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
(26 rows)

-- test JOIN on time column with ORDER BY 2nd hypertable
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  INNER JOIN :TEST_TABLE o2 ON o1.time = o2.time
WHERE o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o2.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o2."time" = o1."time")
         ->  Custom Scan (ChunkAppend) on metrics_space o2 (actual rows=100 loops=1)
               Order: o2."time"
               ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 100
               ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o2_2 (never executed)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o2_3 (never executed)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_space o1 (actual rows=100 loops=1)
                     Order: o1."time"
                     ->  Index Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
                     ->  Index Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o1_2 (never executed)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
                     ->  Index Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o1_3 (never executed)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
(26 rows)

-- test JOIN on time column and device_id
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
INNER JOIN :TEST_TABLE o2 ON o1.device_id = o2.device_id
    AND o1.time = o2.time
WHERE o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         Join Filter: (o1.device_id = o2.device_id)
         Rows Removed by Join Filter: 891
         ->  Custom Scan (ChunkAppend) on metrics_space o1 (actual rows=100 loops=1)
               Order: o1."time"
               ->  Merge Append (actual rows=100 loops=1)
                     Sort Key: o1_1."time"
                     ->  Index Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                           Filter: (v0 = 2)
                           Rows Removed by Filter: 297
                     ->  Index Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o1_2 (actual rows=0 loops=1)
                           Filter: (v0 = 2)
                           Rows Removed by Filter: 86344
                     ->  Index Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o1_3 (actual rows=0 loops=1)
                           Filter: (v0 = 2)
                           Rows Removed by Filter: 43172
               ->  Merge Append (never executed)
                     Sort Key: o1_4."time"
                     ->  Index Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o1_4 (never executed)
                           Filter: (v0 = 2)
                     ->  Index Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o1_5 (never executed)
                           Filter: (v0 = 2)
                     ->  Index Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o1_6 (never executed)
                           Filter: (v0 = 2)
               ->  Merge Append (never executed)
                     Sort Key: o1_7."time"
                     ->  Index Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o1_7 (never executed)
                           Filter: (v0 = 2)
                     ->  Index Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o1_8 (never executed)
                           Filter: (v0 = 2)
                     ->  Index Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o1_9 (never executed)
                           Filter: (v0 = 2)
         ->  Materialize (actual rows=991 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_space o2 (actual rows=991 loops=1)
                     Order: o2."time"
                     ->  Merge Append (actual rows=991 loops=1)
                           Sort Key: o2_1."time"
                           ->  Index Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o2_1 (actual rows=397 loops=1)
                           ->  Index Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o2_2 (actual rows=397 loops=1)
                           ->  Index Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o2_3 (actual rows=199 loops=1)
                     ->  Merge Append (never executed)
                           Sort Key: o2_4."time"
                           ->  Index Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o2_4 (never executed)
                           ->  Index Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o2_5 (never executed)
                           ->  Index Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o2_6 (never executed)
                     ->  Merge Append (never executed)
                           Sort Key: o2_7."time"
                           ->  Index Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o2_7 (never executed)
                           ->  Index Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o2_8 (never executed)
                           ->  Index Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o2_9 (never executed)
(52 rows)

-- test JOIN on device_id
-- should not use ordered append for 2nd hypertable
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
INNER JOIN :TEST_TABLE o2 ON o1.device_id = o2.device_id
WHERE o1.device_id = 1
  AND o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Nested Loop (actual rows=100 loops=1)
         ->  Custom Scan (ChunkAppend) on metrics_space o1 (actual rows=1 loops=1)
               Order: o1."time"
               ->  Index Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o1_1 (actual rows=1 loops=1)
                     Filter: ((device_id = 1) AND (v0 = 2))
               ->  Index Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o1_2 (never executed)
                     Filter: ((device_id = 1) AND (v0 = 2))
               ->  Index Scan using _hyper_X_X_chunk_metrics_space_time_idx on _hyper_X_X_chunk o1_3 (never executed)
                     Filter: ((device_id = 1) AND (v0 = 2))
         ->  Materialize (actual rows=100 loops=1)
               ->  Append (actual rows=100 loops=1)
                     ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                           Index Cond: (device_id = 1)
                           Heap Fetches: 100
                     ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o2_2 (never executed)
                           Index Cond: (device_id = 1)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o2_3 (never executed)
                           Index Cond: (device_id = 1)
                           Heap Fetches: 0
(21 rows)

-- test JOIN on time column with implicit join
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1,
  :TEST_TABLE o2
WHERE o1.v0 = 2
  AND o1.time = o2.time
  AND o1.device_id = 1
  AND o2.device_id = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o2."time" = o1."time")
         ->  Custom Scan (ChunkAppend) on metrics_space o2 (actual rows=100 loops=1)
               Order: o2."time"
               ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 100
               ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o2_2 (never executed)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o2_3 (never executed)
                     Index Cond: (device_id = 2)
                     Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_space o1 (actual rows=100 loops=1)
                     Order: o1."time"
                     ->  Index Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
                     ->  Index Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o1_2 (never executed)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
                     ->  Index Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o1_3 (never executed)
                           Index Cond: (device_id = 1)
                           Filter: (v0 = 2)
(26 rows)

-- test JOIN on time column with 3 hypertables
-- should use 3 ChunkAppend
SET join_collapse_limit TO 1;
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  INNER JOIN :TEST_TABLE o2 ON o1.time = o2.time
  INNER JOIN :TEST_TABLE o3 ON o1.time = o3.time
WHERE o1.device_id = 1
  AND o2.device_id = 2
  AND o3.device_id = 3
  AND o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o3."time" = o1."time")
         ->  Custom Scan (ChunkAppend) on metrics_space o3 (actual rows=100 loops=1)
               Order: o3."time"
               ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o3_1 (actual rows=100 loops=1)
                     Index Cond: (device_id = 3)
                     Heap Fetches: 100
               ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o3_2 (never executed)
                     Index Cond: (device_id = 3)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o3_3 (never executed)
                     Index Cond: (device_id = 3)
                     Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Merge Join (actual rows=100 loops=1)
                     Merge Cond: (o2."time" = o1."time")
                     ->  Custom Scan (ChunkAppend) on metrics_space o2 (actual rows=100 loops=1)
                           Order: o2."time"
                           ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                                 Index Cond: (device_id = 2)
                                 Heap Fetches: 100
                           ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o2_2 (never executed)
                                 Index Cond: (device_id = 2)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o2_3 (never executed)
                                 Index Cond: (device_id = 2)
                                 Heap Fetches: 0
                     ->  Materialize (actual rows=100 loops=1)
                           ->  Custom Scan (ChunkAppend) on metrics_space o1 (actual rows=100 loops=1)
                                 Order: o1."time"
                                 ->  Index Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                                       Index Cond: (device_id = 1)
                                       Filter: (v0 = 2)
                                 ->  Index Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o1_2 (never executed)
                                       Index Cond: (device_id = 1)
                                       Filter: (v0 = 2)
                                 ->  Index Scan using _hyper_X_X_chunk_metrics_space_device_id_time_idx on _hyper_X_X_chunk o1_3 (never executed)
                                       Index Cond: (device_id = 1)
                                       Filter: (v0 = 2)
(40 rows)

RESET join_collapse_limit;
RESET enable_seqscan;
\set TEST_TABLE 'metrics_compressed'
\ir :TEST_QUERY_NAME
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
-- test LATERAL with ordered append in the outer query
:PREFIX
SELECT time,
  pg_typeof(l)
FROM :TEST_TABLE,
  LATERAL (
    SELECT *
    FROM (
      VALUES (1),
        (2)) v) l
ORDER BY time DESC
LIMIT 2;
QUERY PLAN
 Limit (actual rows=2 loops=1)
   ->  Nested Loop (actual rows=2 loops=1)
         ->  Custom Scan (ChunkAppend) on metrics_compressed (actual rows=1 loops=1)
               Order: metrics_compressed."time" DESC
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (actual rows=1 loops=1)
                     ->  Sort (actual rows=11 loops=1)
                           Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                           Sort Method: quicksort 
                           ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=310 loops=1)
               ->  Sort (never executed)
                     Sort Key: _hyper_X_X_chunk."time" DESC
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
                           ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
               ->  Sort (never executed)
                     Sort Key: _hyper_X_X_chunk."time" DESC
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
                           ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
         ->  Materialize (actual rows=2 loops=1)
               ->  Values Scan on "*VALUES*" (actual rows=2 loops=1)
(19 rows)

-- test LATERAL with ordered append in the lateral query
:PREFIX
SELECT time,
  pg_typeof(v)
FROM (
  VALUES (1),
    (2)) v,
  LATERAL (
    SELECT *
    FROM :TEST_TABLE
    ORDER BY time DESC
    LIMIT 2) l;
QUERY PLAN
 Nested Loop (actual rows=4 loops=1)
   ->  Values Scan on "*VALUES*" (actual rows=2 loops=1)
   ->  Materialize (actual rows=2 loops=2)
         ->  Subquery Scan on l (actual rows=2 loops=1)
               ->  Limit (actual rows=2 loops=1)
                     ->  Result (actual rows=2 loops=1)
                           ->  Custom Scan (ChunkAppend) on metrics_compressed (actual rows=2 loops=1)
                                 Order: metrics_compressed."time" DESC
                                 ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (actual rows=2 loops=1)
                                       ->  Sort (actual rows=11 loops=1)
                                             Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                             Sort Method: quicksort 
                                             ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=310 loops=1)
                                 ->  Sort (never executed)
                                       Sort Key: _hyper_X_X_chunk."time" DESC
                                       ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
                                             ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
                                 ->  Sort (never executed)
                                       Sort Key: _hyper_X_X_chunk."time" DESC
                                       ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
                                             ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
(21 rows)

-- test plan with best index is chosen
-- this should use device_id, time index
:PREFIX
SELECT time,
  device_id
FROM :TEST_TABLE
WHERE device_id = 1
ORDER BY time DESC
LIMIT 1;
QUERY PLAN
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_compressed (actual rows=1 loops=1)
         Order: metrics_compressed."time" DESC
         ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (actual rows=1 loops=1)
               ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=1 loops=1)
                     Index Cond: (device_id = 1)
         ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
               ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                     Index Cond: (device_id = 1)
         ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
               ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                     Index Cond: (device_id = 1)
(12 rows)

-- test plan with best index is chosen
-- this should use time index
:PREFIX
SELECT time
FROM :TEST_TABLE
ORDER BY time DESC
LIMIT 1;
QUERY PLAN
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_compressed (actual rows=1 loops=1)
         Order: metrics_compressed."time" DESC
         ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (actual rows=1 loops=1)
               ->  Sort (actual rows=11 loops=1)
                     Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                     Sort Method: quicksort 
                     ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=310 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
               ->  Sort (never executed)
                     Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                     ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
         ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
               ->  Sort (never executed)
                     Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                     ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
(16 rows)

-- test LATERAL with correlated query
-- only last chunk should be executed
:PREFIX
SELECT g.time,
  l.time
FROM generate_series('2000-01-01'::timestamptz, '2000-01-03', '1d') AS g (time)
  LEFT OUTER JOIN LATERAL (
  SELECT *
  FROM :TEST_TABLE o
  WHERE o.time >= g.time
    AND o.time < g.time + '1d'::interval
  ORDER BY time DESC
  LIMIT 1) l ON TRUE;
QUERY PLAN
 Nested Loop Left Join (actual rows=3 loops=1)
   ->  Function Scan on generate_series g (actual rows=3 loops=1)
   ->  Limit (actual rows=1 loops=3)
         ->  Result (actual rows=1 loops=3)
               ->  Custom Scan (ChunkAppend) on metrics_compressed o (actual rows=1 loops=3)
                     Order: o."time" DESC
                     Chunks excluded during startup: 0
                     Chunks excluded during runtime: 2
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_1 (never executed)
                           Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           ->  Sort (never executed)
                                 Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                 ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_2 (never executed)
                           Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           ->  Sort (never executed)
                                 Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                 ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_3 (actual rows=1 loops=3)
                           Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           Rows Removed by Filter: 5060
                           ->  Sort (actual rows=11 loops=3)
                                 Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                 Sort Method: quicksort 
                                 ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=53 loops=3)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 167
(29 rows)

-- test LATERAL with correlated query
-- only 2nd chunk should be executed
:PREFIX
SELECT g.time,
  l.time
FROM generate_series('2000-01-10'::timestamptz, '2000-01-11', '1d') AS g (time)
  LEFT OUTER JOIN LATERAL (
  SELECT *
  FROM :TEST_TABLE o
  WHERE o.time >= g.time
    AND o.time < g.time + '1d'::interval
  ORDER BY time
  LIMIT 1) l ON TRUE;
QUERY PLAN
 Nested Loop Left Join (actual rows=2 loops=1)
   ->  Function Scan on generate_series g (actual rows=2 loops=1)
   ->  Limit (actual rows=1 loops=2)
         ->  Result (actual rows=1 loops=2)
               ->  Custom Scan (ChunkAppend) on metrics_compressed o (actual rows=1 loops=2)
                     Order: o."time"
                     Chunks excluded during startup: 0
                     Chunks excluded during runtime: 2
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_1 (never executed)
                           Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           ->  Sort (never executed)
                                 Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                                 ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_2 (actual rows=1 loops=2)
                           Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           Rows Removed by Filter: 6540
                           ->  Sort (actual rows=11 loops=2)
                                 Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                                 Sort Method: quicksort 
                                 ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=55 loops=2)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 255
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_3 (never executed)
                           Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           ->  Sort (never executed)
                                 Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                                 ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
(29 rows)

-- test startup and runtime exclusion together
:PREFIX
SELECT g.time,
  l.time
FROM generate_series('2000-01-01'::timestamptz, '2000-01-03', '1d') AS g (time)
  LEFT OUTER JOIN LATERAL (
  SELECT *
  FROM :TEST_TABLE o
  WHERE o.time >= g.time
    AND o.time < g.time + '1d'::interval
    AND o.time < now()
  ORDER BY time DESC
  LIMIT 1) l ON TRUE;
QUERY PLAN
 Nested Loop Left Join (actual rows=3 loops=1)
   ->  Function Scan on generate_series g (actual rows=3 loops=1)
   ->  Limit (actual rows=1 loops=3)
         ->  Result (actual rows=1 loops=3)
               ->  Custom Scan (ChunkAppend) on metrics_compressed o (actual rows=1 loops=3)
                     Order: o."time" DESC
                     Chunks excluded during startup: 0
                     Chunks excluded during runtime: 2
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_1 (never executed)
                           Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                           ->  Sort (never executed)
                                 Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                 ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_2 (never executed)
                           Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                           ->  Sort (never executed)
                                 Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                 ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_3 (actual rows=1 loops=3)
                           Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                           Rows Removed by Filter: 5060
                           ->  Sort (actual rows=11 loops=3)
                                 Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                 Sort Method: quicksort 
                                 ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=53 loops=3)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 167
(29 rows)

-- test startup and runtime exclusion together
-- all chunks should be filtered
:PREFIX
SELECT g.time,
  l.time
FROM generate_series('2000-01-01'::timestamptz, '2000-01-03', '1d') AS g (time)
  LEFT OUTER JOIN LATERAL (
  SELECT *
  FROM :TEST_TABLE o
  WHERE o.time >= g.time
    AND o.time < g.time + '1d'::interval
    AND o.time > now()
  ORDER BY time DESC
  LIMIT 1) l ON TRUE;
QUERY PLAN
 Nested Loop Left Join (actual rows=3 loops=1)
   ->  Function Scan on generate_series g (actual rows=3 loops=1)
   ->  Limit (actual rows=0 loops=3)
         ->  Result (actual rows=0 loops=3)
               ->  Custom Scan (ChunkAppend) on metrics_compressed o (actual rows=0 loops=3)
                     Order: o."time" DESC
                     Chunks excluded during startup: 3
(7 rows)

-- test JOIN
-- no exclusion on joined table because quals are not propagated yet
-- With PG 14 on i368, this query uses a nested loop join. Disable the nested loop join to get the same query plan in all tests
SET enable_nestloop TO off;
:PREFIX
SELECT o1.time,
  o2.time
FROM :TEST_TABLE o1
  INNER JOIN :TEST_TABLE o2 ON o1.time = o2.time
WHERE o1.time < '2000-02-01'
  AND o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o1.time;
QUERY PLAN
 Merge Join (actual rows=21586 loops=1)
   Merge Cond: (o2."time" = o1."time")
   ->  Custom Scan (ChunkAppend) on metrics_compressed o2 (actual rows=21587 loops=1)
         Order: o2."time"
         ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_1 (actual rows=21586 loops=1)
               Vectorized Filter: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
               ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (actual rows=22 loops=1)
                     Index Cond: (device_id = 2)
                     Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
         ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_2 (actual rows=1 loops=1)
               Vectorized Filter: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
               ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (actual rows=1 loops=1)
                     Index Cond: (device_id = 2)
                     Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
         ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_3 (never executed)
               Vectorized Filter: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
               ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
                     Index Cond: (device_id = 2)
                     Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
   ->  Materialize (actual rows=21586 loops=1)
         ->  Custom Scan (ChunkAppend) on metrics_compressed o1 (actual rows=21586 loops=1)
               Order: o1."time"
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_1 (actual rows=21586 loops=1)
                     Vectorized Filter: (("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone) AND (v0 = 2))
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=22 loops=1)
                           Index Cond: (device_id = 1)
                           Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_2 (actual rows=0 loops=1)
                     Vectorized Filter: (("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone) AND (v0 = 2))
                     Rows Removed by Filter: 30226
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=31 loops=1)
                           Index Cond: (device_id = 1)
                           Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_3 (actual rows=0 loops=1)
                     Vectorized Filter: (("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone) AND (v0 = 2))
                     Rows Removed by Filter: 30226
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=31 loops=1)
                           Index Cond: (device_id = 1)
                           Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
(39 rows)

RESET enable_nestloop;
-- test JOIN
-- last chunk of o2 should not be executed
:PREFIX
SELECT o1.time,
  o2.time
FROM :TEST_TABLE o1
  INNER JOIN (
    SELECT *
    FROM :TEST_TABLE o2
    ORDER BY time) o2 ON o1.time = o2.time
WHERE o1.time < '2000-01-08'
ORDER BY o1.time
LIMIT 10;
QUERY PLAN
 Limit (actual rows=10 loops=1)
   ->  Merge Join (actual rows=10 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Custom Scan (ChunkAppend) on metrics_compressed o1 (actual rows=1 loops=1)
               Order: o1."time"
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_1 (actual rows=1 loops=1)
                     Filter: ("time" < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Sort (actual rows=11 loops=1)
                           Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                           Sort Method: quicksort 
                           ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=220 loops=1)
                                 Filter: (_ts_meta_min_1 < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_2 (never executed)
                     Filter: ("time" < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Sort (never executed)
                           Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                           ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
                                 Filter: (_ts_meta_min_1 < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         ->  Materialize (actual rows=10 loops=1)
               ->  Result (actual rows=10 loops=1)
                     ->  Custom Scan (ChunkAppend) on metrics_compressed o2 (actual rows=10 loops=1)
                           Order: o2."time"
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_1 (actual rows=10 loops=1)
                                 ->  Sort (actual rows=11 loops=1)
                                       Sort Key: compress_hyper_X_X_chunk_1._ts_meta_min_1
                                       Sort Method: quicksort 
                                       ->  Seq Scan on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (actual rows=220 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_2 (never executed)
                                 ->  Sort (never executed)
                                       Sort Key: compress_hyper_X_X_chunk_1._ts_meta_min_1
                                       ->  Seq Scan on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_3 (never executed)
                                 ->  Sort (never executed)
                                       Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                                       ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
(35 rows)

-- test join against max query
-- not ChunkAppend so no chunk exclusion
SET enable_hashjoin = FALSE;
SET enable_nestloop = FALSE;
SET enable_hashagg = FALSE;
:PREFIX
SELECT o1.time,
  o2.*
FROM :TEST_TABLE o1
  INNER JOIN (
    SELECT max(time) AS max_time
    FROM :TEST_TABLE) o2 ON o1.time = o2.max_time
WHERE o1.device_id = 1
ORDER BY time;
QUERY PLAN
 Merge Join (actual rows=1 loops=1)
   Merge Cond: (o1."time" = ($0))
   ->  Custom Scan (ChunkAppend) on metrics_compressed o1 (actual rows=82038 loops=1)
         Order: o1."time"
         ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_1 (actual rows=21586 loops=1)
               ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=22 loops=1)
                     Index Cond: (device_id = 1)
         ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_2 (actual rows=30226 loops=1)
               ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=31 loops=1)
                     Index Cond: (device_id = 1)
         ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_3 (actual rows=30226 loops=1)
               ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=31 loops=1)
                     Index Cond: (device_id = 1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: ($0)
         Sort Method: quicksort 
         ->  Result (actual rows=1 loops=1)
               InitPlan 1 (returns $0)
                 ->  Limit (actual rows=1 loops=1)
                       ->  Custom Scan (ChunkAppend) on metrics_compressed (actual rows=1 loops=1)
                             Order: metrics_compressed."time" DESC
                             ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (actual rows=1 loops=1)
                                   Filter: ("time" IS NOT NULL)
                                   ->  Sort (actual rows=11 loops=1)
                                         Sort Key: compress_hyper_X_X_chunk_1._ts_meta_max_1 DESC
                                         Sort Method: quicksort 
                                         ->  Seq Scan on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (actual rows=310 loops=1)
                             ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
                                   Filter: ("time" IS NOT NULL)
                                   ->  Sort (never executed)
                                         Sort Key: compress_hyper_X_X_chunk_1._ts_meta_max_1 DESC
                                         ->  Seq Scan on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
                             ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
                                   Filter: ("time" IS NOT NULL)
                                   ->  Sort (never executed)
                                         Sort Key: compress_hyper_X_X_chunk_1._ts_meta_max_1 DESC
                                         ->  Seq Scan on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
(37 rows)

RESET enable_hashjoin;
RESET enable_nestloop;
RESET enable_hashagg;
SET enable_seqscan TO false;
-- test JOIN on time column
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  INNER JOIN :TEST_TABLE o2 ON o1.time = o2.time
WHERE o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o2."time" = o1."time")
         ->  Custom Scan (ChunkAppend) on metrics_compressed o2 (actual rows=100 loops=1)
               Order: o2."time"
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (actual rows=1 loops=1)
                           Index Cond: (device_id = 2)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_2 (never executed)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
                           Index Cond: (device_id = 2)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_3 (never executed)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
                           Index Cond: (device_id = 2)
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_compressed o1 (actual rows=100 loops=1)
                     Order: o1."time"
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                           Vectorized Filter: (v0 = 2)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=1 loops=1)
                                 Index Cond: (device_id = 1)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_2 (never executed)
                           Vectorized Filter: (v0 = 2)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                 Index Cond: (device_id = 1)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_3 (never executed)
                           Vectorized Filter: (v0 = 2)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                 Index Cond: (device_id = 1)
(29 rows)

-- test JOIN on time column with USING
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  INNER JOIN :TEST_TABLE o2 USING (time)
WHERE o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o2."time" = o1."time")
         ->  Custom Scan (ChunkAppend) on metrics_compressed o2 (actual rows=100 loops=1)
               Order: o2."time"
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (actual rows=1 loops=1)
                           Index Cond: (device_id = 2)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_2 (never executed)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
                           Index Cond: (device_id = 2)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_3 (never executed)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
                           Index Cond: (device_id = 2)
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_compressed o1 (actual rows=100 loops=1)
                     Order: o1."time"
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                           Vectorized Filter: (v0 = 2)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=1 loops=1)
                                 Index Cond: (device_id = 1)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_2 (never executed)
                           Vectorized Filter: (v0 = 2)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                 Index Cond: (device_id = 1)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_3 (never executed)
                           Vectorized Filter: (v0 = 2)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                 Index Cond: (device_id = 1)
(29 rows)

-- test NATURAL JOIN on time column
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  NATURAL INNER JOIN :TEST_TABLE o2
WHERE o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=0 loops=1)
   ->  Sort (actual rows=0 loops=1)
         Sort Key: o1."time"
         Sort Method: quicksort 
         ->  Result (actual rows=0 loops=1)
               One-Time Filter: false
(6 rows)

-- test LEFT JOIN on time column
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  LEFT JOIN :TEST_TABLE o2 ON o1.time = o2.time
WHERE o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o2."time" = o1."time")
         ->  Custom Scan (ChunkAppend) on metrics_compressed o2 (actual rows=100 loops=1)
               Order: o2."time"
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (actual rows=1 loops=1)
                           Index Cond: (device_id = 2)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_2 (never executed)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
                           Index Cond: (device_id = 2)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_3 (never executed)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
                           Index Cond: (device_id = 2)
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_compressed o1 (actual rows=100 loops=1)
                     Order: o1."time"
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                           Vectorized Filter: (v0 = 2)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=1 loops=1)
                                 Index Cond: (device_id = 1)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_2 (never executed)
                           Vectorized Filter: (v0 = 2)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                 Index Cond: (device_id = 1)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_3 (never executed)
                           Vectorized Filter: (v0 = 2)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                 Index Cond: (device_id = 1)
(29 rows)

-- test RIGHT JOIN on time column
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  RIGHT JOIN :TEST_TABLE o2 ON o1.time = o2.time
WHERE o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o2.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o2."time" = o1."time")
         ->  Custom Scan (ChunkAppend) on metrics_compressed o2 (actual rows=100 loops=1)
               Order: o2."time"
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (actual rows=1 loops=1)
                           Index Cond: (device_id = 2)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_2 (never executed)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
                           Index Cond: (device_id = 2)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_3 (never executed)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
                           Index Cond: (device_id = 2)
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_compressed o1 (actual rows=100 loops=1)
                     Order: o1."time"
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                           Vectorized Filter: (v0 = 2)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=1 loops=1)
                                 Index Cond: (device_id = 1)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_2 (never executed)
                           Vectorized Filter: (v0 = 2)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                 Index Cond: (device_id = 1)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_3 (never executed)
                           Vectorized Filter: (v0 = 2)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                 Index Cond: (device_id = 1)
(29 rows)

-- test JOIN on time column with ON clause expression order switched
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  INNER JOIN :TEST_TABLE o2 ON o2.time = o1.time
WHERE o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o2."time" = o1."time")
         ->  Custom Scan (ChunkAppend) on metrics_compressed o2 (actual rows=100 loops=1)
               Order: o2."time"
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (actual rows=1 loops=1)
                           Index Cond: (device_id = 2)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_2 (never executed)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
                           Index Cond: (device_id = 2)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_3 (never executed)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
                           Index Cond: (device_id = 2)
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_compressed o1 (actual rows=100 loops=1)
                     Order: o1."time"
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                           Vectorized Filter: (v0 = 2)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=1 loops=1)
                                 Index Cond: (device_id = 1)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_2 (never executed)
                           Vectorized Filter: (v0 = 2)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                 Index Cond: (device_id = 1)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_3 (never executed)
                           Vectorized Filter: (v0 = 2)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                 Index Cond: (device_id = 1)
(29 rows)

-- test JOIN on time column with equality condition in WHERE clause
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  INNER JOIN :TEST_TABLE o2 ON TRUE
WHERE o1.time = o2.time
  AND o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o2."time" = o1."time")
         ->  Custom Scan (ChunkAppend) on metrics_compressed o2 (actual rows=100 loops=1)
               Order: o2."time"
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (actual rows=1 loops=1)
                           Index Cond: (device_id = 2)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_2 (never executed)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
                           Index Cond: (device_id = 2)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_3 (never executed)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
                           Index Cond: (device_id = 2)
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_compressed o1 (actual rows=100 loops=1)
                     Order: o1."time"
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                           Vectorized Filter: (v0 = 2)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=1 loops=1)
                                 Index Cond: (device_id = 1)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_2 (never executed)
                           Vectorized Filter: (v0 = 2)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                 Index Cond: (device_id = 1)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_3 (never executed)
                           Vectorized Filter: (v0 = 2)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                 Index Cond: (device_id = 1)
(29 rows)

-- test JOIN on time column with ORDER BY 2nd hypertable
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  INNER JOIN :TEST_TABLE o2 ON o1.time = o2.time
WHERE o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o2.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o2."time" = o1."time")
         ->  Custom Scan (ChunkAppend) on metrics_compressed o2 (actual rows=100 loops=1)
               Order: o2."time"
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (actual rows=1 loops=1)
                           Index Cond: (device_id = 2)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_2 (never executed)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
                           Index Cond: (device_id = 2)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_3 (never executed)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
                           Index Cond: (device_id = 2)
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_compressed o1 (actual rows=100 loops=1)
                     Order: o1."time"
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                           Vectorized Filter: (v0 = 2)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=1 loops=1)
                                 Index Cond: (device_id = 1)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_2 (never executed)
                           Vectorized Filter: (v0 = 2)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                 Index Cond: (device_id = 1)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_3 (never executed)
                           Vectorized Filter: (v0 = 2)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                 Index Cond: (device_id = 1)
(29 rows)

-- test JOIN on time column and device_id
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
INNER JOIN :TEST_TABLE o2 ON o1.device_id = o2.device_id
    AND o1.time = o2.time
WHERE o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         Join Filter: (o1.device_id = o2.device_id)
         Rows Removed by Join Filter: 895
         ->  Custom Scan (ChunkAppend) on metrics_compressed o1 (actual rows=100 loops=1)
               Order: o1."time"
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                     Filter: (v0 = 2)
                     Rows Removed by Filter: 6274
                     ->  Sort (actual rows=11 loops=1)
                           Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                           Sort Method: quicksort 
                           ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=220 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_2 (never executed)
                     Filter: (v0 = 2)
                     ->  Sort (never executed)
                           Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                           ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_3 (never executed)
                     Filter: (v0 = 2)
                     ->  Sort (never executed)
                           Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                           ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
         ->  Materialize (actual rows=995 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_compressed o2 (actual rows=995 loops=1)
                     Order: o2."time"
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_1 (actual rows=995 loops=1)
                           ->  Sort (actual rows=11 loops=1)
                                 Sort Key: compress_hyper_X_X_chunk_1._ts_meta_min_1
                                 Sort Method: quicksort 
                                 ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (actual rows=220 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_2 (never executed)
                           ->  Sort (never executed)
                                 Sort Key: compress_hyper_X_X_chunk_1._ts_meta_min_1
                                 ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_3 (never executed)
                           ->  Sort (never executed)
                                 Sort Key: compress_hyper_X_X_chunk_1._ts_meta_min_1
                                 ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
(40 rows)

-- test JOIN on device_id
-- should not use ordered append for 2nd hypertable
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
INNER JOIN :TEST_TABLE o2 ON o1.device_id = o2.device_id
WHERE o1.device_id = 1
  AND o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Nested Loop (actual rows=100 loops=1)
         ->  Custom Scan (ChunkAppend) on metrics_compressed o1 (actual rows=1 loops=1)
               Order: o1."time"
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_1 (actual rows=1 loops=1)
                     Vectorized Filter: (v0 = 2)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=1 loops=1)
                           Index Cond: (device_id = 1)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_2 (never executed)
                     Vectorized Filter: (v0 = 2)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                           Index Cond: (device_id = 1)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_3 (never executed)
                     Vectorized Filter: (v0 = 2)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                           Index Cond: (device_id = 1)
         ->  Materialize (actual rows=100 loops=1)
               ->  Append (actual rows=100 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                           ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (actual rows=1 loops=1)
                                 Index Cond: (device_id = 1)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_2 (never executed)
                           ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
                                 Index Cond: (device_id = 1)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_3 (never executed)
                           ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
                                 Index Cond: (device_id = 1)
(27 rows)

-- test JOIN on time column with implicit join
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1,
  :TEST_TABLE o2
WHERE o1.v0 = 2
  AND o1.time = o2.time
  AND o1.device_id = 1
  AND o2.device_id = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o2."time" = o1."time")
         ->  Custom Scan (ChunkAppend) on metrics_compressed o2 (actual rows=100 loops=1)
               Order: o2."time"
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (actual rows=1 loops=1)
                           Index Cond: (device_id = 2)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_2 (never executed)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
                           Index Cond: (device_id = 2)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_3 (never executed)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
                           Index Cond: (device_id = 2)
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_compressed o1 (actual rows=100 loops=1)
                     Order: o1."time"
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                           Vectorized Filter: (v0 = 2)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=1 loops=1)
                                 Index Cond: (device_id = 1)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_2 (never executed)
                           Vectorized Filter: (v0 = 2)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                 Index Cond: (device_id = 1)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_3 (never executed)
                           Vectorized Filter: (v0 = 2)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                 Index Cond: (device_id = 1)
(29 rows)

-- test JOIN on time column with 3 hypertables
-- should use 3 ChunkAppend
SET join_collapse_limit TO 1;
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  INNER JOIN :TEST_TABLE o2 ON o1.time = o2.time
  INNER JOIN :TEST_TABLE o3 ON o1.time = o3.time
WHERE o1.device_id = 1
  AND o2.device_id = 2
  AND o3.device_id = 3
  AND o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o3."time" = o1."time")
         ->  Custom Scan (ChunkAppend) on metrics_compressed o3 (actual rows=100 loops=1)
               Order: o3."time"
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o3_1 (actual rows=100 loops=1)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_2 (actual rows=1 loops=1)
                           Index Cond: (device_id = 3)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o3_2 (never executed)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_2 (never executed)
                           Index Cond: (device_id = 3)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o3_3 (never executed)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_2 (never executed)
                           Index Cond: (device_id = 3)
         ->  Materialize (actual rows=100 loops=1)
               ->  Merge Join (actual rows=100 loops=1)
                     Merge Cond: (o2."time" = o1."time")
                     ->  Custom Scan (ChunkAppend) on metrics_compressed o2 (actual rows=100 loops=1)
                           Order: o2."time"
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                                 ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (actual rows=1 loops=1)
                                       Index Cond: (device_id = 2)
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_2 (never executed)
                                 ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
                                       Index Cond: (device_id = 2)
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_3 (never executed)
                                 ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
                                       Index Cond: (device_id = 2)
                     ->  Materialize (actual rows=100 loops=1)
                           ->  Custom Scan (ChunkAppend) on metrics_compressed o1 (actual rows=100 loops=1)
                                 Order: o1."time"
                                 ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                                       Vectorized Filter: (v0 = 2)
                                       ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=1 loops=1)
                                             Index Cond: (device_id = 1)
                                 ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_2 (never executed)
                                       Vectorized Filter: (v0 = 2)
                                       ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                             Index Cond: (device_id = 1)
                                 ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_3 (never executed)
                                       Vectorized Filter: (v0 = 2)
                                       ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                             Index Cond: (device_id = 1)
(43 rows)

RESET join_collapse_limit;
RESET enable_seqscan;
\set TEST_TABLE 'metrics_space_compressed'
\ir :TEST_QUERY_NAME
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
-- test LATERAL with ordered append in the outer query
:PREFIX
SELECT time,
  pg_typeof(l)
FROM :TEST_TABLE,
  LATERAL (
    SELECT *
    FROM (
      VALUES (1),
        (2)) v) l
ORDER BY time DESC
LIMIT 2;
QUERY PLAN
 Limit (actual rows=2 loops=1)
   ->  Nested Loop (actual rows=2 loops=1)
         ->  Custom Scan (ChunkAppend) on metrics_space_compressed (actual rows=1 loops=1)
               Order: metrics_space_compressed."time" DESC
               ->  Merge Append (actual rows=1 loops=1)
                     Sort Key: _hyper_X_X_chunk."time" DESC
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (actual rows=1 loops=1)
                           ->  Sort (actual rows=3 loops=1)
                                 Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                 Sort Method: quicksort 
                                 ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=62 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (actual rows=1 loops=1)
                           ->  Sort (actual rows=5 loops=1)
                                 Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                 Sort Method: quicksort 
                                 ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=124 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (actual rows=1 loops=1)
                           ->  Sort (actual rows=5 loops=1)
                                 Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                 Sort Method: quicksort 
                                 ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=124 loops=1)
               ->  Merge Append (never executed)
                     Sort Key: _hyper_X_X_chunk."time" DESC
                     ->  Sort (never executed)
                           Sort Key: _hyper_X_X_chunk."time" DESC
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
                                 ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
                     ->  Sort (never executed)
                           Sort Key: _hyper_X_X_chunk."time" DESC
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
                                 ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
                     ->  Sort (never executed)
                           Sort Key: _hyper_X_X_chunk."time" DESC
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
                                 ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
               ->  Merge Append (never executed)
                     Sort Key: _hyper_X_X_chunk."time" DESC
                     ->  Sort (never executed)
                           Sort Key: _hyper_X_X_chunk."time" DESC
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
                                 ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
                     ->  Sort (never executed)
                           Sort Key: _hyper_X_X_chunk."time" DESC
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
                                 ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
                     ->  Sort (never executed)
                           Sort Key: _hyper_X_X_chunk."time" DESC
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
                                 ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
         ->  Materialize (actual rows=2 loops=1)
               ->  Values Scan on "*VALUES*" (actual rows=2 loops=1)
(51 rows)

-- test LATERAL with ordered append in the lateral query
:PREFIX
SELECT time,
  pg_typeof(v)
FROM (
  VALUES (1),
    (2)) v,
  LATERAL (
    SELECT *
    FROM :TEST_TABLE
    ORDER BY time DESC
    LIMIT 2) l;
QUERY PLAN
 Nested Loop (actual rows=4 loops=1)
   ->  Values Scan on "*VALUES*" (actual rows=2 loops=1)
   ->  Materialize (actual rows=2 loops=2)
         ->  Subquery Scan on l (actual rows=2 loops=1)
               ->  Limit (actual rows=2 loops=1)
                     ->  Result (actual rows=2 loops=1)
                           ->  Custom Scan (ChunkAppend) on metrics_space_compressed (actual rows=2 loops=1)
                                 Order: metrics_space_compressed."time" DESC
                                 ->  Merge Append (actual rows=2 loops=1)
                                       Sort Key: _hyper_X_X_chunk."time" DESC
                                       ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (actual rows=2 loops=1)
                                             ->  Sort (actual rows=3 loops=1)
                                                   Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                                   Sort Method: quicksort 
                                                   ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=62 loops=1)
                                       ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (actual rows=1 loops=1)
                                             ->  Sort (actual rows=5 loops=1)
                                                   Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                                   Sort Method: quicksort 
                                                   ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=124 loops=1)
                                       ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (actual rows=1 loops=1)
                                             ->  Sort (actual rows=5 loops=1)
                                                   Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                                   Sort Method: quicksort 
                                                   ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=124 loops=1)
                                 ->  Merge Append (never executed)
                                       Sort Key: _hyper_X_X_chunk."time" DESC
                                       ->  Sort (never executed)
                                             Sort Key: _hyper_X_X_chunk."time" DESC
                                             ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
                                                   ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
                                       ->  Sort (never executed)
                                             Sort Key: _hyper_X_X_chunk."time" DESC
                                             ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
                                                   ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
                                       ->  Sort (never executed)
                                             Sort Key: _hyper_X_X_chunk."time" DESC
                                             ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
                                                   ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
                                 ->  Merge Append (never executed)
                                       Sort Key: _hyper_X_X_chunk."time" DESC
                                       ->  Sort (never executed)
                                             Sort Key: _hyper_X_X_chunk."time" DESC
                                             ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
                                                   ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
                                       ->  Sort (never executed)
                                             Sort Key: _hyper_X_X_chunk."time" DESC
                                             ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
                                                   ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
                                       ->  Sort (never executed)
                                             Sort Key: _hyper_X_X_chunk."time" DESC
                                             ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
                                                   ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
(53 rows)

-- test plan with best index is chosen
-- this should use device_id, time index
:PREFIX
SELECT time,
  device_id
FROM :TEST_TABLE
WHERE device_id = 1
ORDER BY time DESC
LIMIT 1;
QUERY PLAN
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space_compressed (actual rows=1 loops=1)
         Order: metrics_space_compressed."time" DESC
         ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (actual rows=1 loops=1)
               ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=1 loops=1)
                     Index Cond: (device_id = 1)
         ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
               ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                     Index Cond: (device_id = 1)
         ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
               ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                     Index Cond: (device_id = 1)
(12 rows)

-- test plan with best index is chosen
-- this should use time index
:PREFIX
SELECT time
FROM :TEST_TABLE
ORDER BY time DESC
LIMIT 1;
QUERY PLAN
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space_compressed (actual rows=1 loops=1)
         Order: metrics_space_compressed."time" DESC
         ->  Merge Append (actual rows=1 loops=1)
               Sort Key: _hyper_X_X_chunk."time" DESC
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (actual rows=1 loops=1)
                     ->  Sort (actual rows=3 loops=1)
                           Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                           Sort Method: quicksort 
                           ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=62 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (actual rows=1 loops=1)
                     ->  Sort (actual rows=5 loops=1)
                           Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                           Sort Method: quicksort 
                           ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=124 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (actual rows=1 loops=1)
                     ->  Sort (actual rows=5 loops=1)
                           Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                           Sort Method: quicksort 
                           ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=124 loops=1)
         ->  Merge Append (never executed)
               Sort Key: _hyper_X_X_chunk."time" DESC
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
                     ->  Sort (never executed)
                           Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                           ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
                     ->  Sort (never executed)
                           Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                           ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
                     ->  Sort (never executed)
                           Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                           ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
         ->  Merge Append (never executed)
               Sort Key: _hyper_X_X_chunk."time" DESC
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
                     ->  Sort (never executed)
                           Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                           ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
                     ->  Sort (never executed)
                           Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                           ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
                     ->  Sort (never executed)
                           Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                           ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
(48 rows)

-- test LATERAL with correlated query
-- only last chunk should be executed
:PREFIX
SELECT g.time,
  l.time
FROM generate_series('2000-01-01'::timestamptz, '2000-01-03', '1d') AS g (time)
  LEFT OUTER JOIN LATERAL (
  SELECT *
  FROM :TEST_TABLE o
  WHERE o.time >= g.time
    AND o.time < g.time + '1d'::interval
  ORDER BY time DESC
  LIMIT 1) l ON TRUE;
QUERY PLAN
 Nested Loop Left Join (actual rows=3 loops=1)
   ->  Function Scan on generate_series g (actual rows=3 loops=1)
   ->  Limit (actual rows=1 loops=3)
         ->  Result (actual rows=1 loops=3)
               ->  Custom Scan (ChunkAppend) on metrics_space_compressed o (actual rows=1 loops=3)
                     Order: o."time" DESC
                     ->  Merge Append (actual rows=0 loops=3)
                           Sort Key: o_1."time" DESC
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_1 (actual rows=0 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 ->  Sort (actual rows=0 loops=3)
                                       Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                       Sort Method: quicksort 
                                       ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=0 loops=3)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                             Rows Removed by Filter: 62
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_2 (actual rows=0 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 ->  Sort (actual rows=0 loops=3)
                                       Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                       Sort Method: quicksort 
                                       ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=0 loops=3)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                             Rows Removed by Filter: 124
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_3 (actual rows=0 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 ->  Sort (actual rows=0 loops=3)
                                       Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                       Sort Method: quicksort 
                                       ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=0 loops=3)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                             Rows Removed by Filter: 124
                     ->  Merge Append (actual rows=0 loops=3)
                           Sort Key: o_4."time" DESC
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_4 (actual rows=0 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 ->  Sort (actual rows=0 loops=3)
                                       Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                       Sort Method: quicksort 
                                       ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=0 loops=3)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                             Rows Removed by Filter: 62
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_5 (actual rows=0 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 ->  Sort (actual rows=0 loops=3)
                                       Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                       Sort Method: quicksort 
                                       ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=0 loops=3)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                             Rows Removed by Filter: 124
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_6 (actual rows=0 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 ->  Sort (actual rows=0 loops=3)
                                       Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                       Sort Method: quicksort 
                                       ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=0 loops=3)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                             Rows Removed by Filter: 124
                     ->  Merge Append (actual rows=1 loops=3)
                           Sort Key: o_7."time" DESC
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_7 (actual rows=1 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 Rows Removed by Filter: 1012
                                 ->  Sort (actual rows=3 loops=3)
                                       Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                       Sort Method: quicksort 
                                       ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=11 loops=3)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                             Rows Removed by Filter: 33
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_8 (actual rows=1 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 Rows Removed by Filter: 2024
                                 ->  Sort (actual rows=5 loops=3)
                                       Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                       Sort Method: quicksort 
                                       ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=21 loops=3)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                             Rows Removed by Filter: 67
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_9 (actual rows=1 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 Rows Removed by Filter: 2024
                                 ->  Sort (actual rows=5 loops=3)
                                       Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                       Sort Method: quicksort 
                                       ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=21 loops=3)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                             Rows Removed by Filter: 67
(87 rows)

-- test LATERAL with correlated query
-- only 2nd chunk should be executed
:PREFIX
SELECT g.time,
  l.time
FROM generate_series('2000-01-10'::timestamptz, '2000-01-11', '1d') AS g (time)
  LEFT OUTER JOIN LATERAL (
  SELECT *
  FROM :TEST_TABLE o
  WHERE o.time >= g.time
    AND o.time < g.time + '1d'::interval
  ORDER BY time
  LIMIT 1) l ON TRUE;
QUERY PLAN
 Nested Loop Left Join (actual rows=2 loops=1)
   ->  Function Scan on generate_series g (actual rows=2 loops=1)
   ->  Limit (actual rows=1 loops=2)
         ->  Result (actual rows=1 loops=2)
               ->  Custom Scan (ChunkAppend) on metrics_space_compressed o (actual rows=1 loops=2)
                     Order: o."time"
                     ->  Merge Append (actual rows=0 loops=2)
                           Sort Key: o_1."time"
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_1 (actual rows=0 loops=2)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 ->  Sort (actual rows=0 loops=2)
                                       Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                                       Sort Method: quicksort 
                                       ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=0 loops=2)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                             Rows Removed by Filter: 88
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_2 (actual rows=0 loops=2)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 ->  Sort (actual rows=0 loops=2)
                                       Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                                       Sort Method: quicksort 
                                       ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=0 loops=2)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                             Rows Removed by Filter: 88
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_3 (actual rows=0 loops=2)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 ->  Sort (actual rows=0 loops=2)
                                       Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                                       Sort Method: quicksort 
                                       ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=0 loops=2)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                             Rows Removed by Filter: 44
                     ->  Merge Append (actual rows=1 loops=2)
                           Sort Key: o_4."time"
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_4 (actual rows=1 loops=2)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 Rows Removed by Filter: 2616
                                 ->  Sort (actual rows=5 loops=2)
                                       Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                                       Sort Method: quicksort 
                                       ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=22 loops=2)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                             Rows Removed by Filter: 102
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_5 (actual rows=1 loops=2)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 Rows Removed by Filter: 2616
                                 ->  Sort (actual rows=5 loops=2)
                                       Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                                       Sort Method: quicksort 
                                       ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=22 loops=2)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                             Rows Removed by Filter: 102
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_6 (actual rows=1 loops=2)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 Rows Removed by Filter: 1308
                                 ->  Sort (actual rows=3 loops=2)
                                       Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                                       Sort Method: quicksort 
                                       ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=11 loops=2)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                             Rows Removed by Filter: 51
                     ->  Merge Append (never executed)
                           Sort Key: o_7."time"
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_7 (never executed)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 ->  Sort (never executed)
                                       Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                                       ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_8 (never executed)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 ->  Sort (never executed)
                                       Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                                       ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_9 (never executed)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 ->  Sort (never executed)
                                       Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                                       ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
(81 rows)

-- test startup and runtime exclusion together
:PREFIX
SELECT g.time,
  l.time
FROM generate_series('2000-01-01'::timestamptz, '2000-01-03', '1d') AS g (time)
  LEFT OUTER JOIN LATERAL (
  SELECT *
  FROM :TEST_TABLE o
  WHERE o.time >= g.time
    AND o.time < g.time + '1d'::interval
    AND o.time < now()
  ORDER BY time DESC
  LIMIT 1) l ON TRUE;
QUERY PLAN
 Nested Loop Left Join (actual rows=3 loops=1)
   ->  Function Scan on generate_series g (actual rows=3 loops=1)
   ->  Limit (actual rows=1 loops=3)
         ->  Result (actual rows=1 loops=3)
               ->  Custom Scan (ChunkAppend) on metrics_space_compressed o (actual rows=1 loops=3)
                     Order: o."time" DESC
                     ->  Merge Append (actual rows=0 loops=3)
                           Sort Key: o_1."time" DESC
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_1 (actual rows=0 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                                 ->  Sort (actual rows=0 loops=3)
                                       Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                       Sort Method: quicksort 
                                       ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=0 loops=3)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                             Rows Removed by Filter: 62
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_2 (actual rows=0 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                                 ->  Sort (actual rows=0 loops=3)
                                       Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                       Sort Method: quicksort 
                                       ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=0 loops=3)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                             Rows Removed by Filter: 124
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_3 (actual rows=0 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                                 ->  Sort (actual rows=0 loops=3)
                                       Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                       Sort Method: quicksort 
                                       ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=0 loops=3)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                             Rows Removed by Filter: 124
                     ->  Merge Append (actual rows=0 loops=3)
                           Sort Key: o_4."time" DESC
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_4 (actual rows=0 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                                 ->  Sort (actual rows=0 loops=3)
                                       Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                       Sort Method: quicksort 
                                       ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=0 loops=3)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                             Rows Removed by Filter: 62
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_5 (actual rows=0 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                                 ->  Sort (actual rows=0 loops=3)
                                       Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                       Sort Method: quicksort 
                                       ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=0 loops=3)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                             Rows Removed by Filter: 124
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_6 (actual rows=0 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                                 ->  Sort (actual rows=0 loops=3)
                                       Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                       Sort Method: quicksort 
                                       ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=0 loops=3)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                             Rows Removed by Filter: 124
                     ->  Merge Append (actual rows=1 loops=3)
                           Sort Key: o_7."time" DESC
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_7 (actual rows=1 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                                 Rows Removed by Filter: 1012
                                 ->  Sort (actual rows=3 loops=3)
                                       Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                       Sort Method: quicksort 
                                       ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=11 loops=3)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                             Rows Removed by Filter: 33
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_8 (actual rows=1 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                                 Rows Removed by Filter: 2024
                                 ->  Sort (actual rows=5 loops=3)
                                       Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                       Sort Method: quicksort 
                                       ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=21 loops=3)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                             Rows Removed by Filter: 67
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_9 (actual rows=1 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                                 Rows Removed by Filter: 2024
                                 ->  Sort (actual rows=5 loops=3)
                                       Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                       Sort Method: quicksort 
                                       ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=21 loops=3)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                             Rows Removed by Filter: 67
(87 rows)

-- test startup and runtime exclusion together
-- all chunks should be filtered
:PREFIX
SELECT g.time,
  l.time
FROM generate_series('2000-01-01'::timestamptz, '2000-01-03', '1d') AS g (time)
  LEFT OUTER JOIN LATERAL (
  SELECT *
  FROM :TEST_TABLE o
  WHERE o.time >= g.time
    AND o.time < g.time + '1d'::interval
    AND o.time > now()
  ORDER BY time DESC
  LIMIT 1) l ON TRUE;
QUERY PLAN
 Nested Loop Left Join (actual rows=3 loops=1)
   ->  Function Scan on generate_series g (actual rows=3 loops=1)
   ->  Limit (actual rows=0 loops=3)
         ->  Result (actual rows=0 loops=3)
               ->  Custom Scan (ChunkAppend) on metrics_space_compressed o (actual rows=0 loops=3)
                     Order: o."time" DESC
                     ->  Merge Append (actual rows=0 loops=3)
                           Sort Key: o_1."time" DESC
                           ->  Sort (actual rows=0 loops=3)
                                 Sort Key: o_1."time" DESC
                                 Sort Method: quicksort 
                                 ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_1 (actual rows=0 loops=3)
                                       Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                       Vectorized Filter: ("time" > now())
                                       ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=0 loops=3)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                             Rows Removed by Filter: 62
                           ->  Sort (actual rows=0 loops=3)
                                 Sort Key: o_2."time" DESC
                                 Sort Method: quicksort 
                                 ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_2 (actual rows=0 loops=3)
                                       Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                       Vectorized Filter: ("time" > now())
                                       ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=0 loops=3)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                             Rows Removed by Filter: 124
                           ->  Sort (actual rows=0 loops=3)
                                 Sort Key: o_3."time" DESC
                                 Sort Method: quicksort 
                                 ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_3 (actual rows=0 loops=3)
                                       Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                       Vectorized Filter: ("time" > now())
                                       ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=0 loops=3)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                             Rows Removed by Filter: 124
                     ->  Merge Append (actual rows=0 loops=3)
                           Sort Key: o_4."time" DESC
                           ->  Sort (actual rows=0 loops=3)
                                 Sort Key: o_4."time" DESC
                                 Sort Method: quicksort 
                                 ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_4 (actual rows=0 loops=3)
                                       Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                       Vectorized Filter: ("time" > now())
                                       ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=0 loops=3)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                             Rows Removed by Filter: 62
                           ->  Sort (actual rows=0 loops=3)
                                 Sort Key: o_5."time" DESC
                                 Sort Method: quicksort 
                                 ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_5 (actual rows=0 loops=3)
                                       Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                       Vectorized Filter: ("time" > now())
                                       ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=0 loops=3)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                             Rows Removed by Filter: 124
                           ->  Sort (actual rows=0 loops=3)
                                 Sort Key: o_6."time" DESC
                                 Sort Method: quicksort 
                                 ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_6 (actual rows=0 loops=3)
                                       Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                       Vectorized Filter: ("time" > now())
                                       ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=0 loops=3)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                             Rows Removed by Filter: 124
                     ->  Merge Append (actual rows=0 loops=3)
                           Sort Key: o_7."time" DESC
                           ->  Sort (actual rows=0 loops=3)
                                 Sort Key: o_7."time" DESC
                                 Sort Method: quicksort 
                                 ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_7 (actual rows=0 loops=3)
                                       Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 10667
                                       Vectorized Filter: ("time" > now())
                                       ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=11 loops=3)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                             Rows Removed by Filter: 33
                           ->  Sort (actual rows=0 loops=3)
                                 Sort Key: o_8."time" DESC
                                 Sort Method: quicksort 
                                 ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_8 (actual rows=0 loops=3)
                                       Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 21333
                                       Vectorized Filter: ("time" > now())
                                       ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=21 loops=3)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                             Rows Removed by Filter: 67
                           ->  Sort (actual rows=0 loops=3)
                                 Sort Key: o_9."time" DESC
                                 Sort Method: quicksort 
                                 ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o_9 (actual rows=0 loops=3)
                                       Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 21333
                                       Vectorized Filter: ("time" > now())
                                       ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=21 loops=3)
                                             Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                             Rows Removed by Filter: 67
(96 rows)

-- test JOIN
-- no exclusion on joined table because quals are not propagated yet
-- With PG 14 on i368, this query uses a nested loop join. Disable the nested loop join to get the same query plan in all tests
SET enable_nestloop TO off;
:PREFIX
SELECT o1.time,
  o2.time
FROM :TEST_TABLE o1
  INNER JOIN :TEST_TABLE o2 ON o1.time = o2.time
WHERE o1.time < '2000-02-01'
  AND o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o1.time;
QUERY PLAN
 Merge Join (actual rows=82038 loops=1)
   Merge Cond: (o1."time" = o2."time")
   ->  Custom Scan (ChunkAppend) on metrics_space_compressed o1 (actual rows=82038 loops=1)
         Order: o1."time"
         ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_1 (actual rows=21586 loops=1)
               Vectorized Filter: (("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone) AND (v0 = 2))
               ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=22 loops=1)
                     Index Cond: (device_id = 1)
                     Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
         ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_2 (actual rows=30226 loops=1)
               Vectorized Filter: (("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone) AND (v0 = 2))
               ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=31 loops=1)
                     Index Cond: (device_id = 1)
                     Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
         ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_3 (actual rows=30226 loops=1)
               Vectorized Filter: (("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone) AND (v0 = 2))
               ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=31 loops=1)
                     Index Cond: (device_id = 1)
                     Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
   ->  Materialize (actual rows=82038 loops=1)
         ->  Custom Scan (ChunkAppend) on metrics_space_compressed o2 (actual rows=82038 loops=1)
               Order: o2."time"
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_1 (actual rows=21586 loops=1)
                     Vectorized Filter: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=22 loops=1)
                           Index Cond: (device_id = 2)
                           Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_2 (actual rows=30226 loops=1)
                     Vectorized Filter: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=31 loops=1)
                           Index Cond: (device_id = 2)
                           Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_3 (actual rows=30226 loops=1)
                     Vectorized Filter: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=31 loops=1)
                           Index Cond: (device_id = 2)
                           Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
(37 rows)

RESET enable_nestloop;
-- test JOIN
-- last chunk of o2 should not be executed
:PREFIX
SELECT o1.time,
  o2.time
FROM :TEST_TABLE o1
  INNER JOIN (
    SELECT *
    FROM :TEST_TABLE o2
    ORDER BY time) o2 ON o1.time = o2.time
WHERE o1.time < '2000-01-08'
ORDER BY o1.time
LIMIT 10;
QUERY PLAN
 Limit (actual rows=10 loops=1)
   ->  Merge Join (actual rows=10 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Custom Scan (ChunkAppend) on metrics_space_compressed o1 (actual rows=1 loops=1)
               Order: o1."time"
               ->  Merge Append (actual rows=1 loops=1)
                     Sort Key: o1_1."time"
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_1 (actual rows=1 loops=1)
                           Filter: ("time" < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                           ->  Sort (actual rows=5 loops=1)
                                 Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                                 Sort Method: quicksort 
                                 ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=88 loops=1)
                                       Filter: (_ts_meta_min_1 < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_2 (actual rows=1 loops=1)
                           Filter: ("time" < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                           ->  Sort (actual rows=5 loops=1)
                                 Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                                 Sort Method: quicksort 
                                 ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=88 loops=1)
                                       Filter: (_ts_meta_min_1 < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_3 (actual rows=1 loops=1)
                           Filter: ("time" < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                           ->  Sort (actual rows=3 loops=1)
                                 Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                                 Sort Method: quicksort 
                                 ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=44 loops=1)
                                       Filter: (_ts_meta_min_1 < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
               ->  Merge Append (never executed)
                     Sort Key: o1_4."time"
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_4 (never executed)
                           Filter: ("time" < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                           ->  Sort (never executed)
                                 Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                                 ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
                                       Filter: (_ts_meta_min_1 < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_5 (never executed)
                           Filter: ("time" < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                           ->  Sort (never executed)
                                 Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                                 ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
                                       Filter: (_ts_meta_min_1 < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_6 (never executed)
                           Filter: ("time" < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                           ->  Sort (never executed)
                                 Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                                 ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
                                       Filter: (_ts_meta_min_1 < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
         ->  Materialize (actual rows=10 loops=1)
               ->  Result (actual rows=10 loops=1)
                     ->  Custom Scan (ChunkAppend) on metrics_space_compressed o2 (actual rows=10 loops=1)
                           Order: o2."time"
                           ->  Merge Append (actual rows=10 loops=1)
                                 Sort Key: o2_1."time"
                                 ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_1 (actual rows=5 loops=1)
                                       ->  Sort (actual rows=5 loops=1)
                                             Sort Key: compress_hyper_X_X_chunk_1._ts_meta_min_1
                                             Sort Method: quicksort 
                                             ->  Seq Scan on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (actual rows=88 loops=1)
                                 ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_2 (actual rows=5 loops=1)
                                       ->  Sort (actual rows=5 loops=1)
                                             Sort Key: compress_hyper_X_X_chunk_1._ts_meta_min_1
                                             Sort Method: quicksort 
                                             ->  Seq Scan on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (actual rows=88 loops=1)
                                 ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_3 (actual rows=2 loops=1)
                                       ->  Sort (actual rows=3 loops=1)
                                             Sort Key: compress_hyper_X_X_chunk_1._ts_meta_min_1
                                             Sort Method: quicksort 
                                             ->  Seq Scan on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (actual rows=44 loops=1)
                           ->  Merge Append (never executed)
                                 Sort Key: o2_4."time"
                                 ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_4 (never executed)
                                       ->  Sort (never executed)
                                             Sort Key: compress_hyper_X_X_chunk_1._ts_meta_min_1
                                             ->  Seq Scan on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
                                 ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_5 (never executed)
                                       ->  Sort (never executed)
                                             Sort Key: compress_hyper_X_X_chunk_1._ts_meta_min_1
                                             ->  Seq Scan on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
                                 ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_6 (never executed)
                                       ->  Sort (never executed)
                                             Sort Key: compress_hyper_X_X_chunk_1._ts_meta_min_1
                                             ->  Seq Scan on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
                           ->  Merge Append (never executed)
                                 Sort Key: o2_7."time"
                                 ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_7 (never executed)
                                       ->  Sort (never executed)
                                             Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                                             ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
                                 ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_8 (never executed)
                                       ->  Sort (never executed)
                                             Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                                             ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
                                 ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_9 (never executed)
                                       ->  Sort (never executed)
                                             Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                                             ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
(97 rows)

-- test join against max query
-- not ChunkAppend so no chunk exclusion
SET enable_hashjoin = FALSE;
SET enable_nestloop = FALSE;
SET enable_hashagg = FALSE;
:PREFIX
SELECT o1.time,
  o2.*
FROM :TEST_TABLE o1
  INNER JOIN (
    SELECT max(time) AS max_time
    FROM :TEST_TABLE) o2 ON o1.time = o2.max_time
WHERE o1.device_id = 1
ORDER BY time;
QUERY PLAN
 Merge Join (actual rows=1 loops=1)
   Merge Cond: (o1."time" = ($0))
   ->  Custom Scan (ChunkAppend) on metrics_space_compressed o1 (actual rows=82038 loops=1)
         Order: o1."time"
         ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_1 (actual rows=21586 loops=1)
               ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=22 loops=1)
                     Index Cond: (device_id = 1)
         ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_2 (actual rows=30226 loops=1)
               ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=31 loops=1)
                     Index Cond: (device_id = 1)
         ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_3 (actual rows=30226 loops=1)
               ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=31 loops=1)
                     Index Cond: (device_id = 1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: ($0)
         Sort Method: quicksort 
         ->  Result (actual rows=1 loops=1)
               InitPlan 1 (returns $0)
                 ->  Limit (actual rows=1 loops=1)
                       ->  Custom Scan (ChunkAppend) on metrics_space_compressed (actual rows=1 loops=1)
                             Order: metrics_space_compressed."time" DESC
                             ->  Merge Append (actual rows=1 loops=1)
                                   Sort Key: _hyper_X_X_chunk."time" DESC
                                   ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (actual rows=1 loops=1)
                                         Filter: ("time" IS NOT NULL)
                                         ->  Sort (actual rows=3 loops=1)
                                               Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                               Sort Method: quicksort 
                                               ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=62 loops=1)
                                   ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (actual rows=1 loops=1)
                                         Filter: ("time" IS NOT NULL)
                                         ->  Sort (actual rows=5 loops=1)
                                               Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                               Sort Method: quicksort 
                                               ->  Seq Scan on compress_hyper_X_X_chunk (actual rows=124 loops=1)
                                   ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (actual rows=1 loops=1)
                                         Filter: ("time" IS NOT NULL)
                                         ->  Sort (actual rows=5 loops=1)
                                               Sort Key: compress_hyper_X_X_chunk_1._ts_meta_max_1 DESC
                                               Sort Method: quicksort 
                                               ->  Seq Scan on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (actual rows=124 loops=1)
                             ->  Merge Append (never executed)
                                   Sort Key: _hyper_X_X_chunk."time" DESC
                                   ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
                                         Filter: ("time" IS NOT NULL)
                                         ->  Sort (never executed)
                                               Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                               ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
                                   ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
                                         Filter: ("time" IS NOT NULL)
                                         ->  Sort (never executed)
                                               Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                               ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
                                   ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
                                         Filter: ("time" IS NOT NULL)
                                         ->  Sort (never executed)
                                               Sort Key: compress_hyper_X_X_chunk_1._ts_meta_max_1 DESC
                                               ->  Seq Scan on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
                             ->  Merge Append (never executed)
                                   Sort Key: _hyper_X_X_chunk."time" DESC
                                   ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
                                         Filter: ("time" IS NOT NULL)
                                         ->  Sort (never executed)
                                               Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                               ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
                                   ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
                                         Filter: ("time" IS NOT NULL)
                                         ->  Sort (never executed)
                                               Sort Key: compress_hyper_X_X_chunk._ts_meta_max_1 DESC
                                               ->  Seq Scan on compress_hyper_X_X_chunk (never executed)
                                   ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk (never executed)
                                         Filter: ("time" IS NOT NULL)
                                         ->  Sort (never executed)
                                               Sort Key: compress_hyper_X_X_chunk_1._ts_meta_max_1 DESC
                                               ->  Seq Scan on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
(75 rows)

RESET enable_hashjoin;
RESET enable_nestloop;
RESET enable_hashagg;
SET enable_seqscan TO false;
-- test JOIN on time column
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  INNER JOIN :TEST_TABLE o2 ON o1.time = o2.time
WHERE o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Custom Scan (ChunkAppend) on metrics_space_compressed o1 (actual rows=100 loops=1)
               Order: o1."time"
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                     Vectorized Filter: (v0 = 2)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=1 loops=1)
                           Index Cond: (device_id = 1)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_2 (never executed)
                     Vectorized Filter: (v0 = 2)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                           Index Cond: (device_id = 1)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_3 (never executed)
                     Vectorized Filter: (v0 = 2)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                           Index Cond: (device_id = 1)
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_space_compressed o2 (actual rows=100 loops=1)
                     Order: o2."time"
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=1 loops=1)
                                 Index Cond: (device_id = 2)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_2 (never executed)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                 Index Cond: (device_id = 2)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_3 (never executed)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                 Index Cond: (device_id = 2)
(29 rows)

-- test JOIN on time column with USING
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  INNER JOIN :TEST_TABLE o2 USING (time)
WHERE o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Custom Scan (ChunkAppend) on metrics_space_compressed o1 (actual rows=100 loops=1)
               Order: o1."time"
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                     Vectorized Filter: (v0 = 2)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=1 loops=1)
                           Index Cond: (device_id = 1)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_2 (never executed)
                     Vectorized Filter: (v0 = 2)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                           Index Cond: (device_id = 1)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_3 (never executed)
                     Vectorized Filter: (v0 = 2)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                           Index Cond: (device_id = 1)
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_space_compressed o2 (actual rows=100 loops=1)
                     Order: o2."time"
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=1 loops=1)
                                 Index Cond: (device_id = 2)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_2 (never executed)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                 Index Cond: (device_id = 2)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_3 (never executed)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                 Index Cond: (device_id = 2)
(29 rows)

-- test NATURAL JOIN on time column
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  NATURAL INNER JOIN :TEST_TABLE o2
WHERE o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=0 loops=1)
   ->  Sort (actual rows=0 loops=1)
         Sort Key: o1."time"
         Sort Method: quicksort 
         ->  Result (actual rows=0 loops=1)
               One-Time Filter: false
(6 rows)

-- test LEFT JOIN on time column
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  LEFT JOIN :TEST_TABLE o2 ON o1.time = o2.time
WHERE o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Custom Scan (ChunkAppend) on metrics_space_compressed o1 (actual rows=100 loops=1)
               Order: o1."time"
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                     Vectorized Filter: (v0 = 2)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=1 loops=1)
                           Index Cond: (device_id = 1)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_2 (never executed)
                     Vectorized Filter: (v0 = 2)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                           Index Cond: (device_id = 1)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_3 (never executed)
                     Vectorized Filter: (v0 = 2)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                           Index Cond: (device_id = 1)
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_space_compressed o2 (actual rows=100 loops=1)
                     Order: o2."time"
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=1 loops=1)
                                 Index Cond: (device_id = 2)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_2 (never executed)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                 Index Cond: (device_id = 2)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_3 (never executed)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                 Index Cond: (device_id = 2)
(29 rows)

-- test RIGHT JOIN on time column
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  RIGHT JOIN :TEST_TABLE o2 ON o1.time = o2.time
WHERE o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o2.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Custom Scan (ChunkAppend) on metrics_space_compressed o1 (actual rows=100 loops=1)
               Order: o1."time"
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                     Vectorized Filter: (v0 = 2)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=1 loops=1)
                           Index Cond: (device_id = 1)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_2 (never executed)
                     Vectorized Filter: (v0 = 2)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                           Index Cond: (device_id = 1)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_3 (never executed)
                     Vectorized Filter: (v0 = 2)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                           Index Cond: (device_id = 1)
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_space_compressed o2 (actual rows=100 loops=1)
                     Order: o2."time"
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=1 loops=1)
                                 Index Cond: (device_id = 2)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_2 (never executed)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                 Index Cond: (device_id = 2)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_3 (never executed)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                 Index Cond: (device_id = 2)
(29 rows)

-- test JOIN on time column with ON clause expression order switched
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  INNER JOIN :TEST_TABLE o2 ON o2.time = o1.time
WHERE o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Custom Scan (ChunkAppend) on metrics_space_compressed o1 (actual rows=100 loops=1)
               Order: o1."time"
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                     Vectorized Filter: (v0 = 2)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=1 loops=1)
                           Index Cond: (device_id = 1)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_2 (never executed)
                     Vectorized Filter: (v0 = 2)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                           Index Cond: (device_id = 1)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_3 (never executed)
                     Vectorized Filter: (v0 = 2)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                           Index Cond: (device_id = 1)
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_space_compressed o2 (actual rows=100 loops=1)
                     Order: o2."time"
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=1 loops=1)
                                 Index Cond: (device_id = 2)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_2 (never executed)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                 Index Cond: (device_id = 2)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_3 (never executed)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                 Index Cond: (device_id = 2)
(29 rows)

-- test JOIN on time column with equality condition in WHERE clause
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  INNER JOIN :TEST_TABLE o2 ON TRUE
WHERE o1.time = o2.time
  AND o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Custom Scan (ChunkAppend) on metrics_space_compressed o1 (actual rows=100 loops=1)
               Order: o1."time"
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                     Vectorized Filter: (v0 = 2)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=1 loops=1)
                           Index Cond: (device_id = 1)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_2 (never executed)
                     Vectorized Filter: (v0 = 2)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                           Index Cond: (device_id = 1)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_3 (never executed)
                     Vectorized Filter: (v0 = 2)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                           Index Cond: (device_id = 1)
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_space_compressed o2 (actual rows=100 loops=1)
                     Order: o2."time"
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=1 loops=1)
                                 Index Cond: (device_id = 2)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_2 (never executed)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                 Index Cond: (device_id = 2)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_3 (never executed)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                 Index Cond: (device_id = 2)
(29 rows)

-- test JOIN on time column with ORDER BY 2nd hypertable
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  INNER JOIN :TEST_TABLE o2 ON o1.time = o2.time
WHERE o1.device_id = 1
  AND o2.device_id = 2
  AND o1.v0 = 2
ORDER BY o2.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Custom Scan (ChunkAppend) on metrics_space_compressed o1 (actual rows=100 loops=1)
               Order: o1."time"
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                     Vectorized Filter: (v0 = 2)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=1 loops=1)
                           Index Cond: (device_id = 1)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_2 (never executed)
                     Vectorized Filter: (v0 = 2)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                           Index Cond: (device_id = 1)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_3 (never executed)
                     Vectorized Filter: (v0 = 2)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                           Index Cond: (device_id = 1)
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_space_compressed o2 (actual rows=100 loops=1)
                     Order: o2."time"
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=1 loops=1)
                                 Index Cond: (device_id = 2)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_2 (never executed)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                 Index Cond: (device_id = 2)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_3 (never executed)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                 Index Cond: (device_id = 2)
(29 rows)

-- test JOIN on time column and device_id
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
INNER JOIN :TEST_TABLE o2 ON o1.device_id = o2.device_id
    AND o1.time = o2.time
WHERE o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         Join Filter: (o1.device_id = o2.device_id)
         Rows Removed by Join Filter: 893
         ->  Custom Scan (ChunkAppend) on metrics_space_compressed o1 (actual rows=100 loops=1)
               Order: o1."time"
               ->  Merge Append (actual rows=100 loops=1)
                     Sort Key: o1_1."time"
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                           Filter: (v0 = 2)
                           Rows Removed by Filter: 2758
                           ->  Sort (actual rows=5 loops=1)
                                 Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                                 Sort Method: quicksort 
                                 ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=88 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_2 (actual rows=0 loops=1)
                           Filter: (v0 = 2)
                           Rows Removed by Filter: 86344
                           ->  Sort (actual rows=88 loops=1)
                                 Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                                 Sort Method: quicksort 
                                 ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=88 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_3 (actual rows=0 loops=1)
                           Filter: (v0 = 2)
                           Rows Removed by Filter: 43172
                           ->  Sort (actual rows=44 loops=1)
                                 Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                                 Sort Method: quicksort 
                                 ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=44 loops=1)
               ->  Merge Append (never executed)
                     Sort Key: o1_4."time"
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_4 (never executed)
                           Filter: (v0 = 2)
                           ->  Sort (never executed)
                                 Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                                 ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_5 (never executed)
                           Filter: (v0 = 2)
                           ->  Sort (never executed)
                                 Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                                 ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_6 (never executed)
                           Filter: (v0 = 2)
                           ->  Sort (never executed)
                                 Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                                 ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
               ->  Merge Append (never executed)
                     Sort Key: o1_7."time"
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_7 (never executed)
                           Filter: (v0 = 2)
                           ->  Sort (never executed)
                                 Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                                 ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_8 (never executed)
                           Filter: (v0 = 2)
                           ->  Sort (never executed)
                                 Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                                 ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_9 (never executed)
                           Filter: (v0 = 2)
                           ->  Sort (never executed)
                                 Sort Key: compress_hyper_X_X_chunk._ts_meta_min_1
                                 ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
         ->  Materialize (actual rows=993 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_space_compressed o2 (actual rows=993 loops=1)
                     Order: o2."time"
                     ->  Merge Append (actual rows=993 loops=1)
                           Sort Key: o2_1."time"
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_1 (actual rows=399 loops=1)
                                 ->  Sort (actual rows=5 loops=1)
                                       Sort Key: compress_hyper_X_X_chunk_1._ts_meta_min_1
                                       Sort Method: quicksort 
                                       ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (actual rows=88 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_2 (actual rows=397 loops=1)
                                 ->  Sort (actual rows=5 loops=1)
                                       Sort Key: compress_hyper_X_X_chunk_1._ts_meta_min_1
                                       Sort Method: quicksort 
                                       ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (actual rows=88 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_3 (actual rows=199 loops=1)
                                 ->  Sort (actual rows=3 loops=1)
                                       Sort Key: compress_hyper_X_X_chunk_1._ts_meta_min_1
                                       Sort Method: quicksort 
                                       ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (actual rows=44 loops=1)
                     ->  Merge Append (never executed)
                           Sort Key: o2_4."time"
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_4 (never executed)
                                 ->  Sort (never executed)
                                       Sort Key: compress_hyper_X_X_chunk_1._ts_meta_min_1
                                       ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_5 (never executed)
                                 ->  Sort (never executed)
                                       Sort Key: compress_hyper_X_X_chunk_1._ts_meta_min_1
                                       ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_6 (never executed)
                                 ->  Sort (never executed)
                                       Sort Key: compress_hyper_X_X_chunk_1._ts_meta_min_1
                                       ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
                     ->  Merge Append (never executed)
                           Sort Key: o2_7."time"
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_7 (never executed)
                                 ->  Sort (never executed)
                                       Sort Key: compress_hyper_X_X_chunk_1._ts_meta_min_1
                                       ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_8 (never executed)
                                 ->  Sort (never executed)
                                       Sort Key: compress_hyper_X_X_chunk_1._ts_meta_min_1
                                       ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_9 (never executed)
                                 ->  Sort (never executed)
                                       Sort Key: compress_hyper_X_X_chunk_1._ts_meta_min_1
                                       ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
(112 rows)

-- test JOIN on device_id
-- should not use ordered append for 2nd hypertable
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
INNER JOIN :TEST_TABLE o2 ON o1.device_id = o2.device_id
WHERE o1.device_id = 1
  AND o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Nested Loop (actual rows=100 loops=1)
         ->  Custom Scan (ChunkAppend) on metrics_space_compressed o1 (actual rows=1 loops=1)
               Order: o1."time"
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_1 (actual rows=1 loops=1)
                     Vectorized Filter: (v0 = 2)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=1 loops=1)
                           Index Cond: (device_id = 1)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_2 (never executed)
                     Vectorized Filter: (v0 = 2)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                           Index Cond: (device_id = 1)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_3 (never executed)
                     Vectorized Filter: (v0 = 2)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                           Index Cond: (device_id = 1)
         ->  Materialize (actual rows=100 loops=1)
               ->  Append (actual rows=100 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                           ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (actual rows=1 loops=1)
                                 Index Cond: (device_id = 1)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_2 (never executed)
                           ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
                                 Index Cond: (device_id = 1)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_3 (never executed)
                           ->  Index Scan using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk compress_hyper_X_X_chunk_1 (never executed)
                                 Index Cond: (device_id = 1)
(27 rows)

-- test JOIN on time column with implicit join
-- should use 2 ChunkAppend
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1,
  :TEST_TABLE o2
WHERE o1.v0 = 2
  AND o1.time = o2.time
  AND o1.device_id = 1
  AND o2.device_id = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Custom Scan (ChunkAppend) on metrics_space_compressed o1 (actual rows=100 loops=1)
               Order: o1."time"
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                     Vectorized Filter: (v0 = 2)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=1 loops=1)
                           Index Cond: (device_id = 1)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_2 (never executed)
                     Vectorized Filter: (v0 = 2)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                           Index Cond: (device_id = 1)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_3 (never executed)
                     Vectorized Filter: (v0 = 2)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                           Index Cond: (device_id = 1)
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_space_compressed o2 (actual rows=100 loops=1)
                     Order: o2."time"
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=1 loops=1)
                                 Index Cond: (device_id = 2)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_2 (never executed)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                 Index Cond: (device_id = 2)
                     ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_3 (never executed)
                           ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                 Index Cond: (device_id = 2)
(29 rows)

-- test JOIN on time column with 3 hypertables
-- should use 3 ChunkAppend
SET join_collapse_limit TO 1;
:PREFIX
SELECT o1.time
FROM :TEST_TABLE o1
  INNER JOIN :TEST_TABLE o2 ON o1.time = o2.time
  INNER JOIN :TEST_TABLE o3 ON o1.time = o3.time
WHERE o1.device_id = 1
  AND o2.device_id = 2
  AND o3.device_id = 3
  AND o1.v0 = 2
ORDER BY o1.time
LIMIT 100;
QUERY PLAN
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o3."time" = o1."time")
         ->  Custom Scan (ChunkAppend) on metrics_space_compressed o3 (actual rows=100 loops=1)
               Order: o3."time"
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o3_1 (actual rows=100 loops=1)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=1 loops=1)
                           Index Cond: (device_id = 3)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o3_2 (never executed)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                           Index Cond: (device_id = 3)
               ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o3_3 (never executed)
                     ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                           Index Cond: (device_id = 3)
         ->  Materialize (actual rows=100 loops=1)
               ->  Merge Join (actual rows=100 loops=1)
                     Merge Cond: (o1."time" = o2."time")
                     ->  Custom Scan (ChunkAppend) on metrics_space_compressed o1 (actual rows=100 loops=1)
                           Order: o1."time"
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_1 (actual rows=100 loops=1)
                                 Vectorized Filter: (v0 = 2)
                                 ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=1 loops=1)
                                       Index Cond: (device_id = 1)
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_2 (never executed)
                                 Vectorized Filter: (v0 = 2)
                                 ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                       Index Cond: (device_id = 1)
                           ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o1_3 (never executed)
                                 Vectorized Filter: (v0 = 2)
                                 ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                       Index Cond: (device_id = 1)
                     ->  Materialize (actual rows=100 loops=1)
                           ->  Custom Scan (ChunkAppend) on metrics_space_compressed o2 (actual rows=100 loops=1)
                                 Order: o2."time"
                                 ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_1 (actual rows=100 loops=1)
                                       ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (actual rows=1 loops=1)
                                             Index Cond: (device_id = 2)
                                 ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_2 (never executed)
                                       ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                             Index Cond: (device_id = 2)
                                 ->  Custom Scan (DecompressChunk) on _hyper_X_X_chunk o2_3 (never executed)
                                       ->  Index Scan Backward using compress_hyper_X_X_chunk_device_id__ts_meta_sequence_num_idx on compress_hyper_X_X_chunk (never executed)
                                             Index Cond: (device_id = 2)
(43 rows)

RESET join_collapse_limit;
RESET enable_seqscan;
-- get results for all the queries
-- run queries on uncompressed hypertable and store result
\set PREFIX ''
\set PREFIX_VERBOSE ''
\set ECHO none
 table_name 
 i4418_1
(1 row)

 table_name 
 i4418_2
(1 row)

QUERY PLAN
 Sort (actual rows=20 loops=1)
   Sort Key: (time_bucket('@ 1 day'::interval, tbl1_1."time"))
   Sort Method: quicksort 
   ->  HashAggregate (actual rows=20 loops=1)
         Group Key: time_bucket('@ 1 day'::interval, tbl1_1."time")
         Batches: 1 
         ->  Merge Join (actual rows=9121 loops=1)
               Merge Cond: ((tbl1_1.device = tbl2_1.device) AND (tbl1_1."time" = tbl2_1."time"))
               ->  Sort (actual rows=9121 loops=1)
                     Sort Key: tbl1_1.device, tbl1_1."time"
                     Sort Method: quicksort 
                     ->  Append (actual rows=9121 loops=1)
                           ->  Seq Scan on _hyper_X_X_chunk tbl1_1 (actual rows=1300 loops=1)
                           ->  Seq Scan on _hyper_X_X_chunk tbl1_2 (actual rows=3360 loops=1)
                           ->  Seq Scan on _hyper_X_X_chunk tbl1_3 (actual rows=3360 loops=1)
                           ->  Seq Scan on _hyper_X_X_chunk tbl1_4 (actual rows=1101 loops=1)
               ->  Sort (actual rows=9121 loops=1)
                     Sort Key: tbl2_1.device, tbl2_1."time"
                     Sort Method: quicksort 
                     ->  Append (actual rows=9121 loops=1)
                           ->  Seq Scan on _hyper_X_X_chunk tbl2_1 (actual rows=1300 loops=1)
                           ->  Seq Scan on _hyper_X_X_chunk tbl2_2 (actual rows=3360 loops=1)
                           ->  Seq Scan on _hyper_X_X_chunk tbl2_3 (actual rows=3360 loops=1)
                           ->  Seq Scan on _hyper_X_X_chunk tbl2_4 (actual rows=1101 loops=1)
(24 rows)

