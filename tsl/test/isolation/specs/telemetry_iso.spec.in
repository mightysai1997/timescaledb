# This file and its contents are licensed under the Timescale License.
# Please see the included NOTICE for copyright information and
# LICENSE-TIMESCALE for a copy of the license.

setup {
  CREATE TABLE compress (time timestamptz, color int, temp float);
  SELECT create_hypertable('compress', 'time', 'color', 2, chunk_time_interval => interval '1 week');
  INSERT INTO compress
  SELECT t, ceil(random() * 10)::int, random() * 30
  FROM generate_series('2020-01-20'::timestamptz, '2020-02-20', '10m') t;
  ALTER TABLE compress SET (timescaledb.compress = TRUE);
  SELECT compress_chunk(c) FROM show_chunks('compress') c ORDER BY c LIMIT 10;

  CREATE OR REPLACE FUNCTION debug_waitpoint_enable(TEXT) RETURNS VOID LANGUAGE C VOLATILE STRICT
  AS '@TS_MODULE_PATHNAME@', 'ts_debug_point_enable';

  CREATE OR REPLACE FUNCTION debug_waitpoint_release(TEXT) RETURNS VOID LANGUAGE C VOLATILE STRICT
  AS '@TS_MODULE_PATHNAME@', 'ts_debug_point_release';
}

teardown {
  DROP TABLE compress;
  DROP TABLE compressed_chunks;
  DROP TABLE decompressed_chunks;
  DROP TABLE telemetry;
}

session "s1"
step "s1_wp_enable"           { SELECT debug_waitpoint_enable('telemetry_classify_relation'); }
step "s1_wp_release"      { SELECT debug_waitpoint_release('telemetry_classify_relation'); }
step "s1_decompress"	{ SELECT decompress_chunk(c) INTO decompressed_chunks FROM show_chunks('compress') c ORDER BY c LIMIT 10; }
step "s1_insert_new_chunk" { INSERT INTO compress VALUES ('2020-03-01'::timestamptz, 1, 33.3); }
step "s1_drop_chunks"   { SELECT count(*) FROM drop_chunks('compress', timestamptz '2020-01-20 15:00'); }
step "s1_compress"      { SELECT compress_chunk(c) INTO compressed_chunks FROM show_chunks('compress') c ORDER BY c DESC LIMIT 1; }

session "s2"
step "s2_telemetry_report" { SELECT t INTO telemetry FROM get_telemetry_report() t; }

permutation "s1_wp_enable" "s2_telemetry_report" "s1_drop_chunks" "s1_decompress" "s1_insert_new_chunk" "s1_compress" "s1_wp_release"
