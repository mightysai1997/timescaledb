-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
-- test add and remove refresh policy apis 
SET ROLE :ROLE_DEFAULT_PERM_USER;
--TEST1 ---
--basic test with count
CREATE TABLE int_tab (a integer, b integer, c integer);
SELECT table_name FROM create_hypertable('int_tab', 'a', chunk_time_interval=> 10);
NOTICE:  adding not-null constraint to column "a"
 table_name 
------------
 int_tab
(1 row)

INSERT INTO int_tab VALUES( 3 , 16 , 20);
INSERT INTO int_tab VALUES( 1 , 10 , 20);
INSERT INTO int_tab VALUES( 1 , 11 , 20);
INSERT INTO int_tab VALUES( 1 , 12 , 20);
INSERT INTO int_tab VALUES( 1 , 13 , 20);
INSERT INTO int_tab VALUES( 1 , 14 , 20);
INSERT INTO int_tab VALUES( 2 , 14 , 20);
INSERT INTO int_tab VALUES( 2 , 15 , 20);
INSERT INTO int_tab VALUES( 2 , 16 , 20);
CREATE OR REPLACE FUNCTION integer_now_int_tab() returns int LANGUAGE SQL STABLE as $$ SELECT coalesce(max(a), 0) FROM int_tab $$;
SELECT set_integer_now_func('int_tab', 'integer_now_int_tab');
 set_integer_now_func 
----------------------
 
(1 row)

CREATE MATERIALIZED VIEW mat_m1( a, countb )
WITH (timescaledb.continuous, timescaledb.materialized_only=true)
as
SELECT a, count(b)
FROM int_tab
GROUP BY time_bucket(1, a), a;
NOTICE:  adding index _materialized_hypertable_2_a_time_partition_col_idx ON _timescaledb_internal._materialized_hypertable_2 USING BTREE(a, time_partition_col)
\c :TEST_DBNAME :ROLE_SUPERUSER
DELETE FROM _timescaledb_config.bgw_job WHERE TRUE;
SET ROLE :ROLE_DEFAULT_PERM_USER;
SELECT count(*) FROM _timescaledb_config.bgw_job;
 count 
-------
     0
(1 row)

\set ON_ERROR_STOP 0
SELECT add_refresh_continuous_aggregate_policy('int_tab', '1 day'::interval, 10 , '1 h'::interval); 
ERROR:  "int_tab" is not a continuous aggregate
SELECT add_refresh_continuous_aggregate_policy('mat_m1', '1 day'::interval, 10 , '1 h'::interval); 
ERROR:  invalid parameter value for start_interval
SELECT add_refresh_continuous_aggregate_policy('mat_m1', '1 day'::interval, 10 ); 
ERROR:  function add_refresh_continuous_aggregate_policy(unknown, interval, integer) does not exist at character 8
SELECT add_refresh_continuous_aggregate_policy('mat_m1', 10, '1 day'::interval, '1 h'::interval); 
ERROR:  invalid parameter value for end_interval
SELECT add_refresh_continuous_aggregate_policy('mat_m1', 20, 10, '1h'::interval) as job_id \gset
--adding again should warn/error 
SELECT add_refresh_continuous_aggregate_policy('mat_m1', 20, 10, '1h'::interval, if_not_exists=>false); 
ERROR:  refresh policy already exists for continuous aggregate "mat_m1"
SELECT add_refresh_continuous_aggregate_policy('mat_m1', 10, 20, '1h'::interval, if_not_exists=>true); 
WARNING:  could not add refresh policy due to existing policy on continuous aggregate with different arguments
 add_refresh_continuous_aggregate_policy 
-----------------------------------------
                                      -1
(1 row)

SELECT add_refresh_continuous_aggregate_policy('mat_m1', 20, 10, '1h'::interval, if_not_exists=>true); 
NOTICE:  refresh policy already exists on continuous aggregate "mat_m1", skipping
 add_refresh_continuous_aggregate_policy 
-----------------------------------------
                                      -1
(1 row)

-- modify config and try to add, should error out
SELECT config FROM _timescaledb_config.bgw_job where id = :job_id;
                               config                               
--------------------------------------------------------------------
 {"end_interval": 10, "start_interval": 20, "mat_hypertable_id": 2}
(1 row)

SELECT hypertable_id as mat_id FROM _timescaledb_config.bgw_job where id = :job_id \gset
\c :TEST_DBNAME :ROLE_SUPERUSER
UPDATE _timescaledb_config.bgw_job 
SET config = jsonb_build_object('mat_hypertable_id', :mat_id)
WHERE id = :job_id;
SET ROLE :ROLE_DEFAULT_PERM_USER;
SELECT config FROM _timescaledb_config.bgw_job where id = :job_id;
          config          
--------------------------
 {"mat_hypertable_id": 2}
(1 row)

SELECT add_refresh_continuous_aggregate_policy('mat_m1', 20, 10, '1h'::interval, if_not_exists=>true);
ERROR:  could not find start_interval in config for existing job
SELECT remove_refresh_continuous_aggregate_policy('int_tab');
ERROR:  "int_tab" is not a continuous aggregate
SELECT remove_refresh_continuous_aggregate_policy('mat_m1');
 remove_refresh_continuous_aggregate_policy 
--------------------------------------------
 
(1 row)

--this one will fail
SELECT remove_refresh_continuous_aggregate_policy('mat_m1');
ERROR:  refresh policy does not exist on continuous aggregate "mat_m1"
SELECT remove_refresh_continuous_aggregate_policy('mat_m1', if_not_exists=>true);
NOTICE:  refresh policy does not exist on continuous aggregate "mat_m1", skipping
 remove_refresh_continuous_aggregate_policy 
--------------------------------------------
 
(1 row)

--now try to add a policy as a different user than the one that created the cagg
--should fail
SET ROLE :ROLE_DEFAULT_PERM_USER_2;
SELECT add_refresh_continuous_aggregate_policy('mat_m1', 20, 10, '1h'::interval) as job_id ;
ERROR:  must be owner of continuous aggregate "mat_m1"
SET ROLE :ROLE_DEFAULT_PERM_USER;
DROP MATERIALIZED VIEW mat_m1;
--- code coverage tests : add policy for timestamp and date based table ---
CREATE TABLE continuous_agg_max_mat_date(time DATE);
SELECT create_hypertable('continuous_agg_max_mat_date', 'time');
NOTICE:  adding not-null constraint to column "time"
            create_hypertable             
------------------------------------------
 (3,public,continuous_agg_max_mat_date,t)
(1 row)

CREATE MATERIALIZED VIEW max_mat_view_date
    WITH (timescaledb.continuous, timescaledb.materialized_only=true)
    AS SELECT time_bucket('7 days', time)
        FROM continuous_agg_max_mat_date
        GROUP BY 1;
\set ON_ERROR_STOP 0
SELECT add_refresh_continuous_aggregate_policy('max_mat_view_date', '2 days'::interval, 10 , '1 day'::interval); 
ERROR:  invalid parameter value for end_interval
\set ON_ERROR_STOP 1
SELECT add_refresh_continuous_aggregate_policy('max_mat_view_date', '2 day'::interval, '1 day'::interval , '1 day'::interval) as job_id \gset
SELECT config FROM _timescaledb_config.bgw_job 
WHERE id = :job_id;
                                      config                                       
-----------------------------------------------------------------------------------
 {"end_interval": "@ 1 day", "start_interval": "@ 2 days", "mat_hypertable_id": 4}
(1 row)

INSERT INTO continuous_agg_max_mat_date
    SELECT generate_series('2019-09-01'::date, '2019-09-10'::date, '1 day');
CALL run_job(:job_id);
DROP MATERIALIZED VIEW max_mat_view_date;
CREATE TABLE continuous_agg_timestamp(time TIMESTAMP);
SELECT create_hypertable('continuous_agg_timestamp', 'time');
NOTICE:  adding not-null constraint to column "time"
           create_hypertable           
---------------------------------------
 (5,public,continuous_agg_timestamp,t)
(1 row)

CREATE MATERIALIZED VIEW max_mat_view_timestamp
    WITH (timescaledb.continuous, timescaledb.materialized_only=true)
    AS SELECT time_bucket('7 days', time)
        FROM continuous_agg_timestamp
        GROUP BY 1;
SELECT add_refresh_continuous_aggregate_policy('max_mat_view_timestamp', '10 day'::interval, '1 h'::interval , '1 h'::interval) as job_id \gset
CALL run_job(:job_id);
SELECT config FROM _timescaledb_config.bgw_job 
WHERE id = :job_id;
                                       config                                        
-------------------------------------------------------------------------------------
 {"end_interval": "@ 1 hour", "start_interval": "@ 10 days", "mat_hypertable_id": 6}
(1 row)

\c :TEST_DBNAME :ROLE_SUPERUSER
UPDATE _timescaledb_config.bgw_job 
SET config = jsonb_build_object('mat_hypertable_id', :mat_id)
WHERE id = :job_id;
SET ROLE :ROLE_DEFAULT_PERM_USER;
SELECT config FROM _timescaledb_config.bgw_job where id = :job_id;
          config          
--------------------------
 {"mat_hypertable_id": 2}
(1 row)

\set ON_ERROR_STOP 0
SELECT add_refresh_continuous_aggregate_policy('max_mat_view_timestamp', '10 day'::interval, '1 day'::interval, '1h'::interval, if_not_exists=>true);
ERROR:  could not find start_interval in config for job
\set ON_ERROR_STOP 1
DROP MATERIALIZED VIEW max_mat_view_timestamp;
--smallint table
CREATE TABLE smallint_tab (a smallint);
SELECT table_name FROM create_hypertable('smallint_tab', 'a', chunk_time_interval=> 10);
NOTICE:  adding not-null constraint to column "a"
  table_name  
--------------
 smallint_tab
(1 row)

CREATE OR REPLACE FUNCTION integer_now_smallint_tab() returns smallint LANGUAGE SQL STABLE as $$ SELECT 20::smallint $$;
SELECT set_integer_now_func('smallint_tab', 'integer_now_smallint_tab');
 set_integer_now_func 
----------------------
 
(1 row)

CREATE MATERIALIZED VIEW mat_smallint( a, countb )
WITH (timescaledb.continuous, timescaledb.materialized_only=true)
as
SELECT time_bucket( SMALLINT '1', a) , count(*)
FROM smallint_tab
GROUP BY 1;
\set ON_ERROR_STOP 0
SELECT add_refresh_continuous_aggregate_policy('mat_smallint', 15, 0 , '1 h'::interval);
ERROR:  invalid parameter value for start_interval
SELECT add_refresh_continuous_aggregate_policy('mat_smallint', 98898::smallint , 0::smallint, '1 h'::interval);
ERROR:  smallint out of range
\set ON_ERROR_STOP 1
SELECT add_refresh_continuous_aggregate_policy('mat_smallint', 15::smallint, 0::smallint , '1 h'::interval) as job_id \gset
INSERT INTO smallint_tab VALUES(5);
INSERT INTO smallint_tab VALUES(10);
INSERT INTO smallint_tab VALUES(20);
CALL run_job(:job_id);
SELECT * FROM mat_smallint;
 a  | countb 
----+--------
  5 |      1
 10 |      1
(2 rows)

\set ON_ERROR_STOP 0
SELECT add_refresh_continuous_aggregate_policy('mat_smallint', 15, 10, '1h'::interval, if_not_exists=>true); 
WARNING:  could not add refresh policy due to existing policy on continuous aggregate with different arguments
 add_refresh_continuous_aggregate_policy 
-----------------------------------------
                                      -1
(1 row)

\set ON_ERROR_STOP 1
DROP MATERIALIZED VIEW mat_smallint;
NOTICE:  drop cascades to table _timescaledb_internal._hyper_8_7_chunk
-- end of coverage tests
