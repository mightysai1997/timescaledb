-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
--
-- Setup
--
\c :TEST_DBNAME :ROLE_SUPERUSER
CREATE OR REPLACE FUNCTION ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish(timeout INT = -1, mock_start_time INT = 0) RETURNS VOID
AS :MODULE_PATHNAME LANGUAGE C VOLATILE;
CREATE OR REPLACE FUNCTION ts_bgw_db_scheduler_test_run(timeout INT = -1, mock_start_time INT = 0) RETURNS VOID
AS :MODULE_PATHNAME LANGUAGE C VOLATILE;
CREATE OR REPLACE FUNCTION ts_bgw_db_scheduler_test_wait_for_scheduler_finish() RETURNS VOID
AS :MODULE_PATHNAME LANGUAGE C VOLATILE;
CREATE OR REPLACE FUNCTION ts_bgw_params_create() RETURNS VOID
AS :MODULE_PATHNAME LANGUAGE C VOLATILE;
CREATE OR REPLACE FUNCTION ts_bgw_params_destroy() RETURNS VOID
AS :MODULE_PATHNAME LANGUAGE C VOLATILE;
CREATE OR REPLACE FUNCTION ts_bgw_params_reset_time(set_time BIGINT = 0, wait BOOLEAN = false) RETURNS VOID
AS :MODULE_PATHNAME LANGUAGE C VOLATILE;
--test that this all works under the community license
ALTER DATABASE :TEST_DBNAME SET timescaledb.license_key='Community';
--create a function with no permissions to execute
CREATE FUNCTION get_constant_no_perms() RETURNS INTEGER LANGUAGE SQL IMMUTABLE AS
$BODY$
    SELECT 10;
$BODY$;
REVOKE EXECUTE ON FUNCTION get_constant_no_perms() FROM PUBLIC;
\set WAIT_ON_JOB 0
\set IMMEDIATELY_SET_UNTIL 1
\set WAIT_FOR_OTHER_TO_ADVANCE 2
-- Remove any default jobs, e.g., telemetry
SELECT _timescaledb_internal.stop_background_workers();
 stop_background_workers 
-------------------------
 t
(1 row)

DELETE FROM _timescaledb_config.bgw_job WHERE TRUE;
TRUNCATE _timescaledb_internal.bgw_job_stat;
SELECT _timescaledb_internal.start_background_workers();
 start_background_workers 
--------------------------
 t
(1 row)

\c :TEST_DBNAME :ROLE_DEFAULT_PERM_USER
CREATE TABLE public.bgw_log(
    msg_no INT,
    mock_time BIGINT,
    application_name TEXT,
    msg TEXT
);
CREATE VIEW sorted_bgw_log AS
    SELECT * FROM bgw_log ORDER BY mock_time, application_name COLLATE "C", msg_no;
CREATE TABLE public.bgw_dsm_handle_store(
    handle BIGINT
);
INSERT INTO public.bgw_dsm_handle_store VALUES (0);
SELECT ts_bgw_params_create();
 ts_bgw_params_create 
----------------------
 
(1 row)

SELECT * FROM _timescaledb_config.bgw_job;
 id | application_name | job_type | schedule_interval | max_runtime | max_retries | retry_period 
----+------------------+----------+-------------------+-------------+-------------+--------------
(0 rows)

SELECT * FROM timescaledb_information.policy_stats;
 hypertable | job_id | job_type | last_run_success | last_finish | last_start | next_start | total_runs | total_failures 
------------+--------+----------+------------------+-------------+------------+------------+------------+----------------
(0 rows)

SELECT * FROM _timescaledb_catalog.continuous_agg;
 mat_hypertable_id | raw_hypertable_id | user_view_schema | user_view_name | partial_view_schema | partial_view_name | bucket_width | job_id | refresh_lag | direct_view_schema | direct_view_name | max_interval_per_job 
-------------------+-------------------+------------------+----------------+---------------------+-------------------+--------------+--------+-------------+--------------------+------------------+----------------------
(0 rows)

\c :TEST_DBNAME :ROLE_DEFAULT_PERM_USER
CREATE TABLE test_continuous_agg_table(time int, data int);
SELECT create_hypertable('test_continuous_agg_table', 'time', chunk_time_interval => 10);
NOTICE:  adding not-null constraint to column "time"
           create_hypertable            
----------------------------------------
 (1,public,test_continuous_agg_table,t)
(1 row)

CREATE VIEW test_continuous_agg_view
    WITH ( timescaledb.continuous)
    AS SELECT time_bucket('2', time), SUM(data) as value
        FROM test_continuous_agg_table
        GROUP BY 1;
-- even before running, stats shows something
SELECT view_name, completed_threshold, invalidation_threshold, job_status, last_run_duration
    FROM timescaledb_information.continuous_aggregate_stats;
        view_name         | completed_threshold | invalidation_threshold | job_status | last_run_duration 
--------------------------+---------------------+------------------------+------------+-------------------
 test_continuous_agg_view |                     |                        |            | 
(1 row)

SELECT id as raw_table_id FROM _timescaledb_catalog.hypertable WHERE table_name='test_continuous_agg_table' \gset
-- min distance from end should be 1
SELECT  mat_hypertable_id, user_view_schema, user_view_name, bucket_width, job_id, refresh_lag FROM _timescaledb_catalog.continuous_agg;
 mat_hypertable_id | user_view_schema |      user_view_name      | bucket_width | job_id | refresh_lag 
-------------------+------------------+--------------------------+--------------+--------+-------------
                 2 | public           | test_continuous_agg_view |            2 |   1000 |           4
(1 row)

SELECT job_id FROM _timescaledb_catalog.continuous_agg \gset
-- job was created
SELECT * FROM _timescaledb_config.bgw_job where id=:job_id;
  id  |          application_name           |       job_type       | schedule_interval | max_runtime | max_retries | retry_period 
------+-------------------------------------+----------------------+-------------------+-------------+-------------+--------------
 1000 | Continuous Aggregate Background Job | continuous_aggregate | @ 12 hours        | @ 0         |          -1 | @ 12 hours
(1 row)

-- create 10 time buckets
INSERT INTO test_continuous_agg_table
    SELECT i, i FROM
        (SELECT generate_series(0, 10) as i) AS j;
-- no stats
SELECT job_id, next_start, last_finish as until_next, last_run_success, total_runs, total_successes, total_failures, total_crashes
    FROM _timescaledb_internal.bgw_job_stat
    ORDER BY job_id;
 job_id | next_start | until_next | last_run_success | total_runs | total_successes | total_failures | total_crashes 
--------+------------+------------+------------------+------------+-----------------+----------------+---------------
(0 rows)

-- no data in view
SELECT * FROM test_continuous_agg_view ORDER BY 1;
 time_bucket | value 
-------------+-------
(0 rows)

-- run first time
SELECT ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish(25);
 ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish 
------------------------------------------------------------
 
(1 row)

SELECT * FROM sorted_bgw_log;
 msg_no | mock_time | application_name |                    msg                     
--------+-----------+------------------+--------------------------------------------
      0 |         0 | DB Scheduler     | [TESTING] Registered new background worker
      1 |         0 | DB Scheduler     | [TESTING] Wait until 25000, started at 0
(2 rows)

SELECT * FROM _timescaledb_config.bgw_job where id=:job_id;
  id  |          application_name           |       job_type       | schedule_interval | max_runtime | max_retries | retry_period 
------+-------------------------------------+----------------------+-------------------+-------------+-------------+--------------
 1000 | Continuous Aggregate Background Job | continuous_aggregate | @ 12 hours        | @ 0         |          -1 | @ 12 hours
(1 row)

-- job ran once, successfully
SELECT job_id, next_start, last_finish as until_next, last_run_success, total_runs, total_successes, total_failures, total_crashes
    FROM _timescaledb_internal.bgw_job_stat
    where job_id=:job_id;
 job_id |          next_start          |          until_next          | last_run_success | total_runs | total_successes | total_failures | total_crashes 
--------+------------------------------+------------------------------+------------------+------------+-----------------+----------------+---------------
   1000 | Sat Jan 01 04:00:00 2000 PST | Fri Dec 31 16:00:00 1999 PST | t                |          1 |               1 |              0 |             0
(1 row)

-- data before 8
SELECT * FROM test_continuous_agg_view ORDER BY 1;
 time_bucket | value 
-------------+-------
           0 |     1
           2 |     5
           4 |     9
(3 rows)

-- fast restart test
SELECT ts_bgw_params_reset_time();
 ts_bgw_params_reset_time 
--------------------------
 
(1 row)

DROP VIEW test_continuous_agg_view CASCADE;
NOTICE:  drop cascades to table _timescaledb_internal._hyper_2_3_chunk
CREATE VIEW test_continuous_agg_view
    WITH (timescaledb.continuous,
        timescaledb.max_interval_per_job='2',
        timescaledb.refresh_lag='-2')
    AS SELECT time_bucket('2', time), SUM(data) as value
        FROM test_continuous_agg_table
        GROUP BY 1;
SELECT job_id FROM _timescaledb_catalog.continuous_agg \gset
SELECT ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish(25);
 ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish 
------------------------------------------------------------
 
(1 row)

SELECT * FROM sorted_bgw_log;
 msg_no | mock_time | application_name |                    msg                     
--------+-----------+------------------+--------------------------------------------
      0 |         0 | DB Scheduler     | [TESTING] Registered new background worker
      0 |         0 | DB Scheduler     | [TESTING] Registered new background worker
      1 |         0 | DB Scheduler     | [TESTING] Wait until 25000, started at 0
      1 |         0 | DB Scheduler     | [TESTING] Wait until 25000, started at 0
(4 rows)

-- job ran once, successfully
SELECT job_id, next_start, last_finish as until_next, last_run_success, total_runs, total_successes, total_failures, total_crashes
    FROM _timescaledb_internal.bgw_job_stat
    where job_id=:job_id;
 job_id |          next_start          |          until_next          | last_run_success | total_runs | total_successes | total_failures | total_crashes 
--------+------------------------------+------------------------------+------------------+------------+-----------------+----------------+---------------
   1001 | Fri Dec 31 16:00:00 1999 PST | Fri Dec 31 16:00:00 1999 PST | t                |          1 |               1 |              0 |             0
(1 row)

-- data at 0
SELECT * FROM test_continuous_agg_view ORDER BY 1;
 time_bucket | value 
-------------+-------
           0 |     1
(1 row)

SELECT ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish(25, 25);
 ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish 
------------------------------------------------------------
 
(1 row)

SELECT * FROM sorted_bgw_log;
 msg_no | mock_time | application_name |                     msg                      
--------+-----------+------------------+----------------------------------------------
      0 |         0 | DB Scheduler     | [TESTING] Registered new background worker
      0 |         0 | DB Scheduler     | [TESTING] Registered new background worker
      1 |         0 | DB Scheduler     | [TESTING] Wait until 25000, started at 0
      1 |         0 | DB Scheduler     | [TESTING] Wait until 25000, started at 0
      0 |     25000 | DB Scheduler     | [TESTING] Registered new background worker
      1 |     25000 | DB Scheduler     | [TESTING] Wait until 50000, started at 25000
(6 rows)

-- job ran again, fast restart
SELECT job_id, next_start, last_finish as until_next, last_run_success, total_runs, total_successes, total_failures, total_crashes
    FROM _timescaledb_internal.bgw_job_stat
    where job_id=:job_id;
 job_id |            next_start            |            until_next            | last_run_success | total_runs | total_successes | total_failures | total_crashes 
--------+----------------------------------+----------------------------------+------------------+------------+-----------------+----------------+---------------
   1001 | Fri Dec 31 16:00:00.025 1999 PST | Fri Dec 31 16:00:00.025 1999 PST | t                |          2 |               2 |              0 |             0
(1 row)

-- data at 2
SELECT * FROM test_continuous_agg_view ORDER BY 1;
 time_bucket | value 
-------------+-------
           0 |     1
           2 |     5
(2 rows)

SELECT ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish(25, 25);
 ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish 
------------------------------------------------------------
 
(1 row)

SELECT * FROM sorted_bgw_log;
 msg_no | mock_time | application_name |                     msg                      
--------+-----------+------------------+----------------------------------------------
      0 |         0 | DB Scheduler     | [TESTING] Registered new background worker
      0 |         0 | DB Scheduler     | [TESTING] Registered new background worker
      1 |         0 | DB Scheduler     | [TESTING] Wait until 25000, started at 0
      1 |         0 | DB Scheduler     | [TESTING] Wait until 25000, started at 0
      0 |     25000 | DB Scheduler     | [TESTING] Registered new background worker
      1 |     25000 | DB Scheduler     | [TESTING] Wait until 50000, started at 25000
      0 |     50000 | DB Scheduler     | [TESTING] Registered new background worker
      1 |     50000 | DB Scheduler     | [TESTING] Wait until 75000, started at 50000
(8 rows)

SELECT * FROM _timescaledb_config.bgw_job where id=:job_id;
  id  |          application_name           |       job_type       | schedule_interval | max_runtime | max_retries | retry_period 
------+-------------------------------------+----------------------+-------------------+-------------+-------------+--------------
 1001 | Continuous Aggregate Background Job | continuous_aggregate | @ 12 hours        | @ 0         |          -1 | @ 12 hours
(1 row)

-- job ran again, fast restart
SELECT job_id, next_start, last_finish as until_next, last_run_success, total_runs, total_successes, total_failures, total_crashes
    FROM _timescaledb_internal.bgw_job_stat
    where job_id=:job_id;
 job_id |           next_start            |           until_next            | last_run_success | total_runs | total_successes | total_failures | total_crashes 
--------+---------------------------------+---------------------------------+------------------+------------+-----------------+----------------+---------------
   1001 | Fri Dec 31 16:00:00.05 1999 PST | Fri Dec 31 16:00:00.05 1999 PST | t                |          3 |               3 |              0 |             0
(1 row)

-- data at 4
SELECT * FROM test_continuous_agg_view ORDER BY 1;
 time_bucket | value 
-------------+-------
           0 |     1
           2 |     5
           4 |     9
(3 rows)

\x on
--check the information views --
select view_name, view_owner, refresh_lag, refresh_interval, max_interval_per_job, materialization_hypertable
from timescaledb_information.continuous_aggregates
where view_name::text like '%test_continuous_agg_view';
-[ RECORD 1 ]--------------+-------------------------------------------------
view_name                  | test_continuous_agg_view
view_owner                 | default_perm_user
refresh_lag                | -2
refresh_interval           | @ 12 hours
max_interval_per_job       | 2
materialization_hypertable | _timescaledb_internal._materialized_hypertable_3

select view_name, view_definition from timescaledb_information.continuous_aggregates
where view_name::text like '%test_continuous_agg_view';
-[ RECORD 1 ]---+-------------------------------------------------------------------------
view_name       | test_continuous_agg_view
view_definition |  SELECT time_bucket(2, test_continuous_agg_table."time") AS time_bucket,+
                |     sum(test_continuous_agg_table.data) AS value                        +
                |    FROM test_continuous_agg_table                                       +
                |   GROUP BY (time_bucket(2, test_continuous_agg_table."time"));

select view_name, completed_threshold, invalidation_threshold, job_status, last_run_duration from timescaledb_information.continuous_aggregate_stats where view_name::text like '%test_continuous_agg_view';
-[ RECORD 1 ]----------+-------------------------
view_name              | test_continuous_agg_view
completed_threshold    | 6
invalidation_threshold | 6
job_status             | scheduled
last_run_duration      | 

\x off
DROP VIEW test_continuous_agg_view CASCADE;
NOTICE:  drop cascades to table _timescaledb_internal._hyper_3_4_chunk
--create a view with a function that it has no permission to execute
CREATE VIEW test_continuous_agg_view
    WITH (timescaledb.continuous,
        timescaledb.max_interval_per_job='2',
        timescaledb.refresh_lag='-2')
    AS SELECT time_bucket('2', time), SUM(data) as value, get_constant_no_perms()
        FROM test_continuous_agg_table
        GROUP BY 1;
NOTICE:  adding index _materialized_hypertable_4_get_constant_no_perms_time_bucke_idx ON _timescaledb_internal._materialized_hypertable_4 USING BTREE(get_constant_no_perms, time_bucket)
SELECT job_id FROM _timescaledb_catalog.continuous_agg ORDER BY job_id desc limit 1 \gset
SELECT ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish(25);
 ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish 
------------------------------------------------------------
 
(1 row)

-- job fails
SELECT job_id, next_start, last_finish as until_next, last_run_success, total_runs, total_successes, total_failures, total_crashes
    FROM _timescaledb_internal.bgw_job_stat
    where job_id=:job_id;
 job_id |            next_start            |            until_next            | last_run_success | total_runs | total_successes | total_failures | total_crashes 
--------+----------------------------------+----------------------------------+------------------+------------+-----------------+----------------+---------------
   1002 | Sat Jan 01 04:00:00.075 2000 PST | Fri Dec 31 16:00:00.075 1999 PST | f                |          1 |               0 |              1 |             0
(1 row)

--
-- Test creating continuous aggregate with a user that is the non-owner of the raw table
--
CREATE TABLE test_continuous_agg_table_w_grant(time int, data int);
SELECT create_hypertable('test_continuous_agg_table_w_grant', 'time', chunk_time_interval => 10);
NOTICE:  adding not-null constraint to column "time"
               create_hypertable                
------------------------------------------------
 (5,public,test_continuous_agg_table_w_grant,t)
(1 row)

GRANT SELECT, TRIGGER ON test_continuous_agg_table_w_grant TO public;
INSERT INTO test_continuous_agg_table_w_grant
    SELECT i, i FROM
        (SELECT generate_series(0, 10) as i) AS j;
\c :TEST_DBNAME :ROLE_DEFAULT_PERM_USER_2
-- make sure view can be created
CREATE VIEW test_continuous_agg_view_user_2
    WITH ( timescaledb.continuous,
         timescaledb.max_interval_per_job='2',
        timescaledb.refresh_lag='-2')
    AS SELECT time_bucket('2', time), SUM(data) as value
        FROM test_continuous_agg_table_w_grant
        GROUP BY 1;
SELECT job_id FROM _timescaledb_catalog.continuous_agg ORDER BY job_id desc limit 1 \gset
SELECT ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish(25);
 ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish 
------------------------------------------------------------
 
(1 row)

SELECT job_id, next_start, last_finish as until_next, last_run_success, total_runs, total_successes, total_failures, total_crashes
    FROM _timescaledb_internal.bgw_job_stat
    where job_id=:job_id;
 job_id |           next_start           |           until_next           | last_run_success | total_runs | total_successes | total_failures | total_crashes 
--------+--------------------------------+--------------------------------+------------------+------------+-----------------+----------------+---------------
   1003 | Fri Dec 31 16:00:00.1 1999 PST | Fri Dec 31 16:00:00.1 1999 PST | t                |          1 |               1 |              0 |             0
(1 row)

--view is populated
SELECT * FROM test_continuous_agg_view_user_2;
 time_bucket | value 
-------------+-------
           0 |     1
(1 row)

\c :TEST_DBNAME :ROLE_DEFAULT_PERM_USER
--revoke permissions from the continuous agg view owner to select from raw table
--no further updates to cont agg should happen
REVOKE SELECT ON test_continuous_agg_table_w_grant FROM public;
INSERT INTO test_continuous_agg_table_w_grant VALUES(1,1);
\c :TEST_DBNAME :ROLE_DEFAULT_PERM_USER_2
SELECT ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish(25, 25);
 ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish 
------------------------------------------------------------
 
(1 row)

--should show a failing execution because no longer has permissions (due to lack of permission on partial view owner's part)
SELECT job_id, next_start, last_finish as until_next, last_run_success, total_runs, total_successes, total_failures, total_crashes
    FROM _timescaledb_internal.bgw_job_stat
    where job_id=:job_id;
 job_id |            next_start            |            until_next            | last_run_success | total_runs | total_successes | total_failures | total_crashes 
--------+----------------------------------+----------------------------------+------------------+------------+-----------------+----------------+---------------
   1003 | Sat Jan 01 04:00:00.125 2000 PST | Fri Dec 31 16:00:00.125 1999 PST | f                |          2 |               1 |              1 |             0
(1 row)

--view was NOT updated; but the old stuff is still there
SELECT * FROM test_continuous_agg_view_user_2;
 time_bucket | value 
-------------+-------
           0 |     1
(1 row)

