-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
-- Disable background workers since we are testing manual refresh
\c :TEST_DBNAME :ROLE_SUPERUSER
SELECT _timescaledb_internal.stop_background_workers();
 stop_background_workers 
-------------------------
 t
(1 row)

SET ROLE :ROLE_DEFAULT_PERM_USER;
SET datestyle TO 'ISO, YMD';
SET timezone TO 'UTC';
CREATE TABLE conditions (time int NOT NULL, device int, temp float);
SELECT create_hypertable('conditions', 'time', chunk_time_interval => 10);
    create_hypertable    
-------------------------
 (1,public,conditions,t)
(1 row)

CREATE TABLE measurements (time int NOT NULL, device int, temp float);
SELECT create_hypertable('measurements', 'time', chunk_time_interval => 10);
     create_hypertable     
---------------------------
 (2,public,measurements,t)
(1 row)

CREATE OR REPLACE FUNCTION cond_now()
RETURNS int LANGUAGE SQL STABLE AS
$$
    SELECT coalesce(max(time), 0)
    FROM conditions
$$;
CREATE OR REPLACE FUNCTION measure_now()
RETURNS int LANGUAGE SQL STABLE AS
$$
    SELECT coalesce(max(time), 0)
    FROM measurements
$$;
SELECT set_integer_now_func('conditions', 'cond_now');
 set_integer_now_func 
----------------------
 
(1 row)

SELECT set_integer_now_func('measurements', 'measure_now');
 set_integer_now_func 
----------------------
 
(1 row)

INSERT INTO conditions
SELECT t, ceil(abs(timestamp_hash(to_timestamp(t)::timestamp))%4)::int,
       abs(timestamp_hash(to_timestamp(t)::timestamp))%40
FROM generate_series(1, 100, 1) t;
INSERT INTO measurements
SELECT * FROM conditions;
-- Show the most recent data
SELECT * FROM conditions
ORDER BY time DESC, device
LIMIT 10;
 time | device | temp 
------+--------+------
  100 |      0 |    8
   99 |      1 |    5
   98 |      2 |   26
   97 |      2 |   10
   96 |      2 |   34
   95 |      2 |   30
   94 |      3 |   31
   93 |      0 |    4
   92 |      0 |   32
   91 |      3 |   15
(10 rows)

-- Create two continuous aggregates on the same hypertable to test
-- that invalidations are handled correctly across both of them.
CREATE VIEW cond_10
WITH (timescaledb.continuous,
      timescaledb.materialized_only=true)
AS
SELECT time_bucket(10, time) AS day, device, avg(temp) AS avg_temp
FROM conditions
GROUP BY 1,2;
NOTICE:  adding index _materialized_hypertable_3_device_day_idx ON _timescaledb_internal._materialized_hypertable_3 USING BTREE(device, day)
CREATE VIEW cond_20
WITH (timescaledb.continuous,
      timescaledb.materialized_only=true)
AS
SELECT time_bucket(20, time) AS day, device, avg(temp) AS avg_temp
FROM conditions
GROUP BY 1,2;
NOTICE:  adding index _materialized_hypertable_4_device_day_idx ON _timescaledb_internal._materialized_hypertable_4 USING BTREE(device, day)
CREATE VIEW measure_10
WITH (timescaledb.continuous,
      timescaledb.materialized_only=true)
AS
SELECT time_bucket(10, time) AS day, device, avg(temp) AS avg_temp
FROM measurements
GROUP BY 1,2;
NOTICE:  adding index _materialized_hypertable_5_device_day_idx ON _timescaledb_internal._materialized_hypertable_5 USING BTREE(device, day)
-- There should be three continuous aggregates, two on one hypertable
-- and one on the other:
SELECT mat_hypertable_id, raw_hypertable_id, user_view_name
FROM _timescaledb_catalog.continuous_agg;
 mat_hypertable_id | raw_hypertable_id | user_view_name 
-------------------+-------------------+----------------
                 3 |                 1 | cond_10
                 4 |                 1 | cond_20
                 5 |                 2 | measure_10
(3 rows)

-- The continuous aggregates should be empty
SELECT * FROM cond_10
ORDER BY day DESC, device;
 day | device | avg_temp 
-----+--------+----------
(0 rows)

SELECT * FROM cond_20
ORDER BY day DESC, device;
 day | device | avg_temp 
-----+--------+----------
(0 rows)

SELECT * FROM measure_10
ORDER BY day DESC, device;
 day | device | avg_temp 
-----+--------+----------
(0 rows)

-- Must refresh with "legacy" functionality to move the invalidation
-- threshold, or no invalidations will be generated.
REFRESH MATERIALIZED VIEW cond_10;
REFRESH MATERIALIZED VIEW measure_10;
-- There should be no invalidations initially:
SELECT hypertable_id AS hyper_id,
       lowest_modified_value AS start,
       greatest_modified_value AS end
       FROM _timescaledb_catalog.continuous_aggs_hypertable_invalidation_log
       ORDER BY 1,2,3;
 hyper_id | start | end 
----------+-------+-----
(0 rows)

SELECT materialization_id AS cagg_id,
       lowest_modified_value AS start,
       greatest_modified_value AS end
       FROM _timescaledb_catalog.continuous_aggs_materialization_invalidation_log
       ORDER BY 1,2,3;
 cagg_id | start | end 
---------+-------+-----
(0 rows)

-- Create invalidations across different ranges. Some of these should
-- be deleted and others cut in different ways when a refresh is
-- run. Note that the refresh window is inclusive in the start of the
-- window but exclusive at the end.
-- Entries that should be left unmodified:
INSERT INTO conditions VALUES (10, 4, 23.7);
INSERT INTO conditions VALUES (10, 5, 23.8), (19, 3, 23.6);
INSERT INTO conditions VALUES (60, 3, 23.7), (70, 4, 23.7);
-- Should see some invaliations in the hypertable invalidation log:
SELECT hypertable_id AS hyper_id,
       lowest_modified_value AS start,
       greatest_modified_value AS end
       FROM _timescaledb_catalog.continuous_aggs_hypertable_invalidation_log
       ORDER BY 1,2,3;
 hyper_id | start | end 
----------+-------+-----
        1 |    10 |  10
        1 |    10 |  19
        1 |    60 |  70
(3 rows)

-- Generate some invalidations for the other hypertable
INSERT INTO measurements VALUES (20, 4, 23.7);
INSERT INTO measurements VALUES (30, 5, 23.8), (80, 3, 23.6);
-- Should now see invalidations for both hypertables
SELECT hypertable_id AS hyper_id,
       lowest_modified_value AS start,
       greatest_modified_value AS end
       FROM _timescaledb_catalog.continuous_aggs_hypertable_invalidation_log
       ORDER BY 1,2,3;
 hyper_id | start | end 
----------+-------+-----
        1 |    10 |  10
        1 |    10 |  19
        1 |    60 |  70
        2 |    20 |  20
        2 |    30 |  80
(5 rows)

-- First refresh a window where we don't have any invalidations. This
-- allows us to see only the copying of the invalidations to the per
-- cagg log without additional processing.
CALL refresh_continuous_aggregate('cond_10', 20, 60);
-- Invalidations should be moved from the hypertable invalidation log
-- to the continuous aggregate log, but only for the hypertable that
-- the refreshed aggregate belongs to:
SELECT hypertable_id AS hyper_id,
       lowest_modified_value AS start,
       greatest_modified_value AS end
       FROM _timescaledb_catalog.continuous_aggs_hypertable_invalidation_log
       ORDER BY 1,2,3;
 hyper_id | start | end 
----------+-------+-----
        2 |    20 |  20
        2 |    30 |  80
(2 rows)

SELECT materialization_id AS cagg_id,
       lowest_modified_value AS start,
       greatest_modified_value AS end
       FROM _timescaledb_catalog.continuous_aggs_materialization_invalidation_log
       ORDER BY 1,2,3;
 cagg_id | start | end 
---------+-------+-----
       3 |    10 |  10
       3 |    10 |  19
       3 |    60 |  70
       4 |    10 |  10
       4 |    10 |  19
       4 |    60 |  70
(6 rows)

-- Now add more invalidations to test a refresh that overlaps with them.
-- Entries that should be deleted:
INSERT INTO conditions VALUES (30, 1, 23.4), (59, 1, 23.4);
INSERT INTO conditions VALUES (20, 1, 23.4), (30, 1, 23.4);
-- Entries that should be cut to the right, leaving an invalidation to
-- the left of the refresh window:
INSERT INTO conditions VALUES (1, 4, 23.7), (25, 1, 23.4);
INSERT INTO conditions VALUES (19, 4, 23.7), (59, 1, 23.4);
-- Entries that should be cut to the left and right, leaving two
-- invalidation entries on each side of the refresh window:
INSERT INTO conditions VALUES (2, 2, 23.5), (60, 1, 23.4);
INSERT INTO conditions VALUES (3, 2, 23.5), (80, 1, 23.4);
-- Entries that should be cut to the left, leaving an invalidation to
-- the right of the refresh window:
INSERT INTO conditions VALUES (60, 3, 23.6), (90, 3, 23.6);
INSERT INTO conditions VALUES (20, 5, 23.8), (100, 3, 23.6);
-- New invalidations in the hypertable invalidation log:
SELECT hypertable_id AS hyper_id,
       lowest_modified_value AS start,
       greatest_modified_value AS end
       FROM _timescaledb_catalog.continuous_aggs_hypertable_invalidation_log
       ORDER BY 1,2,3;
 hyper_id | start | end 
----------+-------+-----
        1 |     1 |  25
        1 |     2 |  60
        1 |     3 |  80
        1 |    19 |  59
        1 |    20 |  30
        1 |    20 | 100
        1 |    30 |  59
        1 |    60 |  90
        2 |    20 |  20
        2 |    30 |  80
(10 rows)

-- But nothing has yet changed in the cagg invalidation log:
SELECT materialization_id AS cagg_id,
       lowest_modified_value AS start,
       greatest_modified_value AS end
       FROM _timescaledb_catalog.continuous_aggs_materialization_invalidation_log
       ORDER BY 1,2,3;
 cagg_id | start | end 
---------+-------+-----
       3 |    10 |  10
       3 |    10 |  19
       3 |    60 |  70
       4 |    10 |  10
       4 |    10 |  19
       4 |    60 |  70
(6 rows)

-- Refresh to process invalidations for daily temperature:
CALL refresh_continuous_aggregate('cond_10', 20, 60);
-- Invalidations should be moved from the hypertable invalidation log
-- to the continuous aggregate log.
SELECT hypertable_id AS hyper_id,
       lowest_modified_value AS start,
       greatest_modified_value AS end
       FROM _timescaledb_catalog.continuous_aggs_hypertable_invalidation_log
       ORDER BY 1,2,3;
 hyper_id | start | end 
----------+-------+-----
        2 |    20 |  20
        2 |    30 |  80
(2 rows)

-- Only the cond_10 cagg should have its entries cut:
SELECT materialization_id AS cagg_id,
       lowest_modified_value AS start,
       greatest_modified_value AS end
       FROM _timescaledb_catalog.continuous_aggs_materialization_invalidation_log
       ORDER BY 1,2,3;
 cagg_id | start | end 
---------+-------+-----
       3 |     1 |  19
       3 |     2 |  19
       3 |     3 |  19
       3 |    10 |  10
       3 |    10 |  19
       3 |    19 |  19
       3 |    60 |  60
       3 |    60 |  70
       3 |    60 |  80
       3 |    60 |  90
       3 |    60 | 100
       4 |     1 |  25
       4 |     2 |  60
       4 |     3 |  80
       4 |    10 |  10
       4 |    10 |  19
       4 |    19 |  59
       4 |    20 |  30
       4 |    20 | 100
       4 |    30 |  59
       4 |    60 |  70
       4 |    60 |  90
(22 rows)

-- Refresh also cond_20:
CALL refresh_continuous_aggregate('cond_20', 20, 60);
-- The cond_20 cagg should also have its entries cut:
SELECT materialization_id AS cagg_id,
       lowest_modified_value AS start,
       greatest_modified_value AS end
       FROM _timescaledb_catalog.continuous_aggs_materialization_invalidation_log
       ORDER BY 1,2,3;
 cagg_id | start | end 
---------+-------+-----
       3 |     1 |  19
       3 |     2 |  19
       3 |     3 |  19
       3 |    10 |  10
       3 |    10 |  19
       3 |    19 |  19
       3 |    60 |  60
       3 |    60 |  70
       3 |    60 |  80
       3 |    60 |  90
       3 |    60 | 100
       4 |     1 |  19
       4 |     2 |  19
       4 |     3 |  19
       4 |    10 |  10
       4 |    10 |  19
       4 |    19 |  19
       4 |    60 |  60
       4 |    60 |  70
       4 |    60 |  80
       4 |    60 |  90
       4 |    60 | 100
(22 rows)

