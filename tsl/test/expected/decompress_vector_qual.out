-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\c :TEST_DBNAME :ROLE_SUPERUSER
create table vectorqual(metric1 int8, ts timestamp, metric2 int8, device int8);
select create_hypertable('vectorqual', 'ts');
WARNING:  column type "timestamp without time zone" used for "ts" does not follow best practices
NOTICE:  adding not-null constraint to column "ts"
    create_hypertable    
-------------------------
 (1,public,vectorqual,t)
(1 row)

alter table vectorqual set (timescaledb.compress, timescaledb.compress_segmentby = 'device');
insert into vectorqual(ts, device, metric1, metric2) values ('2020-01-01 00:00:00', 1, 11, 12);
select count(compress_chunk(x, true)) from show_chunks('vectorqual') x;
 count 
-------
     1
(1 row)

alter table vectorqual drop column metric1;
insert into vectorqual(ts, device, metric2) values ('2021-01-01 00:00:00', 2, 22);
select count(compress_chunk(x, true)) from show_chunks('vectorqual') x;
NOTICE:  chunk "_hyper_1_1_chunk" is already compressed
 count 
-------
     2
(1 row)

alter table vectorqual add column metric3 int4 default 777;
insert into vectorqual(ts, device, metric2, metric3) values ('2022-01-01 00:00:00', 3, 32, 33);
select count(compress_chunk(x, true)) from show_chunks('vectorqual') x;
NOTICE:  chunk "_hyper_1_1_chunk" is already compressed
NOTICE:  chunk "_hyper_1_3_chunk" is already compressed
 count 
-------
     3
(1 row)

alter table vectorqual add column metric4 int8;
insert into vectorqual(ts, device, metric2, metric3, metric4) values ('2023-01-01 00:00:00', 4, 42, 43, 44);
select count(compress_chunk(x, true)) from show_chunks('vectorqual') x;
NOTICE:  chunk "_hyper_1_1_chunk" is already compressed
NOTICE:  chunk "_hyper_1_3_chunk" is already compressed
NOTICE:  chunk "_hyper_1_5_chunk" is already compressed
 count 
-------
     4
(1 row)

select * from vectorqual order by vectorqual;
            ts            | metric2 | device | metric3 | metric4 
--------------------------+---------+--------+---------+---------
 Wed Jan 01 00:00:00 2020 |      12 |      1 |     777 |        
 Fri Jan 01 00:00:00 2021 |      22 |      2 |     777 |        
 Sat Jan 01 00:00:00 2022 |      32 |      3 |      33 |        
 Sun Jan 01 00:00:00 2023 |      42 |      4 |      43 |      44
(4 rows)

set timescaledb.debug_require_vector_qual to 'only' /* all following quals must be vectorized */;
select count(*) from vectorqual where ts > '1999-01-01 00:00:00';
 count 
-------
     4
(1 row)

select count(*) from vectorqual where metric2 = 22;
 count 
-------
     1
(1 row)

select count(*) from vectorqual where 22 = metric2 /* commutators */;
 count 
-------
     1
(1 row)

select count(*) from vectorqual where metric3 = 33;
 count 
-------
     1
(1 row)

select count(*) from vectorqual where metric3 = 777 /* default value */;
 count 
-------
     2
(1 row)

select count(*) from vectorqual where metric4 = 44 /* column with default null */;
 count 
-------
     1
(1 row)

select count(*) from vectorqual where metric4 >= 0 /* nulls shouldn't pass the qual */;
 count 
-------
     1
(1 row)

set timescaledb.debug_require_vector_qual to 'forbid';
select count(*) from vectorqual where device = 1 /* can't apply vector ops to the segmentby column */;
 count 
-------
     1
(1 row)

-- Test columns that don't support bulk decompression.
alter table vectorqual add column tag text;
insert into vectorqual(ts, device, metric2, metric3, metric4, tag) values ('2025-01-01 00:00:00', 5, 52, 53, 54, 'tag5');
select count(compress_chunk(x, true)) from show_chunks('vectorqual') x;
NOTICE:  chunk "_hyper_1_1_chunk" is already compressed
NOTICE:  chunk "_hyper_1_3_chunk" is already compressed
NOTICE:  chunk "_hyper_1_5_chunk" is already compressed
NOTICE:  chunk "_hyper_1_7_chunk" is already compressed
 count 
-------
     5
(1 row)

set timescaledb.debug_require_vector_qual to 'only';
select tag from vectorqual where metric2 > 0;
 tag  
------
 
 
 
 
 tag5
(5 rows)

-- Can't vectorize parameterized join clauses for now.
set timescaledb.debug_require_vector_qual to 'forbid';
set enable_hashjoin to off;
set enable_mergejoin to off;
with values(x) as materialized(select distinct metric2 from vectorqual)
    select x, (select metric2 from vectorqual where metric2 = x) from values order by 1;
 x  | metric2 
----+---------
 12 |      12
 22 |      22
 32 |      32
 42 |      42
 52 |      52
(5 rows)

reset enable_hashjoin;
reset enable_mergejoin;
-- Can't vectorize initplan parameters either.
select count(*) from vectorqual where metric2
    = (select metric2 from vectorqual order by 1 limit 1);
 count 
-------
     1
(1 row)

-- Can vectorize clauses with query parameters.
set timescaledb.debug_require_vector_qual to 'only';
set plan_cache_mode to 'force_generic_plan';
prepare p as select count(*) from vectorqual where metric3 = $1;
execute p(33);
 count 
-------
     1
(1 row)

deallocate p;
-- Also try query parameter in combination with a stable function.
create function stable_identity(x anyelement) returns anyelement as $$ select x $$ language sql stable;
prepare p(int4) as select count(*) from vectorqual where metric3 = stable_identity($1);
execute p(33);
 count 
-------
     1
(1 row)

deallocate p;
reset plan_cache_mode;
-- Queries without aggregation.
set timescaledb.debug_require_vector_qual to 'only';
select * from vectorqual where ts > '2021-01-01 00:00:00' order by vectorqual;
            ts            | metric2 | device | metric3 | metric4 | tag  
--------------------------+---------+--------+---------+---------+------
 Sat Jan 01 00:00:00 2022 |      32 |      3 |      33 |         | 
 Sun Jan 01 00:00:00 2023 |      42 |      4 |      43 |      44 | 
 Wed Jan 01 00:00:00 2025 |      52 |      5 |      53 |      54 | tag5
(3 rows)

select * from vectorqual where metric4 >= 0 order by vectorqual;
            ts            | metric2 | device | metric3 | metric4 | tag  
--------------------------+---------+--------+---------+---------+------
 Sun Jan 01 00:00:00 2023 |      42 |      4 |      43 |      44 | 
 Wed Jan 01 00:00:00 2025 |      52 |      5 |      53 |      54 | tag5
(2 rows)

-- Constraints on columns not selected.
select metric4 from vectorqual where ts > '2021-01-01 00:00:00' order by 1;
 metric4 
---------
      44
      54
        
(3 rows)

-- ANDed constraints on multiple columns.
select * from vectorqual where ts > '2021-01-01 00:00:00' and metric3 > 40 order by vectorqual;
            ts            | metric2 | device | metric3 | metric4 | tag  
--------------------------+---------+--------+---------+---------+------
 Sun Jan 01 00:00:00 2023 |      42 |      4 |      43 |      44 | 
 Wed Jan 01 00:00:00 2025 |      52 |      5 |      53 |      54 | tag5
(2 rows)

-- ORed constrainst on multiple columns (not vectorized for now).
set timescaledb.debug_require_vector_qual to 'forbid';
select * from vectorqual where ts > '2021-01-01 00:00:00' or metric3 > 40 order by vectorqual;
            ts            | metric2 | device | metric3 | metric4 | tag  
--------------------------+---------+--------+---------+---------+------
 Wed Jan 01 00:00:00 2020 |      12 |      1 |     777 |         | 
 Fri Jan 01 00:00:00 2021 |      22 |      2 |     777 |         | 
 Sat Jan 01 00:00:00 2022 |      32 |      3 |      33 |         | 
 Sun Jan 01 00:00:00 2023 |      42 |      4 |      43 |      44 | 
 Wed Jan 01 00:00:00 2025 |      52 |      5 |      53 |      54 | tag5
(5 rows)

-- Test with unary operator.
create operator !! (function = 'bool', rightarg = int4);
select count(*) from vectorqual where !!metric3;
 count 
-------
     5
(1 row)

-- Custom operator on column that supports bulk decompression is not vectorized.
set timescaledb.debug_require_vector_qual to 'forbid';
create function int4eqq(int4, int4) returns bool as 'int4eq' language internal;
create operator === (function = 'int4eqq', rightarg = int4, leftarg = int4);
select count(*) from vectorqual where metric3 === 777;
 count 
-------
     2
(1 row)

select count(*) from vectorqual where metric3 === any(array[777, 888]);
 count 
-------
     2
(1 row)

-- It also doesn't have a commutator.
select count(*) from vectorqual where 777 === metric3;
 count 
-------
     2
(1 row)

-- NullTest is vectorized.
set timescaledb.debug_require_vector_qual to 'only';
select count(*) from vectorqual where metric4 is null;
 count 
-------
     3
(1 row)

select count(*) from vectorqual where metric4 is not null;
 count 
-------
     2
(1 row)

-- Can't vectorize conditions on system columns. Have to check this on a single
-- chunk, otherwise the whole-row var will be masked by ConvertRowType.
select show_chunks('vectorqual') chunk1 limit 1 \gset
set timescaledb.debug_require_vector_qual to 'forbid';
select count(*) from :chunk1 t where t is null;
 count 
-------
     0
(1 row)

select count(*) from :chunk1 t where t.* is null;
 count 
-------
     0
(1 row)

select count(*) from :chunk1 t where tableoid is null;
 count 
-------
     0
(1 row)

-- Scalar array operators are vectorized if the operator is vectorizable.
set timescaledb.debug_require_vector_qual to 'only';
select count(*) from vectorqual where metric3 = any(array[777, 888]); /* default value */
 count 
-------
     2
(1 row)

select count(*) from vectorqual where metric4 = any(array[44, 55]) /* default null */;
 count 
-------
     1
(1 row)

select count(*) from vectorqual where metric2 > any(array[-1, -2, -3]) /* any */;
 count 
-------
     5
(1 row)

select count(*) from vectorqual where metric2 > all(array[-1, -2, -3]) /* all */;
 count 
-------
     5
(1 row)

-- Also have to support null array elements, because they are impossible to
-- prevent in stable expressions.
set timescaledb.debug_require_vector_qual to 'only';
select count(*) from vectorqual where metric2 = any(array[null::int]) /* any with null element */;
 count 
-------
     0
(1 row)

select count(*) from vectorqual where metric2 = any(array[22, null]) /* any with null element */;
 count 
-------
     1
(1 row)

select count(*) from vectorqual where metric2 = any(array[null, 32]) /* any with null element */;
 count 
-------
     1
(1 row)

select count(*) from vectorqual where metric2 = any(array[22, null, 32]) /* any with null element */;
 count 
-------
     2
(1 row)

select count(*) from vectorqual where metric2 = all(array[null::int]) /* all with null element */;
 count 
-------
     0
(1 row)

select count(*) from vectorqual where metric2 = all(array[22, null]) /* all with null element */;
 count 
-------
     0
(1 row)

select count(*) from vectorqual where metric2 = all(array[null, 32]) /* all with null element */;
 count 
-------
     0
(1 row)

select count(*) from vectorqual where metric2 = all(array[22, null, 32]) /* all with null element */;
 count 
-------
     0
(1 row)

-- Check early exit.
reset timescaledb.debug_require_vector_qual;
create table singlebatch(like vectorqual);
select create_hypertable('singlebatch', 'ts');
WARNING:  column type "timestamp without time zone" used for "ts" does not follow best practices
    create_hypertable     
--------------------------
 (3,public,singlebatch,t)
(1 row)

alter table singlebatch set (timescaledb.compress);
insert into singlebatch select '2022-02-02 02:02:02', metric2, device, metric3, metric4, tag from vectorqual;
select count(compress_chunk(x, true)) from show_chunks('singlebatch') x;
 count 
-------
     1
(1 row)

set timescaledb.debug_require_vector_qual to 'only';
-- Uncomment to generate the test reference w/o the vector optimizations.
-- set timescaledb.enable_bulk_decompression to off;
-- set timescaledb.debug_require_vector_qual to 'forbid';
select count(*) from singlebatch where metric2 = any(array[0, 0, 0, 0, 22]);
 count 
-------
     1
(1 row)

select count(*) from singlebatch where metric2 = any(array[0, 22, 0, 0, 0]);
 count 
-------
     1
(1 row)

select count(*) from singlebatch where metric2 = any(array[0, 0, 0, 0, 0]);
 count 
-------
     0
(1 row)

select count(*) from singlebatch where metric2 != any(array[0, 0, 0, 0, 0]);
 count 
-------
     5
(1 row)

select count(*) from singlebatch where metric2 <= all(array[12, 12, 12, 12, 0]);
 count 
-------
     0
(1 row)

select count(*) from singlebatch where metric2 <= all(array[12, 0, 12, 12, 12]);
 count 
-------
     0
(1 row)

select count(*) from singlebatch where metric2 <= all(array[12, 12, 12, 12, 12]);
 count 
-------
     1
(1 row)

select count(*) from singlebatch where metric3 = 777 and metric2 = any(array[0, 0, 0, 0, 22]);
 count 
-------
     1
(1 row)

select count(*) from singlebatch where metric3 = 777 and metric2 = any(array[0, 22, 0, 0, 0]);
 count 
-------
     1
(1 row)

select count(*) from singlebatch where metric3 = 777 and metric2 = any(array[0, 0, 0, 0, 0]);
 count 
-------
     0
(1 row)

select count(*) from singlebatch where metric3 = 777 and metric2 != any(array[0, 0, 0, 0, 0]);
 count 
-------
     2
(1 row)

select count(*) from singlebatch where metric3 = 777 and metric2 <= all(array[12, 12, 12, 12, 0]);
 count 
-------
     0
(1 row)

select count(*) from singlebatch where metric3 = 777 and metric2 <= all(array[12, 0, 12, 12, 12]);
 count 
-------
     0
(1 row)

select count(*) from singlebatch where metric3 = 777 and metric2 <= all(array[12, 12, 12, 12, 12]);
 count 
-------
     1
(1 row)

select count(*) from singlebatch where metric2 = any(array[0, 0, 0, 0, 22]) and metric3 = 777;
 count 
-------
     1
(1 row)

select count(*) from singlebatch where metric2 = any(array[0, 22, 0, 0, 0]) and metric3 = 777;
 count 
-------
     1
(1 row)

select count(*) from singlebatch where metric2 = any(array[0, 0, 0, 0, 0]) and metric3 = 777;
 count 
-------
     0
(1 row)

select count(*) from singlebatch where metric2 != any(array[0, 0, 0, 0, 0]) and metric3 = 777;
 count 
-------
     2
(1 row)

select count(*) from singlebatch where metric2 <= all(array[12, 12, 12, 12, 0]) and metric3 = 777;
 count 
-------
     0
(1 row)

select count(*) from singlebatch where metric2 <= all(array[12, 0, 12, 12, 12]) and metric3 = 777;
 count 
-------
     0
(1 row)

select count(*) from singlebatch where metric2 <= all(array[12, 12, 12, 12, 12]) and metric3 = 777;
 count 
-------
     1
(1 row)

select count(*) from singlebatch where metric3 != 777 and metric2 = any(array[0, 0, 0, 0, 22]);
 count 
-------
     0
(1 row)

select count(*) from singlebatch where metric3 != 777 and metric2 = any(array[0, 22, 0, 0, 0]);
 count 
-------
     0
(1 row)

select count(*) from singlebatch where metric3 != 777 and metric2 = any(array[0, 0, 0, 0, 0]);
 count 
-------
     0
(1 row)

select count(*) from singlebatch where metric3 != 777 and metric2 != any(array[0, 0, 0, 0, 0]);
 count 
-------
     3
(1 row)

select count(*) from singlebatch where metric3 != 777 and metric2 <= all(array[12, 12, 12, 12, 0]);
 count 
-------
     0
(1 row)

select count(*) from singlebatch where metric3 != 777 and metric2 <= all(array[12, 0, 12, 12, 12]);
 count 
-------
     0
(1 row)

select count(*) from singlebatch where metric3 != 777 and metric2 <= all(array[12, 12, 12, 12, 12]);
 count 
-------
     0
(1 row)

select count(*) from singlebatch where metric2 = any(array[0, 0, 0, 0, 22]) and metric3 != 777;
 count 
-------
     0
(1 row)

select count(*) from singlebatch where metric2 = any(array[0, 22, 0, 0, 0]) and metric3 != 777;
 count 
-------
     0
(1 row)

select count(*) from singlebatch where metric2 = any(array[0, 0, 0, 0, 0]) and metric3 != 777;
 count 
-------
     0
(1 row)

select count(*) from singlebatch where metric2 != any(array[0, 0, 0, 0, 0]) and metric3 != 777;
 count 
-------
     3
(1 row)

select count(*) from singlebatch where metric2 <= all(array[12, 12, 12, 12, 0]) and metric3 != 777;
 count 
-------
     0
(1 row)

select count(*) from singlebatch where metric2 <= all(array[12, 0, 12, 12, 12]) and metric3 != 777;
 count 
-------
     0
(1 row)

select count(*) from singlebatch where metric2 <= all(array[12, 12, 12, 12, 12]) and metric3 != 777;
 count 
-------
     0
(1 row)

reset timescaledb.enable_bulk_decompression;
reset timescaledb.debug_require_vector_qual;
-- Comparison with other column not vectorized.
set timescaledb.debug_require_vector_qual to 'forbid';
select count(*) from vectorqual where metric3 = metric4;
 count 
-------
     0
(1 row)

select count(*) from vectorqual where metric3 = any(array[metric4]);
 count 
-------
     0
(1 row)

-- Vectorized filters also work if we have only stable functions on the right
-- side that can be evaluated to a constant at run time.
set timescaledb.debug_require_vector_qual to 'only';
select count(*) from vectorqual where ts > '2021-01-01 00:00:00'::timestamptz::timestamp;
 count 
-------
     3
(1 row)

select count(*) from vectorqual where ts > '2021-01-01 00:00:00'::timestamp - interval '1 day';
 count 
-------
     4
(1 row)

-- Expression that evaluates to Null.
select count(*) from vectorqual where ts > case when '2021-01-01'::timestamp < '2022-01-01'::timestamptz then null else '2021-01-01 00:00:00'::timestamp end;
 count 
-------
     0
(1 row)

select count(*) from vectorqual where ts < LOCALTIMESTAMP + '3 years'::interval;
 count 
-------
     5
(1 row)

-- This filter is not vectorized because the 'timestamp > timestamptz'
-- operator is stable, not immutable, because it uses the current session
-- timezone. We could transform it to something like
-- 'timestamp > timestamptz::timestamp' to allow our stable function evaluation
-- to handle this case, but we don't do it at the moment.
set timescaledb.debug_require_vector_qual to 'forbid';
select count(*) from vectorqual where ts > '2021-01-01 00:00:00'::timestamptz;
 count 
-------
     3
(1 row)

-- Can't vectorize comparison with a volatile function.
select count(*) from vectorqual where metric3 > random()::int - 100;
 count 
-------
     5
(1 row)

select count(*) from vectorqual where ts > case when random() < 10 then null else '2021-01-01 00:00:00'::timestamp end;
 count 
-------
     0
(1 row)

-- Test that the vectorized quals are disabled by disabling the bulk decompression.
set timescaledb.enable_bulk_decompression to off;
set timescaledb.debug_require_vector_qual to 'forbid';
select count(*) from vectorqual where metric4 > null;
 count 
-------
     0
(1 row)

set timescaledb.enable_bulk_decompression to on;
-- Test that the debug GUC works
\set ON_ERROR_STOP 0
set timescaledb.debug_require_vector_qual to 'forbid';
select count(*) from vectorqual where metric4 > 4;
ERROR:  debug: encountered vector quals when they are disabled
set timescaledb.debug_require_vector_qual to 'only';
select count(*) from vectorqual where metric3 === 4;
ERROR:  debug: encountered non-vector quals when they are disabled
\set ON_ERROR_STOP 1
-- Date columns
create table date_table(ts date);
select create_hypertable('date_table', 'ts');
NOTICE:  adding not-null constraint to column "ts"
    create_hypertable    
-------------------------
 (5,public,date_table,t)
(1 row)

alter table date_table set (timescaledb.compress);
insert into date_table values ('2021-01-01'), ('2021-01-02'),
    ('2021-01-03');
select count(compress_chunk(x, true)) from show_chunks('date_table') x;
 count 
-------
     1
(1 row)

set timescaledb.debug_require_vector_qual to 'only';
select * from date_table where ts >  '2021-01-02';
     ts     
------------
 01-03-2021
(1 row)

select * from date_table where ts >= '2021-01-02';
     ts     
------------
 01-03-2021
 01-02-2021
(2 rows)

select * from date_table where ts =  '2021-01-02';
     ts     
------------
 01-02-2021
(1 row)

select * from date_table where ts <= '2021-01-02';
     ts     
------------
 01-02-2021
 01-01-2021
(2 rows)

select * from date_table where ts <  '2021-01-02';
     ts     
------------
 01-01-2021
(1 row)

select * from date_table where ts <  CURRENT_DATE;
     ts     
------------
 01-03-2021
 01-02-2021
 01-01-2021
(3 rows)

