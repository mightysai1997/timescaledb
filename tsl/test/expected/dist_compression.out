-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
---------------------------------------------------
-- Test compression on a distributed hypertable
---------------------------------------------------
\c :TEST_DBNAME :ROLE_CLUSTER_SUPERUSER
\set DATA_NODE_1 :TEST_DBNAME _1
\set DATA_NODE_2 :TEST_DBNAME _2
\set DATA_NODE_3 :TEST_DBNAME _3
\ir include/remote_exec.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
CREATE SCHEMA IF NOT EXISTS test;
psql:include/remote_exec.sql:5: NOTICE:  schema "test" already exists, skipping
GRANT USAGE ON SCHEMA test TO PUBLIC;
CREATE OR REPLACE FUNCTION test.remote_exec(srv_name name[], command text)
RETURNS VOID
AS :TSL_MODULE_PATHNAME, 'ts_remote_exec'
LANGUAGE C;
SELECT (add_data_node (name, host => 'localhost', DATABASE => name)).*
FROM (VALUES (:'DATA_NODE_1'), (:'DATA_NODE_2'), (:'DATA_NODE_3')) v (name);
       node_name       |   host    | port  |       database        | node_created | database_created | extension_created 
-----------------------+-----------+-------+-----------------------+--------------+------------------+-------------------
 db_dist_compression_1 | localhost | 55432 | db_dist_compression_1 | t            | t                | t
 db_dist_compression_2 | localhost | 55432 | db_dist_compression_2 | t            | t                | t
 db_dist_compression_3 | localhost | 55432 | db_dist_compression_3 | t            | t                | t
(3 rows)

GRANT USAGE ON FOREIGN SERVER :DATA_NODE_1, :DATA_NODE_2, :DATA_NODE_3 TO :ROLE_1;
SET ROLE :ROLE_1;
CREATE TABLE compressed(time timestamptz, device int, temp float);
-- Replicate twice to see that compress_chunk compresses all replica chunks
SELECT create_distributed_hypertable('compressed', 'time', 'device', replication_factor => 2);
NOTICE:  adding not-null constraint to column "time"
 create_distributed_hypertable 
-------------------------------
 (1,public,compressed,t)
(1 row)

INSERT INTO compressed SELECT t, (abs(timestamp_hash(t::timestamp)) % 10) + 1, random()*80
FROM generate_series('2018-03-02 1:00'::TIMESTAMPTZ, '2018-03-04 1:00', '1 hour') t;
ALTER TABLE compressed SET (timescaledb.compress, timescaledb.compress_segmentby='device', timescaledb.compress_orderby = 'time DESC');
SELECT table_name, compression_state, compressed_hypertable_id
FROM _timescaledb_catalog.hypertable
ORDER BY 1;
 table_name | compression_state | compressed_hypertable_id 
------------+-------------------+--------------------------
 compressed |                 1 |                         
(1 row)

SELECT * FROM timescaledb_information.compression_settings order by attname;
 hypertable_schema | hypertable_name | attname | segmentby_column_index | orderby_column_index | orderby_asc | orderby_nullsfirst 
-------------------+-----------------+---------+------------------------+----------------------+-------------+--------------------
 public            | compressed      | device  |                      1 |                      |             | 
 public            | compressed      | time    |                        |                    1 | f           | t
(2 rows)

\x
SELECT * FROM _timescaledb_catalog.hypertable
WHERE table_name = 'compressed';
-[ RECORD 1 ]------------+-------------------------
id                       | 1
schema_name              | public
table_name               | compressed
associated_schema_name   | _timescaledb_internal
associated_table_prefix  | _dist_hyper_1
num_dimensions           | 2
chunk_sizing_func_schema | _timescaledb_internal
chunk_sizing_func_name   | calculate_chunk_interval
chunk_target_size        | 0
compression_state        | 1
compressed_hypertable_id | 
replication_factor       | 2

\x
SELECT test.remote_exec(NULL, $$
SELECT table_name, compressed_hypertable_id
FROM _timescaledb_catalog.hypertable
WHERE table_name = 'compressed';
$$);
NOTICE:  [db_dist_compression_1]: 
SELECT table_name, compressed_hypertable_id
FROM _timescaledb_catalog.hypertable
WHERE table_name = 'compressed'
NOTICE:  [db_dist_compression_1]:
table_name|compressed_hypertable_id
----------+------------------------
compressed|                       2
(1 row)


NOTICE:  [db_dist_compression_2]: 
SELECT table_name, compressed_hypertable_id
FROM _timescaledb_catalog.hypertable
WHERE table_name = 'compressed'
NOTICE:  [db_dist_compression_2]:
table_name|compressed_hypertable_id
----------+------------------------
compressed|                       2
(1 row)


NOTICE:  [db_dist_compression_3]: 
SELECT table_name, compressed_hypertable_id
FROM _timescaledb_catalog.hypertable
WHERE table_name = 'compressed'
NOTICE:  [db_dist_compression_3]:
table_name|compressed_hypertable_id
----------+------------------------
compressed|                       2
(1 row)


 remote_exec 
-------------
 
(1 row)

-- There should be no compressed chunks
SELECT * from chunk_compression_stats( 'compressed')
ORDER BY chunk_name, node_name;
     chunk_schema      |      chunk_name       | compression_status | before_compression_table_bytes | before_compression_index_bytes | before_compression_toast_bytes | before_compression_total_bytes | after_compression_table_bytes | after_compression_index_bytes | after_compression_toast_bytes | after_compression_total_bytes |       node_name       
-----------------------+-----------------------+--------------------+--------------------------------+--------------------------------+--------------------------------+--------------------------------+-------------------------------+-------------------------------+-------------------------------+-------------------------------+-----------------------
 _timescaledb_internal | _dist_hyper_1_1_chunk | Uncompressed       |                                |                                |                                |                                |                               |                               |                               |                               | db_dist_compression_1
 _timescaledb_internal | _dist_hyper_1_1_chunk | Uncompressed       |                                |                                |                                |                                |                               |                               |                               |                               | db_dist_compression_2
 _timescaledb_internal | _dist_hyper_1_2_chunk | Uncompressed       |                                |                                |                                |                                |                               |                               |                               |                               | db_dist_compression_2
 _timescaledb_internal | _dist_hyper_1_2_chunk | Uncompressed       |                                |                                |                                |                                |                               |                               |                               |                               | db_dist_compression_3
 _timescaledb_internal | _dist_hyper_1_3_chunk | Uncompressed       |                                |                                |                                |                                |                               |                               |                               |                               | db_dist_compression_1
 _timescaledb_internal | _dist_hyper_1_3_chunk | Uncompressed       |                                |                                |                                |                                |                               |                               |                               |                               | db_dist_compression_3
(6 rows)

-- Test that compression is rolled back on aborted transaction
BEGIN;
SELECT compress_chunk(chunk)
FROM show_chunks('compressed') AS chunk
ORDER BY chunk
LIMIT 1;
               compress_chunk                
---------------------------------------------
 _timescaledb_internal._dist_hyper_1_1_chunk
(1 row)

-- Data nodes should now report compressed chunks
SELECT * from chunk_compression_stats( 'compressed')
ORDER BY chunk_name, node_name;
     chunk_schema      |      chunk_name       | compression_status | before_compression_table_bytes | before_compression_index_bytes | before_compression_toast_bytes | before_compression_total_bytes | after_compression_table_bytes | after_compression_index_bytes | after_compression_toast_bytes | after_compression_total_bytes |       node_name       
-----------------------+-----------------------+--------------------+--------------------------------+--------------------------------+--------------------------------+--------------------------------+-------------------------------+-------------------------------+-------------------------------+-------------------------------+-----------------------
 _timescaledb_internal | _dist_hyper_1_1_chunk | Compressed         |                           8192 |                          32768 |                              0 |                          40960 |                          8192 |                         16384 |                          8192 |                         32768 | db_dist_compression_1
 _timescaledb_internal | _dist_hyper_1_1_chunk | Compressed         |                           8192 |                          32768 |                              0 |                          40960 |                          8192 |                         16384 |                          8192 |                         32768 | db_dist_compression_2
 _timescaledb_internal | _dist_hyper_1_2_chunk | Uncompressed       |                                |                                |                                |                                |                               |                               |                               |                               | db_dist_compression_2
 _timescaledb_internal | _dist_hyper_1_2_chunk | Uncompressed       |                                |                                |                                |                                |                               |                               |                               |                               | db_dist_compression_3
 _timescaledb_internal | _dist_hyper_1_3_chunk | Uncompressed       |                                |                                |                                |                                |                               |                               |                               |                               | db_dist_compression_1
 _timescaledb_internal | _dist_hyper_1_3_chunk | Uncompressed       |                                |                                |                                |                                |                               |                               |                               |                               | db_dist_compression_3
(6 rows)

-- Abort the transaction
ROLLBACK;
-- No compressed chunks since we rolled back
SELECT * from chunk_compression_stats( 'compressed')
ORDER BY chunk_name, node_name;
     chunk_schema      |      chunk_name       | compression_status | before_compression_table_bytes | before_compression_index_bytes | before_compression_toast_bytes | before_compression_total_bytes | after_compression_table_bytes | after_compression_index_bytes | after_compression_toast_bytes | after_compression_total_bytes |       node_name       
-----------------------+-----------------------+--------------------+--------------------------------+--------------------------------+--------------------------------+--------------------------------+-------------------------------+-------------------------------+-------------------------------+-------------------------------+-----------------------
 _timescaledb_internal | _dist_hyper_1_1_chunk | Uncompressed       |                                |                                |                                |                                |                               |                               |                               |                               | db_dist_compression_1
 _timescaledb_internal | _dist_hyper_1_1_chunk | Uncompressed       |                                |                                |                                |                                |                               |                               |                               |                               | db_dist_compression_2
 _timescaledb_internal | _dist_hyper_1_2_chunk | Uncompressed       |                                |                                |                                |                                |                               |                               |                               |                               | db_dist_compression_2
 _timescaledb_internal | _dist_hyper_1_2_chunk | Uncompressed       |                                |                                |                                |                                |                               |                               |                               |                               | db_dist_compression_3
 _timescaledb_internal | _dist_hyper_1_3_chunk | Uncompressed       |                                |                                |                                |                                |                               |                               |                               |                               | db_dist_compression_1
 _timescaledb_internal | _dist_hyper_1_3_chunk | Uncompressed       |                                |                                |                                |                                |                               |                               |                               |                               | db_dist_compression_3
(6 rows)

-- Compress for real this time
SELECT compress_chunk(chunk)
FROM show_chunks('compressed') AS chunk
ORDER BY chunk
LIMIT 1;
               compress_chunk                
---------------------------------------------
 _timescaledb_internal._dist_hyper_1_1_chunk
(1 row)

-- Check that one chunk, and its replica, is compressed
SELECT * from chunk_compression_stats( 'compressed')
ORDER BY chunk_name, node_name;
     chunk_schema      |      chunk_name       | compression_status | before_compression_table_bytes | before_compression_index_bytes | before_compression_toast_bytes | before_compression_total_bytes | after_compression_table_bytes | after_compression_index_bytes | after_compression_toast_bytes | after_compression_total_bytes |       node_name       
-----------------------+-----------------------+--------------------+--------------------------------+--------------------------------+--------------------------------+--------------------------------+-------------------------------+-------------------------------+-------------------------------+-------------------------------+-----------------------
 _timescaledb_internal | _dist_hyper_1_1_chunk | Compressed         |                           8192 |                          32768 |                              0 |                          40960 |                          8192 |                         16384 |                          8192 |                         32768 | db_dist_compression_1
 _timescaledb_internal | _dist_hyper_1_1_chunk | Compressed         |                           8192 |                          32768 |                              0 |                          40960 |                          8192 |                         16384 |                          8192 |                         32768 | db_dist_compression_2
 _timescaledb_internal | _dist_hyper_1_2_chunk | Uncompressed       |                                |                                |                                |                                |                               |                               |                               |                               | db_dist_compression_2
 _timescaledb_internal | _dist_hyper_1_2_chunk | Uncompressed       |                                |                                |                                |                                |                               |                               |                               |                               | db_dist_compression_3
 _timescaledb_internal | _dist_hyper_1_3_chunk | Uncompressed       |                                |                                |                                |                                |                               |                               |                               |                               | db_dist_compression_1
 _timescaledb_internal | _dist_hyper_1_3_chunk | Uncompressed       |                                |                                |                                |                                |                               |                               |                               |                               | db_dist_compression_3
(6 rows)

select * from hypertable_compression_stats('compressed'); 
 total_chunks | number_compressed_chunks | before_compression_table_bytes | before_compression_index_bytes | before_compression_toast_bytes | before_compression_total_bytes | after_compression_table_bytes | after_compression_index_bytes | after_compression_toast_bytes | after_compression_total_bytes |       node_name       
--------------+--------------------------+--------------------------------+--------------------------------+--------------------------------+--------------------------------+-------------------------------+-------------------------------+-------------------------------+-------------------------------+-----------------------
            2 |                        1 |                           8192 |                          32768 |                              0 |                          40960 |                          8192 |                         16384 |                          8192 |                         32768 | db_dist_compression_1
            2 |                        0 |                                |                                |                                |                                |                               |                               |                               |                               | db_dist_compression_3
            2 |                        1 |                           8192 |                          32768 |                              0 |                          40960 |                          8192 |                         16384 |                          8192 |                         32768 | db_dist_compression_2
(3 rows)

--- Decompress the chunk and replica
SELECT decompress_chunk(chunk)
FROM show_chunks('compressed') AS chunk
ORDER BY chunk
LIMIT 1;
              decompress_chunk               
---------------------------------------------
 _timescaledb_internal._dist_hyper_1_1_chunk
(1 row)

-- Compress odd numbered chunks
SELECT compress_chunk(chunk) FROM
(
  SELECT *, row_number() OVER () AS rownum
  FROM show_chunks('compressed') AS chunk
  ORDER BY chunk
) AS t
WHERE rownum % 2 = 1;
               compress_chunk                
---------------------------------------------
 _timescaledb_internal._dist_hyper_1_1_chunk
 _timescaledb_internal._dist_hyper_1_3_chunk
(2 rows)

SELECT * from chunk_compression_stats('compressed')
ORDER BY chunk_name, node_name;
     chunk_schema      |      chunk_name       | compression_status | before_compression_table_bytes | before_compression_index_bytes | before_compression_toast_bytes | before_compression_total_bytes | after_compression_table_bytes | after_compression_index_bytes | after_compression_toast_bytes | after_compression_total_bytes |       node_name       
-----------------------+-----------------------+--------------------+--------------------------------+--------------------------------+--------------------------------+--------------------------------+-------------------------------+-------------------------------+-------------------------------+-------------------------------+-----------------------
 _timescaledb_internal | _dist_hyper_1_1_chunk | Compressed         |                           8192 |                          32768 |                              0 |                          40960 |                          8192 |                         16384 |                          8192 |                         32768 | db_dist_compression_1
 _timescaledb_internal | _dist_hyper_1_1_chunk | Compressed         |                           8192 |                          32768 |                              0 |                          40960 |                          8192 |                         16384 |                          8192 |                         32768 | db_dist_compression_2
 _timescaledb_internal | _dist_hyper_1_2_chunk | Uncompressed       |                                |                                |                                |                                |                               |                               |                               |                               | db_dist_compression_2
 _timescaledb_internal | _dist_hyper_1_2_chunk | Uncompressed       |                                |                                |                                |                                |                               |                               |                               |                               | db_dist_compression_3
 _timescaledb_internal | _dist_hyper_1_3_chunk | Compressed         |                           8192 |                          32768 |                              0 |                          40960 |                          8192 |                         16384 |                          8192 |                         32768 | db_dist_compression_1
 _timescaledb_internal | _dist_hyper_1_3_chunk | Compressed         |                           8192 |                          32768 |                              0 |                          40960 |                          8192 |                         16384 |                          8192 |                         32768 | db_dist_compression_3
(6 rows)

-- Compress twice to notice idempotent operation
SELECT compress_chunk(chunk, if_not_compressed => true)
FROM show_chunks('compressed') AS chunk
ORDER BY chunk;
               compress_chunk                
---------------------------------------------
 _timescaledb_internal._dist_hyper_1_1_chunk
 _timescaledb_internal._dist_hyper_1_2_chunk
 _timescaledb_internal._dist_hyper_1_3_chunk
(3 rows)

-- Compress again to verify errors are ignored
SELECT compress_chunk(chunk, if_not_compressed => true)
FROM show_chunks('compressed') AS chunk
ORDER BY chunk;
               compress_chunk                
---------------------------------------------
 _timescaledb_internal._dist_hyper_1_1_chunk
 _timescaledb_internal._dist_hyper_1_2_chunk
 _timescaledb_internal._dist_hyper_1_3_chunk
(3 rows)

-- There should be no uncompressed chunks
SELECT * from chunk_compression_stats('compressed')
ORDER BY chunk_name, node_name;
     chunk_schema      |      chunk_name       | compression_status | before_compression_table_bytes | before_compression_index_bytes | before_compression_toast_bytes | before_compression_total_bytes | after_compression_table_bytes | after_compression_index_bytes | after_compression_toast_bytes | after_compression_total_bytes |       node_name       
-----------------------+-----------------------+--------------------+--------------------------------+--------------------------------+--------------------------------+--------------------------------+-------------------------------+-------------------------------+-------------------------------+-------------------------------+-----------------------
 _timescaledb_internal | _dist_hyper_1_1_chunk | Compressed         |                           8192 |                          32768 |                              0 |                          40960 |                          8192 |                         16384 |                          8192 |                         32768 | db_dist_compression_1
 _timescaledb_internal | _dist_hyper_1_1_chunk | Compressed         |                           8192 |                          32768 |                              0 |                          40960 |                          8192 |                         16384 |                          8192 |                         32768 | db_dist_compression_2
 _timescaledb_internal | _dist_hyper_1_2_chunk | Compressed         |                           8192 |                          32768 |                              0 |                          40960 |                          8192 |                         16384 |                          8192 |                         32768 | db_dist_compression_2
 _timescaledb_internal | _dist_hyper_1_2_chunk | Compressed         |                           8192 |                          32768 |                              0 |                          40960 |                          8192 |                         16384 |                          8192 |                         32768 | db_dist_compression_3
 _timescaledb_internal | _dist_hyper_1_3_chunk | Compressed         |                           8192 |                          32768 |                              0 |                          40960 |                          8192 |                         16384 |                          8192 |                         32768 | db_dist_compression_1
 _timescaledb_internal | _dist_hyper_1_3_chunk | Compressed         |                           8192 |                          32768 |                              0 |                          40960 |                          8192 |                         16384 |                          8192 |                         32768 | db_dist_compression_3
(6 rows)

SELECT test.remote_exec(NULL, $$
SELECT * FROM _timescaledb_catalog.chunk ORDER BY id;
$$);
NOTICE:  [db_dist_compression_1]: 
SELECT * FROM _timescaledb_catalog.chunk ORDER BY id
NOTICE:  [db_dist_compression_1]:
id|hypertable_id|schema_name          |table_name              |compressed_chunk_id|dropped|status
--+-------------+---------------------+------------------------+-------------------+-------+------
 1|            1|_timescaledb_internal|_dist_hyper_1_1_chunk   |                  5|f      |     1
 2|            1|_timescaledb_internal|_dist_hyper_1_3_chunk   |                  6|f      |     1
 5|            2|_timescaledb_internal|compress_hyper_2_5_chunk|                   |f      |     0
 6|            2|_timescaledb_internal|compress_hyper_2_6_chunk|                   |f      |     0
(4 rows)


NOTICE:  [db_dist_compression_2]: 
SELECT * FROM _timescaledb_catalog.chunk ORDER BY id
NOTICE:  [db_dist_compression_2]:
id|hypertable_id|schema_name          |table_name              |compressed_chunk_id|dropped|status
--+-------------+---------------------+------------------------+-------------------+-------+------
 1|            1|_timescaledb_internal|_dist_hyper_1_1_chunk   |                  5|f      |     1
 2|            1|_timescaledb_internal|_dist_hyper_1_2_chunk   |                  6|f      |     1
 5|            2|_timescaledb_internal|compress_hyper_2_5_chunk|                   |f      |     0
 6|            2|_timescaledb_internal|compress_hyper_2_6_chunk|                   |f      |     0
(4 rows)


NOTICE:  [db_dist_compression_3]: 
SELECT * FROM _timescaledb_catalog.chunk ORDER BY id
NOTICE:  [db_dist_compression_3]:
id|hypertable_id|schema_name          |table_name              |compressed_chunk_id|dropped|status
--+-------------+---------------------+------------------------+-------------------+-------+------
 1|            1|_timescaledb_internal|_dist_hyper_1_2_chunk   |                  4|f      |     1
 2|            1|_timescaledb_internal|_dist_hyper_1_3_chunk   |                  3|f      |     1
 3|            2|_timescaledb_internal|compress_hyper_2_3_chunk|                   |f      |     0
 4|            2|_timescaledb_internal|compress_hyper_2_4_chunk|                   |f      |     0
(4 rows)


 remote_exec 
-------------
 
(1 row)

-- Decompress the chunks and replicas
SELECT decompress_chunk(chunk)
FROM show_chunks('compressed') AS chunk
ORDER BY chunk;
              decompress_chunk               
---------------------------------------------
 _timescaledb_internal._dist_hyper_1_1_chunk
 _timescaledb_internal._dist_hyper_1_2_chunk
 _timescaledb_internal._dist_hyper_1_3_chunk
(3 rows)

-- Should now be decompressed
SELECT * from chunk_compression_stats('compressed')
ORDER BY chunk_name, node_name;
     chunk_schema      |      chunk_name       | compression_status | before_compression_table_bytes | before_compression_index_bytes | before_compression_toast_bytes | before_compression_total_bytes | after_compression_table_bytes | after_compression_index_bytes | after_compression_toast_bytes | after_compression_total_bytes |       node_name       
-----------------------+-----------------------+--------------------+--------------------------------+--------------------------------+--------------------------------+--------------------------------+-------------------------------+-------------------------------+-------------------------------+-------------------------------+-----------------------
 _timescaledb_internal | _dist_hyper_1_1_chunk | Uncompressed       |                                |                                |                                |                                |                               |                               |                               |                               | db_dist_compression_1
 _timescaledb_internal | _dist_hyper_1_1_chunk | Uncompressed       |                                |                                |                                |                                |                               |                               |                               |                               | db_dist_compression_2
 _timescaledb_internal | _dist_hyper_1_2_chunk | Uncompressed       |                                |                                |                                |                                |                               |                               |                               |                               | db_dist_compression_2
 _timescaledb_internal | _dist_hyper_1_2_chunk | Uncompressed       |                                |                                |                                |                                |                               |                               |                               |                               | db_dist_compression_3
 _timescaledb_internal | _dist_hyper_1_3_chunk | Uncompressed       |                                |                                |                                |                                |                               |                               |                               |                               | db_dist_compression_1
 _timescaledb_internal | _dist_hyper_1_3_chunk | Uncompressed       |                                |                                |                                |                                |                               |                               |                               |                               | db_dist_compression_3
(6 rows)

-- Decompress twice to generate NOTICE that the chunk is already decompressed
SELECT decompress_chunk(chunk, if_compressed => true)
FROM show_chunks('compressed') AS chunk
ORDER BY chunk
LIMIT 1;
NOTICE:  chunk "_dist_hyper_1_1_chunk" is not compressed
 decompress_chunk 
------------------
 
(1 row)

\x
SELECT * FROM timescaledb_information.hypertables
WHERE hypertable_name = 'compressed';
-[ RECORD 1 ]-------+--------------------------------------------------------------------
hypertable_schema   | public
hypertable_name     | compressed
owner               | test_role_1
num_dimensions      | 2
num_chunks          | 3
compression_enabled | t
is_distributed      | t
replication_factor  | 2
data_nodes          | {db_dist_compression_1,db_dist_compression_2,db_dist_compression_3}
tablespaces         | 

SELECT * from timescaledb_information.chunks 
ORDER BY hypertable_name, chunk_name;
-[ RECORD 1 ]----------+----------------------------------------------
hypertable_schema      | public
hypertable_name        | compressed
chunk_schema           | _timescaledb_internal
chunk_name             | _dist_hyper_1_1_chunk
primary_dimension      | time
primary_dimension_type | timestamp with time zone
range_start            | Wed Feb 28 16:00:00 2018 PST
range_end              | Wed Mar 07 16:00:00 2018 PST
range_start_integer    | 
range_end_integer      | 
is_compressed          | 
chunk_tablespace       | 
data_nodes             | {db_dist_compression_1,db_dist_compression_2}
-[ RECORD 2 ]----------+----------------------------------------------
hypertable_schema      | public
hypertable_name        | compressed
chunk_schema           | _timescaledb_internal
chunk_name             | _dist_hyper_1_2_chunk
primary_dimension      | time
primary_dimension_type | timestamp with time zone
range_start            | Wed Feb 28 16:00:00 2018 PST
range_end              | Wed Mar 07 16:00:00 2018 PST
range_start_integer    | 
range_end_integer      | 
is_compressed          | 
chunk_tablespace       | 
data_nodes             | {db_dist_compression_2,db_dist_compression_3}
-[ RECORD 3 ]----------+----------------------------------------------
hypertable_schema      | public
hypertable_name        | compressed
chunk_schema           | _timescaledb_internal
chunk_name             | _dist_hyper_1_3_chunk
primary_dimension      | time
primary_dimension_type | timestamp with time zone
range_start            | Wed Feb 28 16:00:00 2018 PST
range_end              | Wed Mar 07 16:00:00 2018 PST
range_start_integer    | 
range_end_integer      | 
is_compressed          | 
chunk_tablespace       | 
data_nodes             | {db_dist_compression_1,db_dist_compression_3}

SELECT * from timescaledb_information.dimensions 
ORDER BY hypertable_name, dimension_number;
-[ RECORD 1 ]-----+-------------------------
hypertable_schema | public
hypertable_name   | compressed
dimension_number  | 1
column_name       | time
column_type       | timestamp with time zone
dimension_type    | Time
time_interval     | @ 7 days
integer_interval  | 
integer_now_func  | 
num_partitions    | 
-[ RECORD 2 ]-----+-------------------------
hypertable_schema | public
hypertable_name   | compressed
dimension_number  | 2
column_name       | device
column_type       | integer
dimension_type    | Space
time_interval     | 
integer_interval  | 
integer_now_func  | 
num_partitions    | 3

\x
SELECT * FROM chunks_detailed_size('compressed'::regclass) 
ORDER BY chunk_name, node_name;
     chunk_schema      |      chunk_name       | table_bytes | index_bytes | toast_bytes | total_bytes |       node_name       
-----------------------+-----------------------+-------------+-------------+-------------+-------------+-----------------------
 _timescaledb_internal | _dist_hyper_1_1_chunk |        8192 |       32768 |           0 |       40960 | db_dist_compression_1
 _timescaledb_internal | _dist_hyper_1_1_chunk |        8192 |       32768 |           0 |       40960 | db_dist_compression_2
 _timescaledb_internal | _dist_hyper_1_2_chunk |        8192 |       32768 |           0 |       40960 | db_dist_compression_2
 _timescaledb_internal | _dist_hyper_1_2_chunk |        8192 |       32768 |           0 |       40960 | db_dist_compression_3
 _timescaledb_internal | _dist_hyper_1_3_chunk |        8192 |       32768 |           0 |       40960 | db_dist_compression_1
 _timescaledb_internal | _dist_hyper_1_3_chunk |        8192 |       32768 |           0 |       40960 | db_dist_compression_3
(6 rows)

SELECT * FROM hypertable_detailed_size('compressed'::regclass) ORDER BY node_name;
 table_bytes | index_bytes | toast_bytes | total_bytes |       node_name       
-------------+-------------+-------------+-------------+-----------------------
       16384 |       81920 |           0 |       98304 | db_dist_compression_1
       16384 |       81920 |           0 |       98304 | db_dist_compression_2
       16384 |       81920 |           0 |       98304 | db_dist_compression_3
           0 |       16384 |           0 |       16384 | 
(4 rows)

-- Disable compression on distributed table tests
ALTER TABLE compressed SET (timescaledb.compress = false);
SELECT table_name, compression_state, compressed_hypertable_id
FROM _timescaledb_catalog.hypertable
ORDER BY 1;
 table_name | compression_state | compressed_hypertable_id 
------------+-------------------+--------------------------
 compressed |                 0 |                         
(1 row)

SELECT * FROM timescaledb_information.compression_settings order by attname;
 hypertable_schema | hypertable_name | attname | segmentby_column_index | orderby_column_index | orderby_asc | orderby_nullsfirst 
-------------------+-----------------+---------+------------------------+----------------------+-------------+--------------------
(0 rows)

--Now re-enable compression
ALTER TABLE compressed SET (timescaledb.compress, timescaledb.compress_segmentby='device');
SELECT table_name, compression_state, compressed_hypertable_id
FROM _timescaledb_catalog.hypertable
ORDER BY 1;
 table_name | compression_state | compressed_hypertable_id 
------------+-------------------+--------------------------
 compressed |                 1 |                         
(1 row)

SELECT * FROM timescaledb_information.compression_settings order by attname;
 hypertable_schema | hypertable_name | attname | segmentby_column_index | orderby_column_index | orderby_asc | orderby_nullsfirst 
-------------------+-----------------+---------+------------------------+----------------------+-------------+--------------------
 public            | compressed      | device  |                      1 |                      |             | 
 public            | compressed      | time    |                        |                    1 | f           | t
(2 rows)

SELECT compress_chunk(chunk, if_not_compressed => true)
FROM show_chunks('compressed') AS chunk
ORDER BY chunk
LIMIT 1;
               compress_chunk                
---------------------------------------------
 _timescaledb_internal._dist_hyper_1_1_chunk
(1 row)

SELECT chunk_name, node_name, compression_status
FROM chunk_compression_stats('compressed')
ORDER BY 1, 2;
      chunk_name       |       node_name       | compression_status 
-----------------------+-----------------------+--------------------
 _dist_hyper_1_1_chunk | db_dist_compression_1 | Compressed
 _dist_hyper_1_1_chunk | db_dist_compression_2 | Compressed
 _dist_hyper_1_2_chunk | db_dist_compression_2 | Uncompressed
 _dist_hyper_1_2_chunk | db_dist_compression_3 | Uncompressed
 _dist_hyper_1_3_chunk | db_dist_compression_1 | Uncompressed
 _dist_hyper_1_3_chunk | db_dist_compression_3 | Uncompressed
(6 rows)

-- ALTER TABLE on distributed compressed hypertable
ALTER TABLE compressed ADD COLUMN new_coli integer;
ALTER TABLE compressed ADD COLUMN new_colv varchar(30);
SELECT * FROM _timescaledb_catalog.hypertable_compression
ORDER BY attname;
 hypertable_id | attname  | compression_algorithm_id | segmentby_column_index | orderby_column_index | orderby_asc | orderby_nullsfirst 
---------------+----------+--------------------------+------------------------+----------------------+-------------+--------------------
             1 | device   |                        0 |                      1 |                      |             | 
             1 | new_coli |                        4 |                        |                      |             | 
             1 | new_colv |                        2 |                        |                      |             | 
             1 | temp     |                        3 |                        |                      |             | 
             1 | time     |                        4 |                        |                    1 | f           | t
(5 rows)

SELECT count(*) from compressed where new_coli is not null;
 count 
-------
     0
(1 row)

--insert data into new chunk  
INSERT INTO compressed 
SELECT '2019-08-01 00:00',  100, 100, 1, 'newcolv' ;
SELECT COUNT(*) AS count_compressed
FROM
(
SELECT compress_chunk(chunk.schema_name|| '.' || chunk.table_name, true)
FROM _timescaledb_catalog.chunk chunk
INNER JOIN _timescaledb_catalog.hypertable hypertable ON (chunk.hypertable_id = hypertable.id)
WHERE hypertable.table_name like 'compressed' and chunk.compressed_chunk_id IS NULL ORDER BY chunk.id
)
AS sub;
 count_compressed 
------------------
                4
(1 row)

SELECT * from compressed where new_coli is not null;
             time             | device | temp | new_coli | new_colv 
------------------------------+--------+------+----------+----------
 Thu Aug 01 00:00:00 2019 PDT |    100 |  100 |        1 | newcolv
(1 row)

-- ALTER TABLE rename column does not work on distributed hypertables
\set ON_ERROR_STOP 0
ALTER TABLE compressed RENAME new_coli TO new_intcol  ;
ERROR:  operation not supported on distributed hypertable
ALTER TABLE compressed RENAME device TO device_id  ;
ERROR:  operation not supported on distributed hypertable
\set ON_ERROR_STOP 1
SELECT * FROM test.remote_exec( NULL, 
    $$ SELECT * FROM _timescaledb_catalog.hypertable_compression
       WHERE attname = 'device' OR attname = 'new_coli'  and 
       hypertable_id = (SELECT id from _timescaledb_catalog.hypertable
                       WHERE table_name = 'compressed' ) ORDER BY attname; $$ );
NOTICE:  [db_dist_compression_1]:  SELECT * FROM _timescaledb_catalog.hypertable_compression
       WHERE attname = 'device' OR attname = 'new_coli'  and 
       hypertable_id = (SELECT id from _timescaledb_catalog.hypertable
                       WHERE table_name = 'compressed' ) ORDER BY attname
NOTICE:  [db_dist_compression_1]:
hypertable_id|attname |compression_algorithm_id|segmentby_column_index|orderby_column_index|orderby_asc|orderby_nullsfirst
-------------+--------+------------------------+----------------------+--------------------+-----------+------------------
            1|device  |                       0|                     1|                    |           |                  
            1|new_coli|                       4|                      |                    |           |                  
(2 rows)


NOTICE:  [db_dist_compression_2]:  SELECT * FROM _timescaledb_catalog.hypertable_compression
       WHERE attname = 'device' OR attname = 'new_coli'  and 
       hypertable_id = (SELECT id from _timescaledb_catalog.hypertable
                       WHERE table_name = 'compressed' ) ORDER BY attname
NOTICE:  [db_dist_compression_2]:
hypertable_id|attname |compression_algorithm_id|segmentby_column_index|orderby_column_index|orderby_asc|orderby_nullsfirst
-------------+--------+------------------------+----------------------+--------------------+-----------+------------------
            1|device  |                       0|                     1|                    |           |                  
            1|new_coli|                       4|                      |                    |           |                  
(2 rows)


NOTICE:  [db_dist_compression_3]:  SELECT * FROM _timescaledb_catalog.hypertable_compression
       WHERE attname = 'device' OR attname = 'new_coli'  and 
       hypertable_id = (SELECT id from _timescaledb_catalog.hypertable
                       WHERE table_name = 'compressed' ) ORDER BY attname
NOTICE:  [db_dist_compression_3]:
hypertable_id|attname |compression_algorithm_id|segmentby_column_index|orderby_column_index|orderby_asc|orderby_nullsfirst
-------------+--------+------------------------+----------------------+--------------------+-----------+------------------
            1|device  |                       0|                     1|                    |           |                  
            1|new_coli|                       4|                      |                    |           |                  
(2 rows)


 remote_exec 
-------------
 
(1 row)

-- TEST insert data into compressed chunk
INSERT INTO compressed 
SELECT '2019-08-01 01:00',  300, 300, 3, 'newcolv' ;
SELECT * from compressed where new_coli = 3;
             time             | device | temp | new_coli | new_colv 
------------------------------+--------+------+----------+----------
 Thu Aug 01 01:00:00 2019 PDT |    300 |  300 |        3 | newcolv
(1 row)

-- We're done with the table, so drop it.
DROP TABLE IF EXISTS compressed CASCADE;
------------------------------------------------------
-- Test compression policy on a distributed hypertable
------------------------------------------------------
CREATE TABLE conditions (
      time        TIMESTAMPTZ       NOT NULL,
      location    TEXT              NOT NULL,
      location2    char(10)              NOT NULL,
      temperature DOUBLE PRECISION  NULL,
      humidity    DOUBLE PRECISION  NULL
    );
SELECT create_distributed_hypertable('conditions', 'time', chunk_time_interval => '31days'::interval, replication_factor => 2);
 create_distributed_hypertable 
-------------------------------
 (2,public,conditions,t)
(1 row)

--TEST 1--
--cannot set policy without enabling compression --
\set ON_ERROR_STOP 0
select add_compression_policy('conditions', '60d'::interval);
ERROR:  compression not enabled on hypertable "conditions"
\set ON_ERROR_STOP 1
-- TEST2 --
--add a policy to compress chunks --
alter table conditions set (timescaledb.compress, timescaledb.compress_segmentby = 'location', timescaledb.compress_orderby = 'time');
insert into conditions
select generate_series('2018-12-01 00:00'::timestamp, '2018-12-31 00:00'::timestamp, '1 day'), 'POR', 'klick', 55, 75;
select add_compression_policy('conditions', '60d'::interval) AS compressjob_id
\gset
select * from _timescaledb_config.bgw_job where id = :compressjob_id;
  id  |     application_name      | schedule_interval  | max_runtime | max_retries | retry_period |      proc_schema      |     proc_name      |    owner    | scheduled | hypertable_id |                       config                        
------+---------------------------+--------------------+-------------+-------------+--------------+-----------------------+--------------------+-------------+-----------+---------------+-----------------------------------------------------
 1000 | Compression Policy [1000] | @ 15 days 12 hours | @ 0         |          -1 | @ 1 hour     | _timescaledb_internal | policy_compression | test_role_1 | t         |             2 | {"hypertable_id": 2, "compress_after": "@ 60 days"}
(1 row)

select * from alter_job(:compressjob_id, schedule_interval=>'1s');
 job_id | schedule_interval | max_runtime | max_retries | retry_period | scheduled |                       config                        | next_start 
--------+-------------------+-------------+-------------+--------------+-----------+-----------------------------------------------------+------------
   1000 | @ 1 sec           | @ 0         |          -1 | @ 1 hour     | t         | {"hypertable_id": 2, "compress_after": "@ 60 days"} | -infinity
(1 row)

select * from _timescaledb_config.bgw_job where id >= 1000 ORDER BY id;
  id  |     application_name      | schedule_interval | max_runtime | max_retries | retry_period |      proc_schema      |     proc_name      |    owner    | scheduled | hypertable_id |                       config                        
------+---------------------------+-------------------+-------------+-------------+--------------+-----------------------+--------------------+-------------+-----------+---------------+-----------------------------------------------------
 1000 | Compression Policy [1000] | @ 1 sec           | @ 0         |          -1 | @ 1 hour     | _timescaledb_internal | policy_compression | test_role_1 | t         |             2 | {"hypertable_id": 2, "compress_after": "@ 60 days"}
(1 row)

insert into conditions
select now()::timestamp, 'TOK', 'sony', 55, 75;
-- TEST3 --
--only the old chunks will get compressed when policy is executed--
CALL run_job(:compressjob_id);
select chunk_name, node_name, pg_size_pretty(before_compression_total_bytes) before_total,
pg_size_pretty( after_compression_total_bytes)  after_total
from chunk_compression_stats('conditions') where compression_status like 'Compressed' order by chunk_name;
      chunk_name       |       node_name       | before_total | after_total 
-----------------------+-----------------------+--------------+-------------
 _dist_hyper_2_6_chunk | db_dist_compression_1 | 32 kB        | 32 kB
 _dist_hyper_2_6_chunk | db_dist_compression_2 | 32 kB        | 32 kB
(2 rows)

SELECT * FROM _timescaledb_catalog.chunk ORDER BY id;
 id | hypertable_id |      schema_name      |      table_name       | compressed_chunk_id | dropped | status 
----+---------------+-----------------------+-----------------------+---------------------+---------+--------
  6 |             2 | _timescaledb_internal | _dist_hyper_2_6_chunk |                     | f       |      1
  7 |             2 | _timescaledb_internal | _dist_hyper_2_7_chunk |                     | f       |      0
  8 |             2 | _timescaledb_internal | _dist_hyper_2_8_chunk |                     | f       |      0
(3 rows)

-- TEST 4 --
--cannot set another policy
\set ON_ERROR_STOP 0
select add_compression_policy('conditions', '60d'::interval, if_not_exists=>true);
NOTICE:  compression policy already exists for hypertable "conditions", skipping
 add_compression_policy 
------------------------
                     -1
(1 row)

select add_compression_policy('conditions', '60d'::interval);
ERROR:  compression policy already exists for hypertable "conditions"
select add_compression_policy('conditions', '30d'::interval, if_not_exists=>true);
WARNING:  compression policy already exists for hypertable "conditions"
 add_compression_policy 
------------------------
                     -1
(1 row)

\set ON_ERROR_STOP 1
--TEST 5 --
-- drop the policy --
select remove_compression_policy('conditions');
 remove_compression_policy 
---------------------------
 t
(1 row)

select count(*) from _timescaledb_config.bgw_job WHERE id>=1000;
 count 
-------
     0
(1 row)

--TEST 6 --
-- try to execute the policy after it has been dropped --
\set ON_ERROR_STOP 0
CALL run_job(:compressjob_id);
ERROR:  job 1000 not found
\set ON_ERROR_STOP 1
-- We're done with the table, so drop it.
DROP TABLE IF EXISTS conditions CASCADE;
--TEST 7
--compression policy for integer based partition hypertable
CREATE TABLE test_table_int(time bigint, val int);
SELECT create_distributed_hypertable('test_table_int', 'time', chunk_time_interval => 1, replication_factor => 2);
NOTICE:  adding not-null constraint to column "time"
 create_distributed_hypertable 
-------------------------------
 (3,public,test_table_int,t)
(1 row)

CREATE OR REPLACE FUNCTION dummy_now() RETURNS BIGINT LANGUAGE SQL IMMUTABLE as  'SELECT 5::BIGINT';
CALL distributed_exec($$
CREATE OR REPLACE FUNCTION dummy_now() RETURNS BIGINT LANGUAGE SQL IMMUTABLE as  'SELECT 5::BIGINT'
$$);
select set_integer_now_func('test_table_int', 'dummy_now');
 set_integer_now_func 
----------------------
 
(1 row)

insert into test_table_int select generate_series(1,5), 10;
alter table test_table_int set (timescaledb.compress);
select add_compression_policy('test_table_int', 2::int) AS compressjob_id
\gset
select * from _timescaledb_config.bgw_job where id=:compressjob_id;
  id  |     application_name      | schedule_interval | max_runtime | max_retries | retry_period |      proc_schema      |     proc_name      |    owner    | scheduled | hypertable_id |                  config                   
------+---------------------------+-------------------+-------------+-------------+--------------+-----------------------+--------------------+-------------+-----------+---------------+-------------------------------------------
 1001 | Compression Policy [1001] | @ 1 day           | @ 0         |          -1 | @ 1 hour     | _timescaledb_internal | policy_compression | test_role_1 | t         |             3 | {"hypertable_id": 3, "compress_after": 2}
(1 row)

\gset
CALL run_job(:compressjob_id);
CALL run_job(:compressjob_id);
select chunk_name, node_name, before_compression_total_bytes, after_compression_total_bytes
from chunk_compression_stats('test_table_int') where compression_status like 'Compressed' order by chunk_name;
       chunk_name       |       node_name       | before_compression_total_bytes | after_compression_total_bytes 
------------------------+-----------------------+--------------------------------+-------------------------------
 _dist_hyper_3_10_chunk | db_dist_compression_2 |                          24576 |                         16384
 _dist_hyper_3_10_chunk | db_dist_compression_3 |                          24576 |                         16384
 _dist_hyper_3_9_chunk  | db_dist_compression_1 |                          24576 |                         16384
 _dist_hyper_3_9_chunk  | db_dist_compression_2 |                          24576 |                         16384
(4 rows)

--TEST8 insert into compressed chunks on dist. hypertable
CREATE TABLE test_recomp_int(time bigint, val int);
SELECT create_distributed_hypertable('test_recomp_int', 'time', chunk_time_interval => 20);
NOTICE:  adding not-null constraint to column "time"
 create_distributed_hypertable 
-------------------------------
 (4,public,test_recomp_int,t)
(1 row)

CREATE OR REPLACE FUNCTION dummy_now() RETURNS BIGINT LANGUAGE SQL IMMUTABLE as  'SELECT 100::BIGINT';
CALL distributed_exec($$
CREATE OR REPLACE FUNCTION dummy_now() RETURNS BIGINT LANGUAGE SQL IMMUTABLE as  'SELECT 100::BIGINT'
$$);
select set_integer_now_func('test_recomp_int', 'dummy_now');
 set_integer_now_func 
----------------------
 
(1 row)

insert into test_recomp_int select generate_series(1,5), 10;
alter table test_recomp_int set (timescaledb.compress);
CREATE VIEW test_recomp_int_chunk_status as
SELECT
   c.table_name as chunk_name,
   c.status as chunk_status
FROM _timescaledb_catalog.hypertable h, _timescaledb_catalog.chunk c 
WHERE h.id = c.hypertable_id and h.table_name = 'test_recomp_int';
--compress chunks 
SELECT compress_chunk(chunk)
FROM show_chunks('test_recomp_int') AS chunk
ORDER BY chunk;
                compress_chunk                
----------------------------------------------
 _timescaledb_internal._dist_hyper_4_14_chunk
(1 row)

--check the status 
SELECT * from test_recomp_int_chunk_status ORDER BY 1;
       chunk_name       | chunk_status 
------------------------+--------------
 _dist_hyper_4_14_chunk |            1
(1 row)

-- insert into compressed chunks of test_recomp_int (using same value for val)--
insert into test_recomp_int select 10, 10;
SELECT count(*) from test_recomp_int where val = 10;
 count 
-------
     6
(1 row)

--chunk status should change ---
SELECT * from test_recomp_int_chunk_status ORDER BY 1;
       chunk_name       | chunk_status 
------------------------+--------------
 _dist_hyper_4_14_chunk |            3
(1 row)

SELECT
c.schema_name || '.' || c.table_name as "CHUNK_NAME"
FROM _timescaledb_catalog.hypertable h, _timescaledb_catalog.chunk c 
WHERE h.id = c.hypertable_id and h.table_name = 'test_recomp_int' \gset
--call recompress_chunk directly on distributed chunk
SELECT recompress_chunk(:'CHUNK_NAME'::regclass);
               recompress_chunk               
----------------------------------------------
 _timescaledb_internal._dist_hyper_4_14_chunk
(1 row)

--check chunk status now, should be compressed
SELECT * from test_recomp_int_chunk_status ORDER BY 1;
       chunk_name       | chunk_status 
------------------------+--------------
 _dist_hyper_4_14_chunk |            1
(1 row)

SELECT count(*) from test_recomp_int;
 count 
-------
     6
(1 row)

--add a policy--
select add_compression_policy('test_recomp_int', 1::int) AS compressjob_id
\gset
--once again add data to the compressed chunk
insert into test_recomp_int select generate_series(5,7), 10;
SELECT * from test_recomp_int_chunk_status ORDER BY 1;
       chunk_name       | chunk_status 
------------------------+--------------
 _dist_hyper_4_14_chunk |            3
(1 row)

--run the compression policy job, it will recompress chunks that are unordered
CALL run_job(:compressjob_id);
SELECT count(*) from test_recomp_int;
 count 
-------
     9
(1 row)

SELECT * from test_recomp_int_chunk_status ORDER BY 1;
       chunk_name       | chunk_status 
------------------------+--------------
 _dist_hyper_4_14_chunk |            1
(1 row)

