-- Copyright (c) 2016-2018  Timescale, Inc. All Rights Reserved.
--
-- This file is licensed under the Timescale License,
-- see LICENSE-TIMESCALE at the top of the tsl directory.
\set ON_ERROR_STOP 0
-- test locf and interpolate call errors out when used outside gapfill context
SELECT locf(1);
WARNING:  Timescale License expired
ERROR:  locf can only be used in an aggregation query with time_bucket_gapfill
SELECT interpolate(1);
ERROR:  interpolate can only be used in an aggregation query with time_bucket_gapfill
-- test locf and interpolate call errors out when used outside gapfill context with NULL arguments
SELECT locf(NULL::int);
ERROR:  locf can only be used in an aggregation query with time_bucket_gapfill
SELECT interpolate(NULL);
ERROR:  interpolate can only be used in an aggregation query with time_bucket_gapfill
-- test time_bucket_gapfill not top level function call
SELECT
  1 + time_bucket_gapfill(1,time,1,11)
FROM (VALUES (1),(2)) v(time)
GROUP BY 1;
ERROR:  no top level time_bucket_gapfill in group by clause
-- test interpolate lookup query with 1 element in record
SELECT
  time_bucket_gapfill(1,time,1,11),
  interpolate(min(time),next=>(SELECT ROW(10)))
FROM (VALUES (1),(2)) v(time)
GROUP BY 1;
ERROR:  interpolate RECORD arguments must have 2 elements
SELECT
  time_bucket_gapfill(1,time,1,11),
  interpolate(min(time),prev=>(SELECT ROW(10)))
FROM (VALUES (2),(3)) v(time)
GROUP BY 1;
ERROR:  interpolate RECORD arguments must have 2 elements
-- test interpolate lookup query with 3 elements in record
SELECT
  time_bucket_gapfill(1,time,1,11),
  interpolate(min(time),next=>(SELECT (10,10,10)))
FROM (VALUES (1),(2)) v(time)
GROUP BY 1;
ERROR:  interpolate RECORD arguments must have 2 elements
SELECT
  time_bucket_gapfill(1,time,1,11),
  interpolate(min(time),prev=>(SELECT (10,10,10)))
FROM (VALUES (2),(3)) v(time)
GROUP BY 1;
ERROR:  interpolate RECORD arguments must have 2 elements
-- test interpolate lookup query with mismatching time datatype
SELECT
  time_bucket_gapfill(1,time,1,11),
  interpolate(min(time),next=>(SELECT (10::float,10)))
FROM (VALUES (1),(2)) v(time)
GROUP BY 1;
ERROR:  first argument of interpolate returned record must match used timestamp datatype
SELECT
  time_bucket_gapfill(1,time,1,11),
  interpolate(min(time),prev=>(SELECT (10::float,10)))
FROM (VALUES (2),(3)) v(time)
GROUP BY 1;
ERROR:  first argument of interpolate returned record must match used timestamp datatype
-- test interpolate lookup query with mismatching value datatype
SELECT
  time_bucket_gapfill(1,time,1,11),
  interpolate(min(time),next=>(SELECT (10,10::float)))
FROM (VALUES (1),(2)) v(time)
GROUP BY 1;
ERROR:  second argument of interpolate returned record must match used interpolate datatype
SELECT
  time_bucket_gapfill(1,time,1,11),
  interpolate(min(time),prev=>(SELECT (10,10::float)))
FROM (VALUES (2),(3)) v(time)
GROUP BY 1;
ERROR:  second argument of interpolate returned record must match used interpolate datatype
-- test interpolate with unsupported datatype
SELECT
  time_bucket_gapfill(1,time,1,11),
  interpolate(text 'text')
FROM (VALUES (1),(2)) v(time)
GROUP BY 1;
ERROR:  function interpolate(text) does not exist at character 46
SELECT
  time_bucket_gapfill(1,time,1,11),
  interpolate(interval '1d')
FROM (VALUES (2),(3)) v(time)
GROUP BY 1;
ERROR:  function interpolate(interval) does not exist at character 46
-- test multiple time_bucket_gapfill calls
SELECT
  time_bucket_gapfill(1,time,1,11),time_bucket_gapfill(1,time,1,11)
FROM (VALUES (1),(2)) v(time)
GROUP BY 1;
ERROR:  multiple time_bucket_gapfill calls not allowed
-- test nested time_bucket_gapfill calls
SELECT
  time_bucket_gapfill(1,time_bucket_gapfill(1,time,1,11),1,11)
FROM (VALUES (1),(2)) v(time)
GROUP BY 1;
ERROR:  multiple time_bucket_gapfill calls not allowed
\set ON_ERROR_STOP 1
-- test time_bucket_gapfill without aggregation
SELECT
  time_bucket_gapfill(1,time,1,11)
FROM (VALUES (1),(2)) v(time);
 time_bucket_gapfill 
---------------------
                   1
                   2
(2 rows)

-- test NULL args
SELECT
  time_bucket_gapfill(NULL,time,1,11)
FROM (VALUES (1),(2)) v(time)
GROUP BY 1;
 time_bucket_gapfill 
---------------------
                    
(1 row)

SELECT
  time_bucket_gapfill(1,NULL,1,11)
FROM (VALUES (1),(2)) v(time)
GROUP BY 1;
 time_bucket_gapfill 
---------------------
                    
(1 row)

SELECT
  time_bucket_gapfill(1,time,NULL,11)
FROM (VALUES (1),(2)) v(time)
GROUP BY 1;
 time_bucket_gapfill 
---------------------
                    
(1 row)

SELECT
  time_bucket_gapfill(1,time,1,NULL)
FROM (VALUES (1),(2)) v(time)
GROUP BY 1;
 time_bucket_gapfill 
---------------------
                    
(1 row)

-- simple gapfill query
SELECT
  time_bucket_gapfill(10,time,0,50) AS time,
  min(value) AS value
FROM (values (-10,1),(10,2),(11,3),(12,4),(22,5),(30,6),(66,7)) v(time,value)
GROUP BY 1 ORDER BY 1;
 time | value 
------+-------
  -10 |     1
    0 |      
   10 |     2
   20 |     5
   30 |     6
   40 |      
   60 |     7
(7 rows)

-- test references to different columns
SELECT
  time_bucket_gapfill(1,t,0,5) as t,
  min(t),max(t),min(v),max(v)
FROM(VALUES (1,3),(2,5)) tb(t,v)
GROUP BY 1 ORDER BY 1;
 t | min | max | min | max 
---+-----+-----+-----+-----
 0 |     |     |     |    
 1 |   1 |   1 |   3 |   3
 2 |   2 |   2 |   5 |   5
 3 |     |     |     |    
 4 |     |     |     |    
(5 rows)

-- test passing of values outside boundaries
SELECT
  time_bucket_gapfill(1,time,0,5),
  min(time)
FROM (VALUES (-1),(1),(3),(6)) v(time)
GROUP BY 1 ORDER BY 1;
 time_bucket_gapfill | min 
---------------------+-----
                  -1 |  -1
                   0 |    
                   1 |   1
                   2 |    
                   3 |   3
                   4 |    
                   6 |   6
(7 rows)

-- test gap fill before first row and after last row
SELECT
  time_bucket_gapfill(1,time,0,5),
  min(time)
FROM (VALUES (1),(2),(3)) v(time)
GROUP BY 1 ORDER BY 1;
 time_bucket_gapfill | min 
---------------------+-----
                   0 |    
                   1 |   1
                   2 |   2
                   3 |   3
                   4 |    
(5 rows)

-- test coalesce
SELECT
  time_bucket_gapfill(1,time,0,5),
  coalesce(min(time),0),
  coalesce(min(value),0),
  coalesce(min(value),7)
FROM (VALUES (1,1),(2,2),(3,3)) v(time,value)
GROUP BY 1 ORDER BY 1;
 time_bucket_gapfill | coalesce | coalesce | coalesce 
---------------------+----------+----------+----------
                   0 |        0 |        0 |        7
                   1 |        1 |        1 |        1
                   2 |        2 |        2 |        2
                   3 |        3 |        3 |        3
                   4 |        0 |        0 |        7
(5 rows)

-- test case
SELECT
  time_bucket_gapfill(1,time,0,5),
  min(time),
  CASE WHEN min(time) IS NOT NULL THEN min(time) ELSE -1 END,
  CASE WHEN min(time) IS NOT NULL THEN min(time) + 7 ELSE 0 END,
  CASE WHEN 1 = 1 THEN 1 ELSE 0 END
FROM (VALUES (1,1),(2,2),(3,3)) v(time,value)
GROUP BY 1 ORDER BY 1;
 time_bucket_gapfill | min | case | case | case 
---------------------+-----+------+------+------
                   0 |     |   -1 |    0 |    1
                   1 |   1 |    1 |    8 |    1
                   2 |   2 |    2 |    9 |    1
                   3 |   3 |    3 |   10 |    1
                   4 |     |   -1 |    0 |    1
(5 rows)

-- test constants
SELECT
  time_bucket_gapfill(1,time,0,5),
  min(time), min(time), 4 as c
FROM (VALUES (1),(2),(3)) v(time)
GROUP BY 1 ORDER BY 1;
 time_bucket_gapfill | min | min | c 
---------------------+-----+-----+---
                   0 |     |     | 4
                   1 |   1 |   1 | 4
                   2 |   2 |   2 | 4
                   3 |   3 |   3 | 4
                   4 |     |     | 4
(5 rows)

-- test column reordering
SELECT
  1 as c1, '2' as c2,
  time_bucket_gapfill(1,time,0,5),
  3.0 as c3,
  min(time), min(time), 4 as c4
FROM (VALUES (1),(2),(3)) v(time)
GROUP BY 3 ORDER BY 3;
 c1 | c2 | time_bucket_gapfill | c3  | min | min | c4 
----+----+---------------------+-----+-----+-----+----
  1 | 2  |                   0 | 3.0 |     |     |  4
  1 | 2  |                   1 | 3.0 |   1 |   1 |  4
  1 | 2  |                   2 | 3.0 |   2 |   2 |  4
  1 | 2  |                   3 | 3.0 |   3 |   3 |  4
  1 | 2  |                   4 | 3.0 |     |     |  4
(5 rows)

-- test timestamptz
SELECT
  time_bucket_gapfill(INTERVAL '6h',time,TIMESTAMPTZ '2000-01-01',TIMESTAMPTZ '2000-01-02'),
  min(time)
FROM (VALUES (TIMESTAMPTZ '2000-01-01 9:00:00'),(TIMESTAMPTZ '2000-01-01 18:00:00')) v(time)
GROUP BY 1 ORDER BY 1;
     time_bucket_gapfill      |             min              
------------------------------+------------------------------
 Fri Dec 31 22:00:00 1999 PST | 
 Sat Jan 01 04:00:00 2000 PST | Sat Jan 01 09:00:00 2000 PST
 Sat Jan 01 10:00:00 2000 PST | 
 Sat Jan 01 16:00:00 2000 PST | Sat Jan 01 18:00:00 2000 PST
 Sat Jan 01 22:00:00 2000 PST | 
(5 rows)

-- test timestamp
SELECT
  time_bucket_gapfill(INTERVAL '6h',time,TIMESTAMP '2000-01-01',TIMESTAMP '2000-01-02'),
  min(time)
FROM (VALUES (TIMESTAMP '2000-01-01 9:00:00'),(TIMESTAMP '2000-01-01 18:00:00')) v(time)
GROUP BY 1 ORDER BY 1;
   time_bucket_gapfill    |           min            
--------------------------+--------------------------
 Sat Jan 01 00:00:00 2000 | 
 Sat Jan 01 06:00:00 2000 | Sat Jan 01 09:00:00 2000
 Sat Jan 01 12:00:00 2000 | 
 Sat Jan 01 18:00:00 2000 | Sat Jan 01 18:00:00 2000
(4 rows)

-- test date
SELECT
  time_bucket_gapfill(INTERVAL '1w',time,DATE '2000-01-01',DATE '2000-02-10'),
  min(time)
FROM (VALUES (DATE '2000-01-08'),(DATE '2000-01-22')) v(time)
GROUP BY 1 ORDER BY 1;
 time_bucket_gapfill |    min     
---------------------+------------
 12-27-1999          | 
 01-03-2000          | 01-08-2000
 01-10-2000          | 
 01-17-2000          | 01-22-2000
 01-24-2000          | 
 01-31-2000          | 
 02-07-2000          | 
(7 rows)

-- test grouping by non-time columns
SELECT
  time_bucket_gapfill(1,time,0,5) as time,
  id,
  min(value) as m
FROM (VALUES (1,1,1),(2,2,2)) v(time,id,value)
GROUP BY 1,id ORDER BY 2,1;
 time | id | m 
------+----+---
    0 |  1 |  
    1 |  1 | 1
    2 |  1 |  
    3 |  1 |  
    4 |  1 |  
    0 |  2 |  
    1 |  2 |  
    2 |  2 | 2
    3 |  2 |  
    4 |  2 |  
(10 rows)

-- test duplicate columns in GROUP BY
SELECT
  time_bucket_gapfill(1,time,0,5) as time,
  id,
  id,
  min(value) as m
FROM (VALUES (1,1,1),(2,2,2)) v(time,id,value)
GROUP BY 1,2,3 ORDER BY 2,1;
 time | id | id | m 
------+----+----+---
    0 |  1 |  1 |  
    1 |  1 |  1 | 1
    2 |  1 |  1 |  
    3 |  1 |  1 |  
    4 |  1 |  1 |  
    0 |  2 |  2 |  
    1 |  2 |  2 |  
    2 |  2 |  2 | 2
    3 |  2 |  2 |  
    4 |  2 |  2 |  
(10 rows)

-- test grouping by columns not in resultset
SELECT
  time_bucket_gapfill(1,time,0,5) as time,
  min(value) as m
FROM (VALUES (1,1,1),(2,2,2)) v(time,id,value)
GROUP BY 1,id ORDER BY id,1;
 time | m 
------+---
    0 |  
    1 | 1
    2 |  
    3 |  
    4 |  
    0 |  
    1 |  
    2 | 2
    3 |  
    4 |  
(10 rows)

-- test grouping by non-time columns with text columns
SELECT
  time_bucket_gapfill(1,time,0,5) as time,
  color,
  min(value) as m
FROM (VALUES (1,'blue',1),(2,'red',2)) v(time,color,value)
GROUP BY 1,color ORDER BY 2,1;
 time | color | m 
------+-------+---
    0 | blue  |  
    1 | blue  | 1
    2 | blue  |  
    3 | blue  |  
    4 | blue  |  
    0 | red   |  
    1 | red   |  
    2 | red   | 2
    3 | red   |  
    4 | red   |  
(10 rows)

-- test insert into SELECT
CREATE TABLE insert_test(id INT);
INSERT INTO insert_test SELECT time_bucket_gapfill(1,time,1,5) FROM (VALUES (1),(2)) v(time) GROUP BY 1 ORDER BY 1;
SELECT * FROM insert_test;
 id 
----
  1
  2
  3
  4
(4 rows)

-- test join
SELECT t1.*,t2.m FROM
(
  SELECT
    time_bucket_gapfill(1,time,0,5) as time, color, min(value) as m
  FROM
    (VALUES (1,'red',1),(2,'blue',2)) v(time,color,value)
  GROUP BY 1,color ORDER BY 2,1
) t1 INNER JOIN
(
  SELECT
    time_bucket_gapfill(1,time,0,5) as time, color, min(value) as m
  FROM
    (VALUES (3,'red',1),(4,'blue',2)) v(time,color,value)
  GROUP BY 1,color ORDER BY 2,1
) t2 ON t1.time = t2.time AND t1.color=t2.color;
 time | color | m | m 
------+-------+---+---
    0 | blue  |   |  
    1 | blue  |   |  
    2 | blue  | 2 |  
    3 | blue  |   |  
    4 | blue  |   | 2
    0 | red   |   |  
    1 | red   | 1 |  
    2 | red   |   |  
    3 | red   |   | 1
    4 | red   |   |  
(10 rows)

-- test join with locf
SELECT t1.*,t2.m FROM
(
  SELECT
    time_bucket_gapfill(1,time,0,5) as time, 
    color,
    locf(min(value)) as locf
  FROM
    (VALUES (0,'red',1),(0,'blue',2)) v(time,color,value)
  GROUP BY 1,color ORDER BY 2,1
) t1 INNER JOIN
(
  SELECT
    time_bucket_gapfill(1,time,0,5) as time,
    color,
    locf(min(value)) as m
  FROM
    (VALUES (3,'red',1),(4,'blue',2)) v(time,color,value)
  GROUP BY 1,color ORDER BY 2,1
) t2 ON t1.time = t2.time AND t1.color=t2.color;
 time | color | locf | m 
------+-------+------+---
    0 | blue  |    2 |  
    1 | blue  |    2 |  
    2 | blue  |    2 |  
    3 | blue  |    2 |  
    4 | blue  |    2 | 2
    0 | red   |    1 |  
    1 | red   |    1 |  
    2 | red   |    1 |  
    3 | red   |    1 | 1
    4 | red   |    1 | 1
(10 rows)

-- test locf
SELECT
  time_bucket_gapfill(10,time,0,50) AS time,
  locf(min(value)) AS value
FROM (values (10,9),(20,3),(50,6)) v(time,value)
GROUP BY 1 ORDER BY 1;
 time | value 
------+-------
    0 |      
   10 |     9
   20 |     3
   30 |     3
   40 |     3
   50 |     6
(6 rows)

-- test locf with constants
SELECT
  time_bucket_gapfill(1,time,0,5),
  2,
  locf(min(value))
FROM (VALUES (0,1,3),(4,2,3)) v(time,value)
GROUP BY 1;
 time_bucket_gapfill | ?column? | locf 
---------------------+----------+------
                   0 |        2 |    1
                   1 |        2 |    1
                   2 |        2 |    1
                   3 |        2 |    1
                   4 |        2 |    2
(5 rows)

-- test locf with out of boundary lookup
SELECT
  time_bucket_gapfill(10,time,0,70) AS time,
  locf(min(value),(SELECT 100)) AS value
FROM (values (20,9),(40,6)) v(time,value)
GROUP BY 1 ORDER BY 1;
 time | value 
------+-------
    0 |   100
   10 |   100
   20 |     9
   30 |     9
   40 |     6
   50 |     6
   60 |     6
(7 rows)

CREATE TABLE metrics_int(time int,device_id int, sensor_id int, value float);
INSERT INTO metrics_int VALUES
(-100,1,1,0.0),
(-100,1,2,-100.0),
(0,1,1,5.0),
(5,1,2,10.0),
(100,1,1,0.0),
(100,1,2,-100.0)
;
-- test locf with different datatypes
SELECT
  time_bucket_gapfill(1,time,0,5) as time,
  locf(min(v1)) AS text,
  locf(min(v2)) AS "int[]",
  locf(min(v3)) AS "text 4/8k"
FROM (VALUES
  (1,'foo',ARRAY[1,2,3],repeat('4k',2048)),
  (3,'bar',ARRAY[3,4,5],repeat('8k',4096))
) v(time,v1,v2,v3)
GROUP BY 1;
 time | text |  int[]  |text 4/8k

    0 |      |         | 
    1 | foo  | {1,2,3} | 4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k
    2 | foo  | {1,2,3} | 4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k4k
    3 | bar  | {3,4,5} | 
    4 | bar  | {3,4,5} | 
(5 rows)

-- test locf lookup query does not trigger when not needed
--
-- 1/(SELECT 0) will throw an error in the lookup query but in order to not
-- always trigger evaluation it needs to be correlated otherwise postgres will
-- always run it once even if the value is never used
SELECT
  time_bucket_gapfill(5,time,0,11) AS time,
  device_id,
  sensor_id,
  locf(min(value)::int,(SELECT 1/(SELECT 0) FROM metrics_int m2 WHERE m2.device_id=m1.device_id AND m2.sensor_id=m1.sensor_id ORDER BY time DESC LIMIT 1)) AS locf3
FROM metrics_int m1
WHERE time >= 0 AND time < 5
GROUP BY 1,2,3 ORDER BY 2,3,1;
 time | device_id | sensor_id | locf3 
------+-----------+-----------+-------
    0 |         1 |         1 |     5
    5 |         1 |         1 |     5
   10 |         1 |         1 |     5
(3 rows)

\set ON_ERROR_STOP 0
-- inverse of previous test query to confirm an error is actually thrown
SELECT
  time_bucket_gapfill(5,time,0,11) AS time,
  device_id,
  sensor_id,
  locf(min(value)::int,(SELECT 1/(SELECT 0) FROM metrics_int m2 WHERE m2.device_id=m1.device_id AND m2.sensor_id=m1.sensor_id ORDER BY time DESC LIMIT 1)) AS locf3
FROM metrics_int m1
WHERE time = 5
GROUP BY 1,2,3 ORDER BY 2,3,1;
ERROR:  division by zero
\set ON_ERROR_STOP 1
-- test locf with correlated subquery
SELECT
  time_bucket_gapfill(5,time,0,11) AS time,
  device_id,
  sensor_id,
  avg(value),
  locf(min(value)) AS locf,
  locf(min(value)::int,23) AS locf1,
  locf(min(value)::int,(SELECT 42)) AS locf2,
  locf(min(value),(SELECT value FROM metrics_int m2 WHERE time<0 AND m2.device_id=m1.device_id AND m2.sensor_id=m1.sensor_id ORDER BY time DESC LIMIT 1)) AS locf3
FROM metrics_int m1
WHERE time >= 0 AND time < 10
GROUP BY 1,2,3 ORDER BY 2,3,1;
 time | device_id | sensor_id | avg | locf | locf1 | locf2 | locf3 
------+-----------+-----------+-----+------+-------+-------+-------
    0 |         1 |         1 |   5 |    5 |     5 |     5 |     5
    5 |         1 |         1 |     |    5 |     5 |     5 |     5
   10 |         1 |         1 |     |    5 |     5 |     5 |     5
    0 |         1 |         2 |     |      |    23 |    42 |  -100
    5 |         1 |         2 |  10 |   10 |    10 |    10 |    10
   10 |         1 |         2 |     |   10 |    10 |    10 |    10
(6 rows)

-- test locf with correlated subquery and "wrong order"
SELECT
  time_bucket_gapfill(5,time,0,11) AS time,
  device_id,
  sensor_id,
  avg(value),
  locf(min(value)) AS locf,
  locf(min(value),23::float) AS locf1,
  locf(min(value),(SELECT 42::float)) AS locf2,
  locf(min(value),(SELECT value FROM metrics_int m2 WHERE time<0 AND m2.device_id=m1.device_id AND m2.sensor_id=m1.sensor_id ORDER BY time DESC LIMIT 1)) AS locf3
FROM metrics_int m1
WHERE time >= 0 AND time < 10
GROUP BY 1,2,3 ORDER BY 1,2,3;
 time | device_id | sensor_id | avg | locf | locf1 | locf2 | locf3 
------+-----------+-----------+-----+------+-------+-------+-------
    0 |         1 |         1 |   5 |    5 |     5 |     5 |     5
    0 |         1 |         2 |     |      |    23 |    42 |  -100
    5 |         1 |         1 |     |    5 |     5 |     5 |     5
    5 |         1 |         2 |  10 |   10 |    10 |    10 |    10
   10 |         1 |         1 |     |    5 |     5 |     5 |     5
   10 |         1 |         2 |     |   10 |    10 |    10 |    10
(6 rows)

-- test interpolate
SELECT
  time_bucket_gapfill(10,time,0,50) AS time,
  interpolate(min(value)) AS value
FROM (values (0,1),(50,6)) v(time,value)
GROUP BY 1 ORDER BY 1;
 time | value 
------+-------
    0 |     1
   10 |     2
   20 |     3
   30 |     4
   40 |     5
   50 |     6
(6 rows)

-- test interpolate datatypes
SELECT
  time_bucket_gapfill(10,time,0,50) AS time,
  interpolate(min(v1)) AS "smallint",
  interpolate(min(v2)) AS "int",
  interpolate(min(v3)) AS "bigint",
  interpolate(min(v4)) AS "float4",
  interpolate(min(v5)) AS "float8"
FROM (values (0,-3::smallint,-3::int,-3::bigint,-3::float4,-3::float8),(50,3::smallint,3::int,3::bigint,3::float4,3::float8)) v(time,v1,v2,v3,v4,v5)
GROUP BY 1 ORDER BY 1;
 time | smallint | int | bigint | float4 | float8 
------+----------+-----+--------+--------+--------
    0 |       -3 |  -3 |     -3 |     -3 |     -3
   10 |       -1 |  -1 |     -1 |   -1.8 |   -1.8
   20 |        0 |   0 |      0 |   -0.6 |   -0.6
   30 |        0 |   0 |      0 |    0.6 |    0.6
   40 |        1 |   1 |      1 |    1.8 |    1.8
   50 |        3 |   3 |      3 |      3 |      3
(6 rows)

-- test interpolate datatypes with negative time
SELECT
  time_bucket_gapfill(10,time,-40,30) AS time,
  interpolate(min(v1)) AS "smallint",
  interpolate(min(v2)) AS "int",
  interpolate(min(v3)) AS "bigint",
  interpolate(min(v4)) AS "float4",
  interpolate(min(v5)) AS "float8"
FROM (values (-40,-3::smallint,-3::int,-3::bigint,-3::float4,-3::float8),(20,3::smallint,3::int,3::bigint,3::float4,3::float8)) v(time,v1,v2,v3,v4,v5)
GROUP BY 1 ORDER BY 1;
 time | smallint | int | bigint | float4 | float8 
------+----------+-----+--------+--------+--------
  -40 |       -3 |  -3 |     -3 |     -3 |     -3
  -30 |       -2 |  -2 |     -2 |     -2 |     -2
  -20 |       -1 |  -1 |     -1 |     -1 |     -1
  -10 |        0 |   0 |      0 |      0 |      0
    0 |        1 |   1 |      1 |      1 |      1
   10 |        2 |   2 |      2 |      2 |      2
   20 |        3 |   3 |      3 |      3 |      3
(7 rows)

-- test interpolate with multiple groupings
SELECT
  time_bucket_gapfill(5,time,0,11),
  device,
  interpolate(min(v1),(SELECT (-10,-10)),(SELECT (20,10)))
FROM (VALUES (5,1,0),(5,2,0)) as v(time,device,v1)
GROUP BY 1,2 ORDER BY 2,1;
 time_bucket_gapfill | device | interpolate 
---------------------+--------+-------------
                   0 |      1 |          -3
                   5 |      1 |           0
                  10 |      1 |           3
                   0 |      2 |          -3
                   5 |      2 |           0
                  10 |      2 |           3
(6 rows)

-- test interpolate with correlated subquery
SELECT
  time_bucket_gapfill(5,time,0,11) AS time,
  device_id,
  sensor_id,
  avg(value),
  interpolate(min(value)) AS ip,
  interpolate(min(value),(-5,-5.0::float),(15,20.0::float)) AS ip1,
  interpolate(min(value),(SELECT (-10,-10.0::float)),(SELECT (15,20.0::float))) AS ip2,
  interpolate(
    min(value),
    (SELECT (time,value) FROM metrics_int m2
     WHERE time<0 AND m2.device_id=m1.device_id AND m2.sensor_id=m1.sensor_id
     ORDER BY time DESC LIMIT 1),
    (SELECT (time,value) FROM metrics_int m2
     WHERE time>10 AND m2.device_id=m1.device_id AND m2.sensor_id=m1.sensor_id
     ORDER BY time LIMIT 1)
  ) AS ip3
FROM metrics_int m1
WHERE time >= 0 AND time < 10
GROUP BY 1,2,3 ORDER BY 2,3,1;
 time | device_id | sensor_id | avg | ip | ip1 |       ip2        |       ip3        
------+-----------+-----------+-----+----+-----+------------------+------------------
    0 |         1 |         1 |   5 |  5 |   5 |                5 |                5
    5 |         1 |         1 |     |    |  10 |               10 |             4.75
   10 |         1 |         1 |     |    |  15 |               15 |              4.5
    0 |         1 |         2 |     |    | 2.5 | 3.33333333333333 | 4.76190476190476
    5 |         1 |         2 |  10 | 10 |  10 |               10 |               10
   10 |         1 |         2 |     |    |  15 |               15 | 4.21052631578947
(6 rows)

-- test cte with gap filling in outer query
WITH data AS (
  SELECT * FROM (VALUES (1,1,1),(2,2,2)) v(time,id,value)
)
SELECT
  time_bucket_gapfill(1,time,0,5) as time,
  id,
  min(value) as m
FROM data
GROUP BY 1,id;
 time | id | m 
------+----+---
    0 |  1 |  
    1 |  1 | 1
    2 |  1 |  
    3 |  1 |  
    4 |  1 |  
    0 |  2 |  
    1 |  2 |  
    2 |  2 | 2
    3 |  2 |  
    4 |  2 |  
(10 rows)

-- test cte with gap filling in inner query
WITH gapfill AS (
  SELECT
    time_bucket_gapfill(1,time,0,5) as time,
    id,
    min(value) as m
  FROM (VALUES (1,1,1),(2,2,2)) v(time,id,value)
  GROUP BY 1,id
)
SELECT * FROM gapfill;
 time | id | m 
------+----+---
    0 |  1 |  
    1 |  1 | 1
    2 |  1 |  
    3 |  1 |  
    4 |  1 |  
    0 |  2 |  
    1 |  2 |  
    2 |  2 | 2
    3 |  2 |  
    4 |  2 |  
(10 rows)

\set ON_ERROR_STOP 0
-- test window functions
SELECT
  time_bucket_gapfill(10,time,0,60),
  interpolate(min(time)),
  lag(min(time)) OVER ()
FROM (VALUES (0),(50)) v(time)
GROUP BY 1;
ERROR:  gapfill functionality with window functions not supported
SELECT
	time_bucket_gapfill(1,time,0,5),
  min(time),
  4 as c,
  lag(min(time)) OVER ()
FROM (VALUES (1),(2),(3)) v(time)
GROUP BY 1;
ERROR:  gapfill functionality with window functions not supported
SELECT
	time_bucket_gapfill(1,time,0,5),
  min(time),
  4 as c,
  lag(min(time)) OVER ()
FROM (VALUES (1),(3)) v(time)
GROUP BY 1;
ERROR:  gapfill functionality with window functions not supported
SELECT
  time_bucket_gapfill(1,time,1,5),
  locf(min(time)) AS locf,
  lag(locf(min(time))) over () AS lag
FROM (VALUES (1),(2)) v(time)
GROUP BY 1;
ERROR:  gapfill functionality with window functions not supported
SELECT
  time_bucket_gapfill(1,time,1,5),
  min(time) AS value,
  locf(min(time)) AS locf,
  lag(locf(min(time))) over () AS lag
FROM (VALUES (1),(2)) v(time)
GROUP BY 1;
ERROR:  gapfill functionality with window functions not supported
\set ON_ERROR_STOP 1
-- test reorder
SELECT
  time_bucket_gapfill(1,time,0,5) as time,
  id,
  min(value) as m
FROM
  (VALUES (1,1,1),(2,2,2)) v(time,id,value)
GROUP BY 1,id ORDER BY 1,id;
 time | id | m 
------+----+---
    0 |  1 |  
    0 |  2 |  
    1 |  1 | 1
    1 |  2 |  
    2 |  1 |  
    2 |  2 | 2
    3 |  1 |  
    3 |  2 |  
    4 |  1 |  
    4 |  2 |  
(10 rows)

-- test order by locf
SELECT
  time_bucket_gapfill(1,time,1,6),
  locf(min(time))
FROM
  (VALUES (2),(3)) v(time)
GROUP BY 1 ORDER BY 1,2;
 time_bucket_gapfill | locf 
---------------------+------
                   1 |     
                   2 |    2
                   3 |    3
                   4 |    3
                   5 |    3
(5 rows)

SELECT
  time_bucket_gapfill(1,time,1,6),
  locf(min(time))
FROM
  (VALUES (2),(3)) v(time)
GROUP BY 1 ORDER BY 2 NULLS FIRST,1;
 time_bucket_gapfill | locf 
---------------------+------
                   1 |     
                   2 |    2
                   3 |    3
                   4 |    3
                   5 |    3
(5 rows)

SELECT
  time_bucket_gapfill(1,time,1,6),
  locf(min(time))
FROM
  (VALUES (2),(3)) v(time)
GROUP BY 1 ORDER BY 2 NULLS LAST,1;
 time_bucket_gapfill | locf 
---------------------+------
                   2 |    2
                   3 |    3
                   4 |    3
                   5 |    3
                   1 |     
(5 rows)

-- test order by interpolate
SELECT
  time_bucket_gapfill(1,time,1,6),
  interpolate(min(time),prev:=(0,0)::record)
FROM
  (VALUES (2),(3)) v(time)
GROUP BY 1 ORDER BY 1,2;
 time_bucket_gapfill | interpolate 
---------------------+-------------
                   1 |           1
                   2 |           2
                   3 |           3
                   4 |            
                   5 |            
(5 rows)

SELECT
  time_bucket_gapfill(1,time,1,6),
  interpolate(min(time),prev:=(0,0)::record)
FROM
  (VALUES (2),(3)) v(time)
GROUP BY 1 ORDER BY 2 NULLS FIRST,1;
 time_bucket_gapfill | interpolate 
---------------------+-------------
                   4 |            
                   5 |            
                   1 |           1
                   2 |           2
                   3 |           3
(5 rows)

SELECT
  time_bucket_gapfill(1,time,1,6),
  interpolate(min(time),prev:=(0,0)::record)
FROM
  (VALUES (2),(3)) v(time)
GROUP BY 1 ORDER BY 2 NULLS LAST,1;
 time_bucket_gapfill | interpolate 
---------------------+-------------
                   1 |           1
                   2 |           2
                   3 |           3
                   4 |            
                   5 |            
(5 rows)

-- test queries on hypertable
CREATE TABLE metrics_tstz(time timestamptz, device_id INT, v1 float, v2 int);
SELECT create_hypertable('metrics_tstz','time');
NOTICE:  adding not-null constraint to column "time"
     create_hypertable     
---------------------------
 (1,public,metrics_tstz,t)
(1 row)

INSERT INTO metrics_tstz VALUES
(timestamptz '2018-01-01 05:00:00 PST', 1, 0.5, 10),
(timestamptz '2018-01-01 05:00:00 PST', 2, 0.7, 20),
(timestamptz '2018-01-01 05:00:00 PST', 3, 0.9, 30),
(timestamptz '2018-01-01 07:00:00 PST', 1, 0.0, 0),
(timestamptz '2018-01-01 07:00:00 PST', 2, 1.4, 40),
(timestamptz '2018-01-01 07:00:00 PST', 3, 0.9, 30)
;
-- test locf and interpolate together
SELECT
  time_bucket_gapfill(interval '1h',time,timestamptz '2018-01-01 05:00:00-8', timestamptz '2018-01-01 07:00:00-8'),
  device_id,
  locf(avg(v1)) AS locf_v1,
  locf(min(v2)) AS locf_v2,
  interpolate(avg(v1)) AS interpolate_v1,
  interpolate(avg(v2)) AS interpolate_v2
FROM metrics_tstz
GROUP BY 1,2;
     time_bucket_gapfill      | device_id | locf_v1 | locf_v2 | interpolate_v1 | interpolate_v2 
------------------------------+-----------+---------+---------+----------------+----------------
 Mon Jan 01 05:00:00 2018 PST |         1 |     0.5 |      10 |            0.5 |             10
 Mon Jan 01 06:00:00 2018 PST |         1 |     0.5 |      10 |           0.25 |              5
 Mon Jan 01 07:00:00 2018 PST |         1 |       0 |       0 |              0 |              0
 Mon Jan 01 05:00:00 2018 PST |         2 |     0.7 |      20 |            0.7 |             20
 Mon Jan 01 06:00:00 2018 PST |         2 |     0.7 |      20 |           1.05 |             30
 Mon Jan 01 07:00:00 2018 PST |         2 |     1.4 |      40 |            1.4 |             40
 Mon Jan 01 05:00:00 2018 PST |         3 |     0.9 |      30 |            0.9 |             30
 Mon Jan 01 06:00:00 2018 PST |         3 |     0.9 |      30 |            0.9 |             30
 Mon Jan 01 07:00:00 2018 PST |         3 |     0.9 |      30 |            0.9 |             30
(9 rows)

SELECT
  time_bucket_gapfill('12h'::interval,time,'2017-01-01'::timestamptz, '2017-01-02'::timestamptz),
  interpolate(
    avg(v1),
    (SELECT ('2017-01-01'::timestamptz,1::float)),
    (SELECT ('2017-01-02'::timestamptz,2::float))
  )
FROM metrics_tstz WHERE time < '2017-01-01' GROUP BY 1;
     time_bucket_gapfill      |    interpolate    
------------------------------+-------------------
 Sat Dec 31 16:00:00 2016 PST | 0.666666666666667
 Sun Jan 01 04:00:00 2017 PST |  1.16666666666667
 Sun Jan 01 16:00:00 2017 PST |  1.66666666666667
(3 rows)

-- interpolation with correlated subquery lookup before interval
SELECT
  time_bucket_gapfill('1h'::interval,time,'2018-01-01 3:00 PST'::timestamptz, '2018-01-01 8:00 PST'::timestamptz),
  device_id,
  interpolate(
    avg(v1),
    (SELECT (time,0.5::float) FROM metrics_tstz m2 WHERE m1.device_id=m2.device_id ORDER BY time DESC LIMIT 1)
  ),
  avg(v1)
FROM metrics_tstz m1
WHERE device_id=1 GROUP BY 1,2;
     time_bucket_gapfill      | device_id | interpolate | avg 
------------------------------+-----------+-------------+-----
 Mon Jan 01 03:00:00 2018 PST |         1 |         0.5 |    
 Mon Jan 01 04:00:00 2018 PST |         1 |         0.5 |    
 Mon Jan 01 05:00:00 2018 PST |         1 |         0.5 | 0.5
 Mon Jan 01 06:00:00 2018 PST |         1 |        0.25 |    
 Mon Jan 01 07:00:00 2018 PST |         1 |           0 |   0
(5 rows)

-- interpolation with correlated subquery lookup after interval
SELECT
  time_bucket_gapfill('1h'::interval,time,'2018-01-01 5:00 PST'::timestamptz, '2018-01-01 9:00 PST'::timestamptz),
  device_id,
  interpolate(
    avg(v1),
    next=>(SELECT (time,v2::float) FROM metrics_tstz m2 WHERE m1.device_id=m2.device_id ORDER BY time LIMIT 1)
  ),avg(v1)
FROM metrics_tstz m1 WHERE device_id=1 GROUP BY 1,2;
     time_bucket_gapfill      | device_id | interpolate | avg 
------------------------------+-----------+-------------+-----
 Mon Jan 01 05:00:00 2018 PST |         1 |         0.5 | 0.5
 Mon Jan 01 06:00:00 2018 PST |         1 |        0.25 |    
 Mon Jan 01 07:00:00 2018 PST |         1 |           0 |   0
 Mon Jan 01 08:00:00 2018 PST |         1 |          -5 |    
(4 rows)

