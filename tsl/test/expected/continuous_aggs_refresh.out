-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
-- Disable background workers since we are testing manual refresh
\c :TEST_DBNAME :ROLE_SUPERUSER
SELECT _timescaledb_internal.stop_background_workers();
 stop_background_workers 
-------------------------
 t
(1 row)

SET ROLE :ROLE_DEFAULT_PERM_USER;
CREATE TABLE conditions (time timestamptz NOT NULL, device int, temp float);
SELECT create_hypertable('conditions', 'time');
    create_hypertable    
-------------------------
 (1,public,conditions,t)
(1 row)

SELECT setseed(.12);
 setseed 
---------
 
(1 row)

INSERT INTO conditions
SELECT t, ceil(abs(timestamp_hash(t::timestamp))%4)::int, abs(timestamp_hash(t::timestamp))%40
FROM generate_series('2020-05-01', '2020-05-05', '10 minutes'::interval) t;
-- Show the most recent data
SELECT * FROM conditions
ORDER BY time DESC, device
LIMIT 10;
             time             | device | temp 
------------------------------+--------+------
 Tue May 05 00:00:00 2020 PDT |      2 |   30
 Mon May 04 23:50:00 2020 PDT |      2 |   10
 Mon May 04 23:40:00 2020 PDT |      0 |   20
 Mon May 04 23:30:00 2020 PDT |      1 |    1
 Mon May 04 23:20:00 2020 PDT |      2 |   34
 Mon May 04 23:10:00 2020 PDT |      1 |   37
 Mon May 04 23:00:00 2020 PDT |      0 |    4
 Mon May 04 22:50:00 2020 PDT |      2 |   10
 Mon May 04 22:40:00 2020 PDT |      1 |   37
 Mon May 04 22:30:00 2020 PDT |      0 |    8
(10 rows)

CREATE VIEW daily_temp
WITH (timescaledb.continuous,
      timescaledb.materialized_only=true)
AS
SELECT time_bucket('1 day', time) AS day, device, avg(temp) AS avg_temp
FROM conditions
GROUP BY 1,2;
NOTICE:  adding index _materialized_hypertable_2_device_day_idx ON _timescaledb_internal._materialized_hypertable_2 USING BTREE(device, day)
-- The continuous aggregate should be empty
SELECT * FROM daily_temp
ORDER BY day DESC, device;
 day | device | avg_temp 
-----+--------+----------
(0 rows)

-- Refresh the most recent few days:
SELECT refresh_continuous_aggregate('daily_temp', '2020-05-03', '2020-05-05');
 refresh_continuous_aggregate 
------------------------------
 
(1 row)

SELECT * FROM daily_temp
ORDER BY day DESC, device;
             day              | device |     avg_temp     
------------------------------+--------+------------------
 Mon May 04 17:00:00 2020 PDT |      0 | 19.3846153846154
 Mon May 04 17:00:00 2020 PDT |      1 | 16.5555555555556
 Mon May 04 17:00:00 2020 PDT |      2 | 18.5714285714286
 Mon May 04 17:00:00 2020 PDT |      3 | 23.5714285714286
 Sun May 03 17:00:00 2020 PDT |      0 | 15.7647058823529
 Sun May 03 17:00:00 2020 PDT |      1 | 24.3142857142857
 Sun May 03 17:00:00 2020 PDT |      2 | 14.8205128205128
 Sun May 03 17:00:00 2020 PDT |      3 | 18.1111111111111
 Sat May 02 17:00:00 2020 PDT |      0 |               17
 Sat May 02 17:00:00 2020 PDT |      1 |            18.75
 Sat May 02 17:00:00 2020 PDT |      2 |               20
 Sat May 02 17:00:00 2020 PDT |      3 | 21.5217391304348
(12 rows)

-- Refresh the rest
SELECT refresh_continuous_aggregate('daily_temp', '2020-05-01', '2020-05-03');
 refresh_continuous_aggregate 
------------------------------
 
(1 row)

-- Compare the aggregate to the equivalent query on the source table
SELECT * FROM daily_temp
ORDER BY day DESC, device;
             day              | device |     avg_temp     
------------------------------+--------+------------------
 Mon May 04 17:00:00 2020 PDT |      0 | 19.3846153846154
 Mon May 04 17:00:00 2020 PDT |      1 | 16.5555555555556
 Mon May 04 17:00:00 2020 PDT |      2 | 18.5714285714286
 Mon May 04 17:00:00 2020 PDT |      3 | 23.5714285714286
 Sun May 03 17:00:00 2020 PDT |      0 | 15.7647058823529
 Sun May 03 17:00:00 2020 PDT |      1 | 24.3142857142857
 Sun May 03 17:00:00 2020 PDT |      2 | 14.8205128205128
 Sun May 03 17:00:00 2020 PDT |      3 | 18.1111111111111
 Sat May 02 17:00:00 2020 PDT |      0 |               17
 Sat May 02 17:00:00 2020 PDT |      1 |            18.75
 Sat May 02 17:00:00 2020 PDT |      2 |               20
 Sat May 02 17:00:00 2020 PDT |      3 | 21.5217391304348
 Fri May 01 17:00:00 2020 PDT |      0 |               19
 Fri May 01 17:00:00 2020 PDT |      1 | 15.1463414634146
 Fri May 01 17:00:00 2020 PDT |      2 | 19.7674418604651
 Fri May 01 17:00:00 2020 PDT |      3 |            22.25
 Thu Apr 30 17:00:00 2020 PDT |      0 | 17.6666666666667
 Thu Apr 30 17:00:00 2020 PDT |      1 | 18.8333333333333
 Thu Apr 30 17:00:00 2020 PDT |      2 | 16.7586206896552
 Thu Apr 30 17:00:00 2020 PDT |      3 |            20.76
(20 rows)

SELECT time_bucket('1 day', time) AS day, device, avg(temp) AS avg_temp
FROM conditions
GROUP BY 1,2
ORDER BY 1 DESC,2;
             day              | device |     avg_temp     
------------------------------+--------+------------------
 Mon May 04 17:00:00 2020 PDT |      0 | 19.3846153846154
 Mon May 04 17:00:00 2020 PDT |      1 | 16.5555555555556
 Mon May 04 17:00:00 2020 PDT |      2 | 18.5714285714286
 Mon May 04 17:00:00 2020 PDT |      3 | 23.5714285714286
 Sun May 03 17:00:00 2020 PDT |      0 | 15.7647058823529
 Sun May 03 17:00:00 2020 PDT |      1 | 24.3142857142857
 Sun May 03 17:00:00 2020 PDT |      2 | 14.8205128205128
 Sun May 03 17:00:00 2020 PDT |      3 | 18.1111111111111
 Sat May 02 17:00:00 2020 PDT |      0 |               17
 Sat May 02 17:00:00 2020 PDT |      1 |            18.75
 Sat May 02 17:00:00 2020 PDT |      2 |               20
 Sat May 02 17:00:00 2020 PDT |      3 | 21.5217391304348
 Fri May 01 17:00:00 2020 PDT |      0 |               19
 Fri May 01 17:00:00 2020 PDT |      1 | 15.1463414634146
 Fri May 01 17:00:00 2020 PDT |      2 | 19.7674418604651
 Fri May 01 17:00:00 2020 PDT |      3 |            22.25
 Thu Apr 30 17:00:00 2020 PDT |      0 | 17.6666666666667
 Thu Apr 30 17:00:00 2020 PDT |      1 | 18.8333333333333
 Thu Apr 30 17:00:00 2020 PDT |      2 | 16.7586206896552
 Thu Apr 30 17:00:00 2020 PDT |      3 |            20.76
(20 rows)

-- Test unusual, but valid input
SELECT refresh_continuous_aggregate('daily_temp', '2020-05-01'::timestamptz, '2020-05-03'::date);
 refresh_continuous_aggregate 
------------------------------
 
(1 row)

SELECT refresh_continuous_aggregate('daily_temp', '2020-05-01'::date, '2020-05-03'::date);
 refresh_continuous_aggregate 
------------------------------
 
(1 row)

SELECT refresh_continuous_aggregate('daily_temp', 0, '2020-05-01');
 refresh_continuous_aggregate 
------------------------------
 
(1 row)

-- Unbounded window forward in time
\set ON_ERROR_STOP 0
-- Currently doesn't work due to timestamp overflow bug in a query optimization
SELECT refresh_continuous_aggregate('daily_temp', '2020-05-03', NULL);
ERROR:  timestamp out of range
SELECT refresh_continuous_aggregate('daily_temp', NULL, NULL);
ERROR:  timestamp out of range
\set ON_ERROR_STOP 1
-- Unbounded window back in time
SELECT refresh_continuous_aggregate('daily_temp', NULL, '2020-05-01');
 refresh_continuous_aggregate 
------------------------------
 
(1 row)

-- Test bad input
\set ON_ERROR_STOP 0
-- Bad continuous aggregate name
SELECT refresh_continuous_aggregate(NULL, '2020-05-03', '2020-05-05');
ERROR:  invalid continuous aggregate
SELECT refresh_continuous_aggregate('xyz', '2020-05-03', '2020-05-05');
ERROR:  relation "xyz" does not exist at character 37
-- Valid object, but not a continuous aggregate
SELECT refresh_continuous_aggregate('conditions', '2020-05-03', '2020-05-05');
ERROR:  relation "conditions" is not a continuous aggregate
-- Object ID with no object
SELECT refresh_continuous_aggregate(1, '2020-05-03', '2020-05-05');
ERROR:  continuous aggregate does not exist
-- Lacking arguments
SELECT refresh_continuous_aggregate('daily_temp');
ERROR:  function refresh_continuous_aggregate(unknown) does not exist at character 8
SELECT refresh_continuous_aggregate('daily_temp', '2020-05-03');
ERROR:  function refresh_continuous_aggregate(unknown, unknown) does not exist at character 8
-- Bad time ranges
SELECT refresh_continuous_aggregate('daily_temp', 'xyz', '2020-05-05');
ERROR:  invalid input syntax for type timestamp with time zone: "xyz"
SELECT refresh_continuous_aggregate('daily_temp', '2020-05-03', 'xyz');
ERROR:  invalid input syntax for type timestamp with time zone: "xyz"
SELECT refresh_continuous_aggregate('daily_temp', '2020-05-03', '2020-05-01');
ERROR:  invalid refresh window
SELECT refresh_continuous_aggregate('daily_temp', '2020-05-03', '2020-05-03');
ERROR:  invalid refresh window
-- Bad time input
SELECT refresh_continuous_aggregate('daily_temp', '2020-05-01'::text, '2020-05-03'::text);
ERROR:  unknown time type OID 25
\set ON_ERROR_STOP 1
-- Test different time types
CREATE TABLE conditions_date (time date NOT NULL, device int, temp float);
SELECT create_hypertable('conditions_date', 'time');
      create_hypertable       
------------------------------
 (3,public,conditions_date,t)
(1 row)

CREATE VIEW daily_temp_date
WITH (timescaledb.continuous,
      timescaledb.materialized_only=true)
AS
SELECT time_bucket('1 day', time) AS day, device, avg(temp) AS avg_temp
FROM conditions_date
GROUP BY 1,2;
NOTICE:  adding index _materialized_hypertable_4_device_day_idx ON _timescaledb_internal._materialized_hypertable_4 USING BTREE(device, day)
SELECT refresh_continuous_aggregate('daily_temp_date', '2020-05-01', '2020-05-03');
 refresh_continuous_aggregate 
------------------------------
 
(1 row)

CREATE TABLE conditions_int (time int NOT NULL, device int, temp float);
SELECT create_hypertable('conditions_int', 'time', chunk_time_interval => 10);
      create_hypertable      
-----------------------------
 (5,public,conditions_int,t)
(1 row)

CREATE OR REPLACE FUNCTION integer_now_conditions()
RETURNS int LANGUAGE SQL STABLE AS
$$
    SELECT coalesce(max(time), 0)
    FROM conditions_int
$$;
SELECT set_integer_now_func('conditions_int', 'integer_now_conditions');
 set_integer_now_func 
----------------------
 
(1 row)

CREATE VIEW daily_temp_int
WITH (timescaledb.continuous,
      timescaledb.materialized_only=true)
AS
SELECT time_bucket(4, time) AS day, device, avg(temp) AS avg_temp
FROM conditions_int
GROUP BY 1,2;
NOTICE:  adding index _materialized_hypertable_6_device_day_idx ON _timescaledb_internal._materialized_hypertable_6 USING BTREE(device, day)
SELECT refresh_continuous_aggregate('daily_temp_int', 5, 10);
 refresh_continuous_aggregate 
------------------------------
 
(1 row)

