-- This file and its contents are licensed under the Apache License 2.0.
-- Please see the included NOTICE for copyright information and
-- LICENSE-APACHE for a copy of the license.
-- we run these with analyze to confirm that nodes that are not
-- needed to fulfill the limit are not executed
-- unfortunately this doesn't work on PostgreSQL 9.6 which lacks
-- the ability to turn off analyze timing summary so we run
-- them without ANALYZE on PostgreSQL 9.6, but since LATERAL plans
-- are different across versions we need version specific output
-- here anyway.
-- look at postgres version to decide whether we run with analyze or without
SELECT
  CASE WHEN current_setting('server_version_num')::int >= 100000
    THEN 'EXPLAIN (analyze, costs off, timing off, summary off)'
    ELSE 'EXPLAIN (costs off)'
  END AS "PREFIX"
\gset
\ir include/plan_ordered_append_load.sql
-- This file and its contents are licensed under the Apache License 2.0.
-- Please see the included NOTICE for copyright information and
-- LICENSE-APACHE for a copy of the license.
-- create a table where we create chunks in order
CREATE TABLE ordered_append(time timestamptz NOT NULL, device_id INT, value float);
SELECT create_hypertable('ordered_append','time');
      create_hypertable      
-----------------------------
 (1,public,ordered_append,t)
(1 row)

CREATE index on ordered_append(time DESC,device_id);
INSERT INTO ordered_append VALUES('2000-01-01',1,1.0);
INSERT INTO ordered_append VALUES('2000-01-08',1,2.0);
INSERT INTO ordered_append VALUES('2000-01-15',1,3.0);
-- create a second table where we create chunks in reverse order
CREATE TABLE ordered_append_reverse(time timestamptz NOT NULL, device_id INT, value float);
SELECT create_hypertable('ordered_append_reverse','time');
          create_hypertable          
-------------------------------------
 (2,public,ordered_append_reverse,t)
(1 row)

INSERT INTO ordered_append_reverse VALUES('2000-01-15',1,1.0);
INSERT INTO ordered_append_reverse VALUES('2000-01-08',1,2.0);
INSERT INTO ordered_append_reverse VALUES('2000-01-01',1,3.0);
\ir include/plan_ordered_append_query.sql
-- This file and its contents are licensed under the Apache License 2.0.
-- Please see the included NOTICE for copyright information and
-- LICENSE-APACHE for a copy of the license.
-- print chunks ordered by time to ensure ordering we want
SELECT
  ht.table_name AS hypertable,
  c.table_name AS chunk,
  ds.range_start
FROM
  _timescaledb_catalog.chunk c
  INNER JOIN _timescaledb_catalog.chunk_constraint cc ON c.id = cc.chunk_id
  INNER JOIN _timescaledb_catalog.dimension_slice ds ON ds.id=cc.dimension_slice_id
  INNER JOIN _timescaledb_catalog.dimension d ON ds.dimension_id = d.id
  INNER JOIN _timescaledb_catalog.hypertable ht ON d.hypertable_id = ht.id
ORDER BY ht.table_name, range_start;
       hypertable       |      chunk       |   range_start   
------------------------+------------------+-----------------
 ordered_append         | _hyper_1_1_chunk | 946512000000000
 ordered_append         | _hyper_1_2_chunk | 947116800000000
 ordered_append         | _hyper_1_3_chunk | 947721600000000
 ordered_append_reverse | _hyper_2_6_chunk | 946512000000000
 ordered_append_reverse | _hyper_2_5_chunk | 947116800000000
 ordered_append_reverse | _hyper_2_4_chunk | 947721600000000
(6 rows)

-- test ASC for ordered chunks
:PREFIX SELECT
  time, device_id, value
FROM ordered_append
ORDER BY time ASC LIMIT 1;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Limit
   ->  Append
         ->  Index Scan Backward using _hyper_1_1_chunk_ordered_append_time_device_id_idx on _hyper_1_1_chunk
         ->  Index Scan Backward using _hyper_1_2_chunk_ordered_append_time_device_id_idx on _hyper_1_2_chunk
         ->  Index Scan Backward using _hyper_1_3_chunk_ordered_append_time_device_id_idx on _hyper_1_3_chunk
(5 rows)

-- test DESC for ordered chunks
:PREFIX SELECT
  time, device_id, value
FROM ordered_append
ORDER BY time DESC LIMIT 1;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Limit
   ->  Append
         ->  Index Scan using _hyper_1_3_chunk_ordered_append_time_device_id_idx on _hyper_1_3_chunk
         ->  Index Scan using _hyper_1_2_chunk_ordered_append_time_device_id_idx on _hyper_1_2_chunk
         ->  Index Scan using _hyper_1_1_chunk_ordered_append_time_device_id_idx on _hyper_1_1_chunk
(5 rows)

-- test ASC for reverse ordered chunks
:PREFIX SELECT
  time, device_id, value
FROM ordered_append_reverse
ORDER BY time ASC LIMIT 1;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit
   ->  Append
         ->  Index Scan Backward using _hyper_2_6_chunk_ordered_append_reverse_time_idx on _hyper_2_6_chunk
         ->  Index Scan Backward using _hyper_2_5_chunk_ordered_append_reverse_time_idx on _hyper_2_5_chunk
         ->  Index Scan Backward using _hyper_2_4_chunk_ordered_append_reverse_time_idx on _hyper_2_4_chunk
(5 rows)

-- test DESC for reverse ordered chunks
:PREFIX SELECT
  time, device_id, value
FROM ordered_append_reverse
ORDER BY time DESC LIMIT 1;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Limit
   ->  Append
         ->  Index Scan using _hyper_2_4_chunk_ordered_append_reverse_time_idx on _hyper_2_4_chunk
         ->  Index Scan using _hyper_2_5_chunk_ordered_append_reverse_time_idx on _hyper_2_5_chunk
         ->  Index Scan using _hyper_2_6_chunk_ordered_append_reverse_time_idx on _hyper_2_6_chunk
(5 rows)

-- test query with ORDER BY column not in targetlist
:PREFIX SELECT
  device_id, value
FROM ordered_append
ORDER BY time ASC LIMIT 1;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Limit
   ->  Append
         ->  Index Scan Backward using _hyper_1_1_chunk_ordered_append_time_device_id_idx on _hyper_1_1_chunk
         ->  Index Scan Backward using _hyper_1_2_chunk_ordered_append_time_device_id_idx on _hyper_1_2_chunk
         ->  Index Scan Backward using _hyper_1_3_chunk_ordered_append_time_device_id_idx on _hyper_1_3_chunk
(5 rows)

-- ORDER BY may include other columns after time column
:PREFIX SELECT
  time, device_id, value
FROM ordered_append
ORDER BY time DESC, device_id LIMIT 1;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Limit
   ->  Append
         ->  Index Scan using _hyper_1_3_chunk_ordered_append_time_device_id_idx on _hyper_1_3_chunk
         ->  Index Scan using _hyper_1_2_chunk_ordered_append_time_device_id_idx on _hyper_1_2_chunk
         ->  Index Scan using _hyper_1_1_chunk_ordered_append_time_device_id_idx on _hyper_1_1_chunk
(5 rows)

-- queries with ORDER BY non-time column shouldn't use ordered append
:PREFIX SELECT
  time, device_id, value
FROM ordered_append
ORDER BY device_id LIMIT 1;
                   QUERY PLAN                   
------------------------------------------------
 Limit
   ->  Sort
         Sort Key: ordered_append.device_id
         ->  Append
               ->  Seq Scan on ordered_append
               ->  Seq Scan on _hyper_1_1_chunk
               ->  Seq Scan on _hyper_1_2_chunk
               ->  Seq Scan on _hyper_1_3_chunk
(8 rows)

-- time column must be primary sort order
:PREFIX SELECT
  time, device_id, value
FROM ordered_append
ORDER BY device_id, time LIMIT 1;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Limit
   ->  Sort
         Sort Key: ordered_append.device_id, ordered_append."time"
         ->  Append
               ->  Seq Scan on ordered_append
               ->  Seq Scan on _hyper_1_1_chunk
               ->  Seq Scan on _hyper_1_2_chunk
               ->  Seq Scan on _hyper_1_3_chunk
(8 rows)

-- queries without LIMIT shouldnt use ordered append
:PREFIX SELECT
  time, device_id, value
FROM ordered_append
ORDER BY time ASC;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Merge Append
   Sort Key: ordered_append."time"
   ->  Index Scan Backward using ordered_append_time_device_id_idx on ordered_append
   ->  Index Scan Backward using _hyper_1_1_chunk_ordered_append_time_device_id_idx on _hyper_1_1_chunk
   ->  Index Scan Backward using _hyper_1_2_chunk_ordered_append_time_device_id_idx on _hyper_1_2_chunk
   ->  Index Scan Backward using _hyper_1_3_chunk_ordered_append_time_device_id_idx on _hyper_1_3_chunk
(6 rows)

-- queries without ORDER BY shouldnt use ordered append (still uses append though)
:PREFIX SELECT
  time, device_id, value
FROM ordered_append
LIMIT 1;
                QUERY PLAN                
------------------------------------------
 Limit
   ->  Append
         ->  Seq Scan on ordered_append
         ->  Seq Scan on _hyper_1_1_chunk
         ->  Seq Scan on _hyper_1_2_chunk
         ->  Seq Scan on _hyper_1_3_chunk
(6 rows)

-- test interaction with constraint exclusion
:PREFIX SELECT
  time, device_id, value
FROM ordered_append
WHERE time > '2000-01-07'
ORDER BY time ASC LIMIT 1;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Limit
   ->  Append
         ->  Index Scan Backward using _hyper_1_2_chunk_ordered_append_time_device_id_idx on _hyper_1_2_chunk
               Index Cond: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
         ->  Index Scan Backward using _hyper_1_3_chunk_ordered_append_time_device_id_idx on _hyper_1_3_chunk
               Index Cond: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
(6 rows)

:PREFIX SELECT
  time, device_id, value
FROM ordered_append
WHERE time > '2000-01-07'
ORDER BY time DESC LIMIT 1;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Limit
   ->  Append
         ->  Index Scan using _hyper_1_3_chunk_ordered_append_time_device_id_idx on _hyper_1_3_chunk
               Index Cond: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
         ->  Index Scan using _hyper_1_2_chunk_ordered_append_time_device_id_idx on _hyper_1_2_chunk
               Index Cond: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
(6 rows)

-- min/max queries
:PREFIX SELECT max(time) FROM ordered_append;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Result
   InitPlan 1 (returns $0)
     ->  Limit
           ->  Append
                 ->  Index Only Scan using _hyper_1_3_chunk_ordered_append_time_device_id_idx on _hyper_1_3_chunk
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Only Scan using _hyper_1_2_chunk_ordered_append_time_device_id_idx on _hyper_1_2_chunk
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Only Scan using _hyper_1_1_chunk_ordered_append_time_device_id_idx on _hyper_1_1_chunk
                       Index Cond: ("time" IS NOT NULL)
(10 rows)

:PREFIX SELECT min(time) FROM ordered_append;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Result
   InitPlan 1 (returns $0)
     ->  Limit
           ->  Append
                 ->  Index Only Scan Backward using _hyper_1_1_chunk_ordered_append_time_device_id_idx on _hyper_1_1_chunk
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Only Scan Backward using _hyper_1_2_chunk_ordered_append_time_device_id_idx on _hyper_1_2_chunk
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Only Scan Backward using _hyper_1_3_chunk_ordered_append_time_device_id_idx on _hyper_1_3_chunk
                       Index Cond: ("time" IS NOT NULL)
(10 rows)

-- test first/last (doesn't use ordered append yet)
:PREFIX SELECT first(time, time) FROM ordered_append;
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Result
   InitPlan 1 (returns $0)
     ->  Limit
           ->  Result
                 ->  Merge Append
                       Sort Key: ordered_append."time"
                       ->  Index Only Scan Backward using ordered_append_time_device_id_idx on ordered_append
                             Index Cond: ("time" IS NOT NULL)
                       ->  Index Only Scan Backward using _hyper_1_1_chunk_ordered_append_time_device_id_idx on _hyper_1_1_chunk
                             Index Cond: ("time" IS NOT NULL)
                       ->  Index Only Scan Backward using _hyper_1_2_chunk_ordered_append_time_device_id_idx on _hyper_1_2_chunk
                             Index Cond: ("time" IS NOT NULL)
                       ->  Index Only Scan Backward using _hyper_1_3_chunk_ordered_append_time_device_id_idx on _hyper_1_3_chunk
                             Index Cond: ("time" IS NOT NULL)
(14 rows)

:PREFIX SELECT last(time, time) FROM ordered_append;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Result
   InitPlan 1 (returns $0)
     ->  Limit
           ->  Result
                 ->  Merge Append
                       Sort Key: ordered_append."time" DESC
                       ->  Index Only Scan using ordered_append_time_device_id_idx on ordered_append
                             Index Cond: ("time" IS NOT NULL)
                       ->  Index Only Scan using _hyper_1_1_chunk_ordered_append_time_device_id_idx on _hyper_1_1_chunk
                             Index Cond: ("time" IS NOT NULL)
                       ->  Index Only Scan using _hyper_1_2_chunk_ordered_append_time_device_id_idx on _hyper_1_2_chunk
                             Index Cond: ("time" IS NOT NULL)
                       ->  Index Only Scan using _hyper_1_3_chunk_ordered_append_time_device_id_idx on _hyper_1_3_chunk
                             Index Cond: ("time" IS NOT NULL)
(14 rows)

-- test query with time_bucket
:PREFIX SELECT
  time_bucket('1d',time), device_id, value
FROM ordered_append
ORDER BY time ASC LIMIT 1;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Limit
   ->  Result
         ->  Append
               ->  Index Scan Backward using _hyper_1_1_chunk_ordered_append_time_device_id_idx on _hyper_1_1_chunk
               ->  Index Scan Backward using _hyper_1_2_chunk_ordered_append_time_device_id_idx on _hyper_1_2_chunk
               ->  Index Scan Backward using _hyper_1_3_chunk_ordered_append_time_device_id_idx on _hyper_1_3_chunk
(6 rows)

-- test query with order by time_bucket (should not use ordered append)
:PREFIX SELECT
  time_bucket('1d',time), device_id, value
FROM ordered_append
ORDER BY 1 LIMIT 1;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Limit
   ->  Result
         ->  Merge Append
               Sort Key: (time_bucket('@ 1 day'::interval, ordered_append."time"))
               ->  Index Scan Backward using ordered_append_time_device_id_idx on ordered_append
               ->  Index Scan Backward using _hyper_1_1_chunk_ordered_append_time_device_id_idx on _hyper_1_1_chunk
               ->  Index Scan Backward using _hyper_1_2_chunk_ordered_append_time_device_id_idx on _hyper_1_2_chunk
               ->  Index Scan Backward using _hyper_1_3_chunk_ordered_append_time_device_id_idx on _hyper_1_3_chunk
(8 rows)

-- test query with order by time_bucket (should not use ordered append)
:PREFIX SELECT
  time_bucket('1d',time), device_id, value
FROM ordered_append
ORDER BY time_bucket('1d',time) LIMIT 1;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Limit
   ->  Result
         ->  Merge Append
               Sort Key: (time_bucket('@ 1 day'::interval, ordered_append."time"))
               ->  Index Scan Backward using ordered_append_time_device_id_idx on ordered_append
               ->  Index Scan Backward using _hyper_1_1_chunk_ordered_append_time_device_id_idx on _hyper_1_1_chunk
               ->  Index Scan Backward using _hyper_1_2_chunk_ordered_append_time_device_id_idx on _hyper_1_2_chunk
               ->  Index Scan Backward using _hyper_1_3_chunk_ordered_append_time_device_id_idx on _hyper_1_3_chunk
(8 rows)

-- test query with now() should result in ordered append with constraint aware append
:PREFIX SELECT * FROM ordered_append WHERE time < now() + '1 month'
ORDER BY time DESC limit 1;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Limit
   ->  Custom Scan (ConstraintAwareAppend)
         Hypertable: ordered_append
         Chunks left after exclusion: 3
         ->  Append
               ->  Index Scan using _hyper_1_3_chunk_ordered_append_time_device_id_idx on _hyper_1_3_chunk
                     Index Cond: ("time" < (now() + '@ 1 mon'::interval))
               ->  Index Scan using _hyper_1_2_chunk_ordered_append_time_device_id_idx on _hyper_1_2_chunk
                     Index Cond: ("time" < (now() + '@ 1 mon'::interval))
               ->  Index Scan using _hyper_1_1_chunk_ordered_append_time_device_id_idx on _hyper_1_1_chunk
                     Index Cond: ("time" < (now() + '@ 1 mon'::interval))
(11 rows)

-- test CTE
:PREFIX WITH i AS (SELECT * FROM ordered_append WHERE time < now() ORDER BY time DESC limit 100)
SELECT * FROM i;
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 CTE Scan on i
   CTE i
     ->  Limit
           ->  Custom Scan (ConstraintAwareAppend)
                 Hypertable: ordered_append
                 Chunks left after exclusion: 3
                 ->  Append
                       ->  Index Scan using _hyper_1_3_chunk_ordered_append_time_device_id_idx on _hyper_1_3_chunk
                             Index Cond: ("time" < now())
                       ->  Index Scan using _hyper_1_2_chunk_ordered_append_time_device_id_idx on _hyper_1_2_chunk
                             Index Cond: ("time" < now())
                       ->  Index Scan using _hyper_1_1_chunk_ordered_append_time_device_id_idx on _hyper_1_1_chunk
                             Index Cond: ("time" < now())
(13 rows)

-- test LATERAL with ordered append in the outer query
:PREFIX SELECT * FROM ordered_append, LATERAL(SELECT * FROM (VALUES (1),(2)) v) l ORDER BY time DESC limit 2;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Limit
   ->  Nested Loop
         ->  Append
               ->  Index Scan using _hyper_1_3_chunk_ordered_append_time_device_id_idx on _hyper_1_3_chunk
               ->  Index Scan using _hyper_1_2_chunk_ordered_append_time_device_id_idx on _hyper_1_2_chunk
               ->  Index Scan using _hyper_1_1_chunk_ordered_append_time_device_id_idx on _hyper_1_1_chunk
         ->  Values Scan on "*VALUES*"
(7 rows)

-- test LATERAL with ordered append in the lateral query
:PREFIX SELECT * FROM (VALUES (1),(2)) v, LATERAL(SELECT * FROM ordered_append ORDER BY time DESC limit 2) l;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Nested Loop
   ->  Limit
         ->  Append
               ->  Index Scan using _hyper_1_3_chunk_ordered_append_time_device_id_idx on _hyper_1_3_chunk
               ->  Index Scan using _hyper_1_2_chunk_ordered_append_time_device_id_idx on _hyper_1_2_chunk
               ->  Index Scan using _hyper_1_1_chunk_ordered_append_time_device_id_idx on _hyper_1_1_chunk
   ->  Values Scan on "*VALUES*"
(7 rows)

