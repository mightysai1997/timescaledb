-- This file and its contents are licensed under the Apache License 2.0.
-- Please see the included NOTICE for copyright information and
-- LICENSE-APACHE for a copy of the license.
CREATE TABLE reloptions_test(time integer, temp float8, color integer)
WITH (fillfactor=75, autovacuum_vacuum_threshold=100);
SELECT create_hypertable('reloptions_test', 'time', chunk_time_interval => 3);
NOTICE:  adding not-null constraint to column "time"
      create_hypertable       
------------------------------
 (1,public,reloptions_test,t)
(1 row)

INSERT INTO reloptions_test VALUES (4, 24.3, 1), (9, 13.3, 2);
-- Show that reloptions are inherited by chunks
SELECT relname, reloptions FROM pg_class
WHERE relname ~ '^_hyper.*' AND relkind = 'r';
     relname      |                   reloptions                    
------------------+-------------------------------------------------
 _hyper_1_1_chunk | {fillfactor=75,autovacuum_vacuum_threshold=100}
 _hyper_1_2_chunk | {fillfactor=75,autovacuum_vacuum_threshold=100}
(2 rows)

-- Alter reloptions
ALTER TABLE reloptions_test SET (fillfactor=80, parallel_workers=8);
\set ON_ERROR_STOP 0
ALTER TABLE reloptions_test SET (fillfactor=80), SET (parallel_workers=8);
ERROR:  ALTER TABLE <hypertable> SET does not support multiple clauses
\set ON_ERROR_STOP 1
SELECT relname, reloptions FROM pg_class
WHERE relname ~ '^_hyper.*' AND relkind = 'r';
     relname      |                             reloptions                             
------------------+--------------------------------------------------------------------
 _hyper_1_1_chunk | {autovacuum_vacuum_threshold=100,fillfactor=80,parallel_workers=8}
 _hyper_1_2_chunk | {autovacuum_vacuum_threshold=100,fillfactor=80,parallel_workers=8}
(2 rows)

ALTER TABLE reloptions_test RESET (fillfactor);
SELECT relname, reloptions FROM pg_class
WHERE relname ~ '^_hyper.*' AND relkind = 'r';
     relname      |                      reloptions                      
------------------+------------------------------------------------------
 _hyper_1_1_chunk | {autovacuum_vacuum_threshold=100,parallel_workers=8}
 _hyper_1_2_chunk | {autovacuum_vacuum_threshold=100,parallel_workers=8}
(2 rows)

-- Test reloptions on a regular table
CREATE TABLE reloptions_test2(time integer, temp float8, color integer);
ALTER TABLE reloptions_test2 SET (fillfactor=80, parallel_workers=8);
ALTER TABLE reloptions_test2 SET (fillfactor=80), SET (parallel_workers=8);
DROP TABLE reloptions_test2;
-- Test hypertable creation using storage options
-- time column
CREATE TABLE test(time timestamptz NOT NULL, device_id int);
ALTER TABLE test
SET (timescaledb.hypertable, timescaledb.time_column = 'time');
INSERT INTO test VALUES ('2004-10-10 00:00:00+00', 1);
INSERT INTO test VALUES ('2004-10-20 00:00:00+00', 2);
SELECT show_chunks('test');
              show_chunks               
----------------------------------------
 _timescaledb_internal._hyper_2_3_chunk
 _timescaledb_internal._hyper_2_4_chunk
(2 rows)

DROP TABLE test;
-- partitioning column
CREATE TABLE test(time timestamptz NOT NULL, device_id int);
ALTER TABLE test
SET (timescaledb.hypertable,
     timescaledb.time_column = 'time',
     timescaledb.partitioning_column = 'device_id',
     timescaledb.number_partitions = '4');
INSERT INTO test VALUES ('2004-10-10 00:00:00+00', 1);
INSERT INTO test VALUES ('2004-10-20 00:00:00+00', 2);
INSERT INTO test VALUES ('2004-10-30 00:00:00+00', 3);
INSERT INTO test VALUES ('2004-11-10 00:00:00+00', 4);
SELECT show_chunks('test');
              show_chunks               
----------------------------------------
 _timescaledb_internal._hyper_3_5_chunk
 _timescaledb_internal._hyper_3_6_chunk
 _timescaledb_internal._hyper_3_7_chunk
 _timescaledb_internal._hyper_3_8_chunk
(4 rows)

DROP TABLE test;
-- time_partitioning_func
CREATE TABLE test(time text NOT NULL);
CREATE OR REPLACE FUNCTION time_partfunc(source text)
    RETURNS TIMESTAMPTZ LANGUAGE PLPGSQL IMMUTABLE AS
$BODY$
BEGIN
    RETURN timezone('UTC', to_timestamp(source));
END
$BODY$;
ALTER TABLE test
SET (timescaledb.hypertable,
     timescaledb.time_column = 'time',
     timescaledb.time_partitioning_func = 'time_partfunc');
DROP TABLE test;
-- chunk_time_interval
-- integer
CREATE TABLE test(time timestamptz NOT NULL, device_id int);
ALTER TABLE test
SET (timescaledb.hypertable,
     timescaledb.time_column = 'time',
     timescaledb.chunk_time_interval = '123');
WARNING:  unexpected interval: smaller than one second
INSERT INTO test VALUES ('2004-10-10 00:00:00+00', 1);
INSERT INTO test VALUES ('2004-10-20 00:00:00+00', 2);
SELECT show_chunks('test');
               show_chunks               
-----------------------------------------
 _timescaledb_internal._hyper_5_9_chunk
 _timescaledb_internal._hyper_5_10_chunk
(2 rows)

SELECT interval_length
FROM _timescaledb_catalog.dimension d
LEFT JOIN _timescaledb_catalog.hypertable h ON (d.hypertable_id = h.id)
WHERE h.schema_name = 'public' AND h.table_name = 'test'
ORDER BY d.id;
 interval_length 
-----------------
             123
(1 row)

DROP TABLE test;
-- interval
CREATE TABLE test(time timestamptz NOT NULL, device_id int);
ALTER TABLE test
SET (timescaledb.hypertable,
     timescaledb.time_column = 'time',
     timescaledb.chunk_time_interval = '1 day');
INSERT INTO test VALUES ('2004-10-10 00:00:00+00', 1);
INSERT INTO test VALUES ('2004-10-20 00:00:00+00', 2);
SELECT show_chunks('test');
               show_chunks               
-----------------------------------------
 _timescaledb_internal._hyper_6_11_chunk
 _timescaledb_internal._hyper_6_12_chunk
(2 rows)

SELECT interval_length
FROM _timescaledb_catalog.dimension d
LEFT JOIN _timescaledb_catalog.hypertable h ON (d.hypertable_id = h.id)
WHERE h.schema_name = 'public' AND h.table_name = 'test'
ORDER BY d.id;
 interval_length 
-----------------
     86400000000
(1 row)

DROP TABLE test;
-- test CREATE TABLE WITH ()
-- time column
CREATE TABLE test_with(time timestamptz NOT NULL, device_id int)
WITH (timescaledb.hypertable, timescaledb.time_column = 'time');
INSERT INTO test_with VALUES ('2004-10-10 00:00:00+00', 1);
INSERT INTO test_with VALUES ('2004-10-20 00:00:00+00', 2);
SELECT show_chunks('test_with');
               show_chunks               
-----------------------------------------
 _timescaledb_internal._hyper_7_13_chunk
 _timescaledb_internal._hyper_7_14_chunk
(2 rows)

DROP TABLE test_with;
-- interval
CREATE TABLE test_with(time timestamptz NOT NULL, device_id int)
WITH (timescaledb.hypertable,
      timescaledb.time_column = 'time',
      timescaledb.chunk_time_interval = '1 day');
INSERT INTO test_with VALUES ('2004-10-10 00:00:00+00', 1);
INSERT INTO test_with VALUES ('2004-10-20 00:00:00+00', 2);
SELECT show_chunks('test_with');
               show_chunks               
-----------------------------------------
 _timescaledb_internal._hyper_8_15_chunk
 _timescaledb_internal._hyper_8_16_chunk
(2 rows)

SELECT interval_length
FROM _timescaledb_catalog.dimension d
LEFT JOIN _timescaledb_catalog.hypertable h ON (d.hypertable_id = h.id)
WHERE h.schema_name = 'public' AND h.table_name = 'test_with'
ORDER BY d.id;
 interval_length 
-----------------
     86400000000
(1 row)

DROP TABLE test_with;
-- Test ALTER TABLE SET (chunk_time_interval)
CREATE TABLE test(time timestamptz NOT NULL, device_id int);
ALTER TABLE test
SET (timescaledb.hypertable,
     timescaledb.time_column = 'time',
     timescaledb.chunk_time_interval = '123');
WARNING:  unexpected interval: smaller than one second
INSERT INTO test VALUES ('2004-10-10 00:00:00+00', 1);
INSERT INTO test VALUES ('2004-10-20 00:00:00+00', 2);
SELECT show_chunks('test');
               show_chunks               
-----------------------------------------
 _timescaledb_internal._hyper_9_17_chunk
 _timescaledb_internal._hyper_9_18_chunk
(2 rows)

SELECT interval_length
FROM _timescaledb_catalog.dimension d
LEFT JOIN _timescaledb_catalog.hypertable h ON (d.hypertable_id = h.id)
WHERE h.schema_name = 'public' AND h.table_name = 'test'
ORDER BY d.id;
 interval_length 
-----------------
             123
(1 row)

ALTER TABLE test
SET (timescaledb.chunk_time_interval = '321');
WARNING:  unexpected interval: smaller than one second
SELECT interval_length
FROM _timescaledb_catalog.dimension d
LEFT JOIN _timescaledb_catalog.hypertable h ON (d.hypertable_id = h.id)
WHERE h.schema_name = 'public' AND h.table_name = 'test'
ORDER BY d.id;
 interval_length 
-----------------
             321
(1 row)

DROP TABLE test;
