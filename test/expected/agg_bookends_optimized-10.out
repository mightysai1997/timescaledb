-- This file and its contents are licensed under the Apache License 2.0.
-- Please see the included NOTICE for copyright information and
-- LICENSE-APACHE for a copy of the license.
SET timescaledb.disable_optimizations= 'off';
\set PREFIX 'EXPLAIN (costs off) '
\ir include/agg_bookends.sql
-- This file and its contents are licensed under the Apache License 2.0.
-- Please see the included NOTICE for copyright information and
-- LICENSE-APACHE for a copy of the license.
CREATE TABLE "btest"(time timestamp, time_alt timestamp, gp INTEGER, temp float, strid TEXT DEFAULT 'testing');
SELECT 1 AS hypertable_created FROM (SELECT create_hypertable('"btest"', 'time')) t;
psql:include/agg_bookends.sql:6: NOTICE:  adding not-null constraint to column "time"
 hypertable_created 
--------------------
                  1
(1 row)

INSERT INTO "btest" VALUES('2017-01-20T09:00:01', '2017-01-20T10:00:00', 1, 22.5);
INSERT INTO "btest" VALUES('2017-01-20T09:00:21', '2017-01-20T09:00:59', 1, 21.2);
INSERT INTO "btest" VALUES('2017-01-20T09:00:47', '2017-01-20T09:00:58', 1, 25.1);
INSERT INTO "btest" VALUES('2017-01-20T09:00:02', '2017-01-20T09:00:57', 2, 35.5);
INSERT INTO "btest" VALUES('2017-01-20T09:00:21', '2017-01-20T09:00:56', 2, 30.2);
--TOASTED;
INSERT INTO "btest" VALUES('2017-01-20T09:00:43', '2017-01-20T09:01:55', 2, 20.1, repeat('xyz', 1000000) );
:PREFIX SELECT time, gp, temp FROM btest ORDER BY time;
                QUERY PLAN                
------------------------------------------
 Sort
   Sort Key: btest."time"
   ->  Append
         ->  Seq Scan on btest
         ->  Seq Scan on _hyper_1_1_chunk
(5 rows)

:PREFIX SELECT last(temp, time) FROM "btest";
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Result
   InitPlan 1 (returns $0)
     ->  Limit
           ->  Merge Append
                 Sort Key: btest."time" DESC
                 ->  Index Scan using btest_time_idx on btest
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan using _hyper_1_1_chunk_btest_time_idx on _hyper_1_1_chunk
                       Index Cond: ("time" IS NOT NULL)
(9 rows)

:PREFIX SELECT first(temp, time) FROM "btest";
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Result
   InitPlan 1 (returns $0)
     ->  Limit
           ->  Merge Append
                 Sort Key: btest."time"
                 ->  Index Scan Backward using btest_time_idx on btest
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan Backward using _hyper_1_1_chunk_btest_time_idx on _hyper_1_1_chunk
                       Index Cond: ("time" IS NOT NULL)
(9 rows)

:PREFIX SELECT last(temp, time_alt) FROM "btest";
                QUERY PLAN                
------------------------------------------
 Aggregate
   ->  Append
         ->  Seq Scan on btest
         ->  Seq Scan on _hyper_1_1_chunk
(4 rows)

:PREFIX SELECT first(temp, time_alt) FROM "btest";
                QUERY PLAN                
------------------------------------------
 Aggregate
   ->  Append
         ->  Seq Scan on btest
         ->  Seq Scan on _hyper_1_1_chunk
(4 rows)

:PREFIX SELECT gp, last(temp, time) FROM "btest" GROUP BY gp ORDER BY gp;
                   QUERY PLAN                   
------------------------------------------------
 Sort
   Sort Key: btest.gp
   ->  HashAggregate
         Group Key: btest.gp
         ->  Append
               ->  Seq Scan on btest
               ->  Seq Scan on _hyper_1_1_chunk
(7 rows)

:PREFIX SELECT gp, first(temp, time) FROM "btest" GROUP BY gp ORDER BY gp;
                   QUERY PLAN                   
------------------------------------------------
 Sort
   Sort Key: btest.gp
   ->  HashAggregate
         Group Key: btest.gp
         ->  Append
               ->  Seq Scan on btest
               ->  Seq Scan on _hyper_1_1_chunk
(7 rows)

--check whole row
:PREFIX SELECT gp, first("btest", time) FROM "btest" GROUP BY gp ORDER BY gp;
                   QUERY PLAN                   
------------------------------------------------
 Sort
   Sort Key: btest.gp
   ->  HashAggregate
         Group Key: btest.gp
         ->  Append
               ->  Seq Scan on btest
               ->  Seq Scan on _hyper_1_1_chunk
(7 rows)

--check toasted col
:PREFIX SELECT gp, left(last(strid, time), 10) FROM "btest" GROUP BY gp ORDER BY gp;
                   QUERY PLAN                   
------------------------------------------------
 Sort
   Sort Key: btest.gp
   ->  HashAggregate
         Group Key: btest.gp
         ->  Append
               ->  Seq Scan on btest
               ->  Seq Scan on _hyper_1_1_chunk
(7 rows)

:PREFIX SELECT gp, last(temp, strid) FROM "btest" GROUP BY gp ORDER BY gp;
                   QUERY PLAN                   
------------------------------------------------
 Sort
   Sort Key: btest.gp
   ->  HashAggregate
         Group Key: btest.gp
         ->  Append
               ->  Seq Scan on btest
               ->  Seq Scan on _hyper_1_1_chunk
(7 rows)

--check null value as last element
INSERT INTO "btest" VALUES('2018-01-20T09:00:43', '2017-01-20T09:00:55', 2, NULL);
:PREFIX SELECT last(temp, time) FROM "btest";
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Result
   InitPlan 1 (returns $0)
     ->  Limit
           ->  Merge Append
                 Sort Key: btest."time" DESC
                 ->  Index Scan using btest_time_idx on btest
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan using _hyper_1_1_chunk_btest_time_idx on _hyper_1_1_chunk
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan using _hyper_1_2_chunk_btest_time_idx on _hyper_1_2_chunk
                       Index Cond: ("time" IS NOT NULL)
(11 rows)

--check non-null element "overrides" NULL because it comes after.
INSERT INTO "btest" VALUES('2019-01-20T09:00:43', '2018-01-20T09:00:55', 2, 30.5);
:PREFIX SELECT last(temp, time) FROM "btest";
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Result
   InitPlan 1 (returns $0)
     ->  Limit
           ->  Merge Append
                 Sort Key: btest."time" DESC
                 ->  Index Scan using btest_time_idx on btest
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan using _hyper_1_1_chunk_btest_time_idx on _hyper_1_1_chunk
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan using _hyper_1_2_chunk_btest_time_idx on _hyper_1_2_chunk
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan using _hyper_1_3_chunk_btest_time_idx on _hyper_1_3_chunk
                       Index Cond: ("time" IS NOT NULL)
(13 rows)

--check null cmp element is skipped
INSERT INTO "btest" VALUES('2018-01-20T09:00:43', NULL, 2, 32.3);
:PREFIX SELECT last(temp, time_alt) FROM "btest";
                QUERY PLAN                
------------------------------------------
 Aggregate
   ->  Append
         ->  Seq Scan on btest
         ->  Seq Scan on _hyper_1_1_chunk
         ->  Seq Scan on _hyper_1_2_chunk
         ->  Seq Scan on _hyper_1_3_chunk
(6 rows)

-- fist returns NULL value 
:PREFIX SELECT first(temp, time_alt) FROM "btest";
                QUERY PLAN                
------------------------------------------
 Aggregate
   ->  Append
         ->  Seq Scan on btest
         ->  Seq Scan on _hyper_1_1_chunk
         ->  Seq Scan on _hyper_1_2_chunk
         ->  Seq Scan on _hyper_1_3_chunk
(6 rows)

-- test first return non NULL value
INSERT INTO "btest" VALUES('2016-01-20T09:00:00', '2016-01-20T09:00:00', 2, 36.5);
:PREFIX SELECT first(temp, time_alt) FROM "btest";
                QUERY PLAN                
------------------------------------------
 Aggregate
   ->  Append
         ->  Seq Scan on btest
         ->  Seq Scan on _hyper_1_1_chunk
         ->  Seq Scan on _hyper_1_2_chunk
         ->  Seq Scan on _hyper_1_3_chunk
         ->  Seq Scan on _hyper_1_4_chunk
(7 rows)

--check non null cmp element insert after null cmp  
INSERT INTO "btest" VALUES('2020-01-20T09:00:43', '2020-01-20T09:00:43', 2, 35.3);
:PREFIX SELECT last(temp, time_alt) FROM "btest";
                QUERY PLAN                
------------------------------------------
 Aggregate
   ->  Append
         ->  Seq Scan on btest
         ->  Seq Scan on _hyper_1_1_chunk
         ->  Seq Scan on _hyper_1_2_chunk
         ->  Seq Scan on _hyper_1_3_chunk
         ->  Seq Scan on _hyper_1_4_chunk
         ->  Seq Scan on _hyper_1_5_chunk
(8 rows)

:PREFIX SELECT first(temp, time_alt) FROM "btest";
                QUERY PLAN                
------------------------------------------
 Aggregate
   ->  Append
         ->  Seq Scan on btest
         ->  Seq Scan on _hyper_1_1_chunk
         ->  Seq Scan on _hyper_1_2_chunk
         ->  Seq Scan on _hyper_1_3_chunk
         ->  Seq Scan on _hyper_1_4_chunk
         ->  Seq Scan on _hyper_1_5_chunk
(8 rows)

--cmp nulls should be ignored and not present in groups
:PREFIX SELECT gp, last(temp, time_alt) FROM "btest" GROUP BY gp ORDER BY gp;
                   QUERY PLAN                   
------------------------------------------------
 Sort
   Sort Key: btest.gp
   ->  HashAggregate
         Group Key: btest.gp
         ->  Append
               ->  Seq Scan on btest
               ->  Seq Scan on _hyper_1_1_chunk
               ->  Seq Scan on _hyper_1_2_chunk
               ->  Seq Scan on _hyper_1_3_chunk
               ->  Seq Scan on _hyper_1_4_chunk
               ->  Seq Scan on _hyper_1_5_chunk
(11 rows)

--Previously, some bugs were found with NULLS and numeric types, so test that
CREATE TABLE btest_numeric
(
    time timestamp,
    quantity numeric
);
SELECT 1 AS hypertable_created FROM (SELECT create_hypertable('btest_numeric', 'time')) t;
psql:include/agg_bookends.sql:63: NOTICE:  adding not-null constraint to column "time"
 hypertable_created 
--------------------
                  1
(1 row)

-- Insert rows, with rows that contain NULL values
INSERT INTO btest_numeric VALUES
    ('2019-01-20T09:00:43', NULL);
:PREFIX SELECT last(quantity, time) FROM btest_numeric;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Result
   InitPlan 1 (returns $0)
     ->  Limit
           ->  Merge Append
                 Sort Key: btest_numeric."time" DESC
                 ->  Index Scan using btest_numeric_time_idx on btest_numeric
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan using _hyper_2_6_chunk_btest_numeric_time_idx on _hyper_2_6_chunk
                       Index Cond: ("time" IS NOT NULL)
(9 rows)

--check non-null element "overrides" NULL because it comes after.
INSERT INTO btest_numeric VALUES('2020-01-20T09:00:43', 30.5);
:PREFIX SELECT last(quantity, time) FROM btest_numeric;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Result
   InitPlan 1 (returns $0)
     ->  Limit
           ->  Merge Append
                 Sort Key: btest_numeric."time" DESC
                 ->  Index Scan using btest_numeric_time_idx on btest_numeric
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan using _hyper_2_6_chunk_btest_numeric_time_idx on _hyper_2_6_chunk
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan using _hyper_2_7_chunk_btest_numeric_time_idx on _hyper_2_7_chunk
                       Index Cond: ("time" IS NOT NULL)
(11 rows)

-- do index scan for last
:PREFIX SELECT last(temp, time) FROM "btest"; 
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Result
   InitPlan 1 (returns $0)
     ->  Limit
           ->  Merge Append
                 Sort Key: btest."time" DESC
                 ->  Index Scan using btest_time_idx on btest
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan using _hyper_1_1_chunk_btest_time_idx on _hyper_1_1_chunk
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan using _hyper_1_2_chunk_btest_time_idx on _hyper_1_2_chunk
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan using _hyper_1_3_chunk_btest_time_idx on _hyper_1_3_chunk
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan using _hyper_1_4_chunk_btest_time_idx on _hyper_1_4_chunk
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan using _hyper_1_5_chunk_btest_time_idx on _hyper_1_5_chunk
                       Index Cond: ("time" IS NOT NULL)
(17 rows)

-- do index scan for first
:PREFIX SELECT first(temp, time) FROM "btest";
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Result
   InitPlan 1 (returns $0)
     ->  Limit
           ->  Merge Append
                 Sort Key: btest."time"
                 ->  Index Scan Backward using btest_time_idx on btest
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan Backward using _hyper_1_1_chunk_btest_time_idx on _hyper_1_1_chunk
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan Backward using _hyper_1_2_chunk_btest_time_idx on _hyper_1_2_chunk
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan Backward using _hyper_1_3_chunk_btest_time_idx on _hyper_1_3_chunk
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan Backward using _hyper_1_4_chunk_btest_time_idx on _hyper_1_4_chunk
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan Backward using _hyper_1_5_chunk_btest_time_idx on _hyper_1_5_chunk
                       Index Cond: ("time" IS NOT NULL)
(17 rows)

-- can't do index scan when ordering on non-index column
:PREFIX SELECT first(temp, time_alt) FROM "btest"; 
                QUERY PLAN                
------------------------------------------
 Aggregate
   ->  Append
         ->  Seq Scan on btest
         ->  Seq Scan on _hyper_1_1_chunk
         ->  Seq Scan on _hyper_1_2_chunk
         ->  Seq Scan on _hyper_1_3_chunk
         ->  Seq Scan on _hyper_1_4_chunk
         ->  Seq Scan on _hyper_1_5_chunk
(8 rows)

-- do index scan for subquery
:PREFIX SELECT * FROM (SELECT last(temp, time) FROM "btest") last;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Result
   InitPlan 1 (returns $0)
     ->  Limit
           ->  Merge Append
                 Sort Key: btest."time" DESC
                 ->  Index Scan using btest_time_idx on btest
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan using _hyper_1_1_chunk_btest_time_idx on _hyper_1_1_chunk
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan using _hyper_1_2_chunk_btest_time_idx on _hyper_1_2_chunk
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan using _hyper_1_3_chunk_btest_time_idx on _hyper_1_3_chunk
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan using _hyper_1_4_chunk_btest_time_idx on _hyper_1_4_chunk
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan using _hyper_1_5_chunk_btest_time_idx on _hyper_1_5_chunk
                       Index Cond: ("time" IS NOT NULL)
(17 rows)

-- can't do index scan when using group by
:PREFIX SELECT last(temp, time) FROM "btest" GROUP BY gp ORDER BY gp;
                      QUERY PLAN                      
------------------------------------------------------
 Sort
   Sort Key: btest.gp
   ->  HashAggregate
         Group Key: btest.gp
         ->  Result
               ->  Append
                     ->  Seq Scan on btest
                     ->  Seq Scan on _hyper_1_1_chunk
                     ->  Seq Scan on _hyper_1_2_chunk
                     ->  Seq Scan on _hyper_1_3_chunk
                     ->  Seq Scan on _hyper_1_4_chunk
                     ->  Seq Scan on _hyper_1_5_chunk
(12 rows)

-- do index scan when agg function is used in CTE subquery
:PREFIX WITH last_temp AS (SELECT last(temp, time) FROM "btest") SELECT * from last_temp;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 CTE Scan on last_temp
   CTE last_temp
     ->  Result
           InitPlan 1 (returns $0)
             ->  Limit
                   ->  Merge Append
                         Sort Key: btest."time" DESC
                         ->  Index Scan using btest_time_idx on btest
                               Index Cond: ("time" IS NOT NULL)
                         ->  Index Scan using _hyper_1_1_chunk_btest_time_idx on _hyper_1_1_chunk
                               Index Cond: ("time" IS NOT NULL)
                         ->  Index Scan using _hyper_1_2_chunk_btest_time_idx on _hyper_1_2_chunk
                               Index Cond: ("time" IS NOT NULL)
                         ->  Index Scan using _hyper_1_3_chunk_btest_time_idx on _hyper_1_3_chunk
                               Index Cond: ("time" IS NOT NULL)
                         ->  Index Scan using _hyper_1_4_chunk_btest_time_idx on _hyper_1_4_chunk
                               Index Cond: ("time" IS NOT NULL)
                         ->  Index Scan using _hyper_1_5_chunk_btest_time_idx on _hyper_1_5_chunk
                               Index Cond: ("time" IS NOT NULL)
(19 rows)

-- do index scan when using both FIRST and LAST aggregate functions
:PREFIX SELECT first(temp, time), last(temp, time) FROM "btest";
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Result
   InitPlan 1 (returns $1)
     ->  Limit
           ->  Merge Append
                 Sort Key: btest."time" DESC
                 ->  Index Scan using btest_time_idx on btest
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan using _hyper_1_1_chunk_btest_time_idx on _hyper_1_1_chunk
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan using _hyper_1_2_chunk_btest_time_idx on _hyper_1_2_chunk
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan using _hyper_1_3_chunk_btest_time_idx on _hyper_1_3_chunk
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan using _hyper_1_4_chunk_btest_time_idx on _hyper_1_4_chunk
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan using _hyper_1_5_chunk_btest_time_idx on _hyper_1_5_chunk
                       Index Cond: ("time" IS NOT NULL)
   InitPlan 2 (returns $0)
     ->  Limit
           ->  Merge Append
                 Sort Key: btest_1."time"
                 ->  Index Scan Backward using btest_time_idx on btest btest_1
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan Backward using _hyper_1_1_chunk_btest_time_idx on _hyper_1_1_chunk _hyper_1_1_chunk_1
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan Backward using _hyper_1_2_chunk_btest_time_idx on _hyper_1_2_chunk _hyper_1_2_chunk_1
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan Backward using _hyper_1_3_chunk_btest_time_idx on _hyper_1_3_chunk _hyper_1_3_chunk_1
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan Backward using _hyper_1_4_chunk_btest_time_idx on _hyper_1_4_chunk _hyper_1_4_chunk_1
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan Backward using _hyper_1_5_chunk_btest_time_idx on _hyper_1_5_chunk _hyper_1_5_chunk_1
                       Index Cond: ("time" IS NOT NULL)
(33 rows)

-- verify results when using both FIRST and LAST
:PREFIX SELECT first(temp, time), last(temp, time) FROM "btest";
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Result
   InitPlan 1 (returns $1)
     ->  Limit
           ->  Merge Append
                 Sort Key: btest."time" DESC
                 ->  Index Scan using btest_time_idx on btest
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan using _hyper_1_1_chunk_btest_time_idx on _hyper_1_1_chunk
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan using _hyper_1_2_chunk_btest_time_idx on _hyper_1_2_chunk
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan using _hyper_1_3_chunk_btest_time_idx on _hyper_1_3_chunk
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan using _hyper_1_4_chunk_btest_time_idx on _hyper_1_4_chunk
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan using _hyper_1_5_chunk_btest_time_idx on _hyper_1_5_chunk
                       Index Cond: ("time" IS NOT NULL)
   InitPlan 2 (returns $0)
     ->  Limit
           ->  Merge Append
                 Sort Key: btest_1."time"
                 ->  Index Scan Backward using btest_time_idx on btest btest_1
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan Backward using _hyper_1_1_chunk_btest_time_idx on _hyper_1_1_chunk _hyper_1_1_chunk_1
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan Backward using _hyper_1_2_chunk_btest_time_idx on _hyper_1_2_chunk _hyper_1_2_chunk_1
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan Backward using _hyper_1_3_chunk_btest_time_idx on _hyper_1_3_chunk _hyper_1_3_chunk_1
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan Backward using _hyper_1_4_chunk_btest_time_idx on _hyper_1_4_chunk _hyper_1_4_chunk_1
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan Backward using _hyper_1_5_chunk_btest_time_idx on _hyper_1_5_chunk _hyper_1_5_chunk_1
                       Index Cond: ("time" IS NOT NULL)
(33 rows)

-- do index scan when using WHERE
:PREFIX SELECT last(temp, time) FROM "btest" WHERE time <= '2017-01-20T09:00:02';
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Result
   InitPlan 1 (returns $0)
     ->  Limit
           ->  Merge Append
                 Sort Key: btest."time" DESC
                 ->  Index Scan using btest_time_idx on btest
                       Index Cond: (("time" IS NOT NULL) AND ("time" <= 'Fri Jan 20 09:00:02 2017'::timestamp without time zone))
                 ->  Index Scan using _hyper_1_1_chunk_btest_time_idx on _hyper_1_1_chunk
                       Index Cond: (("time" IS NOT NULL) AND ("time" <= 'Fri Jan 20 09:00:02 2017'::timestamp without time zone))
                 ->  Index Scan using _hyper_1_4_chunk_btest_time_idx on _hyper_1_4_chunk
                       Index Cond: (("time" IS NOT NULL) AND ("time" <= 'Fri Jan 20 09:00:02 2017'::timestamp without time zone))
(11 rows)

-- can't do index scan for MAX and LAST combined (MinMax optimization fails when having different aggregate functions)
:PREFIX SELECT max(time), last(temp, time) FROM "btest";
                QUERY PLAN                
------------------------------------------
 Aggregate
   ->  Append
         ->  Seq Scan on btest
         ->  Seq Scan on _hyper_1_1_chunk
         ->  Seq Scan on _hyper_1_2_chunk
         ->  Seq Scan on _hyper_1_3_chunk
         ->  Seq Scan on _hyper_1_4_chunk
         ->  Seq Scan on _hyper_1_5_chunk
(8 rows)

-- can't do index scan when using FIRST/LAST in ORDER BY
:PREFIX SELECT last(temp, time) FROM "btest" ORDER BY last(temp, time);
                   QUERY PLAN                   
------------------------------------------------
 Sort
   Sort Key: (last(btest.temp, btest."time"))
   ->  Aggregate
         ->  Append
               ->  Seq Scan on btest
               ->  Seq Scan on _hyper_1_1_chunk
               ->  Seq Scan on _hyper_1_2_chunk
               ->  Seq Scan on _hyper_1_3_chunk
               ->  Seq Scan on _hyper_1_4_chunk
               ->  Seq Scan on _hyper_1_5_chunk
(10 rows)

-- SELECT last(temp, time) FROM "btest" WHERE temp < 30;
-- do index scan
:PREFIX SELECT last(temp, time) FROM "btest" WHERE temp < 30;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Result
   InitPlan 1 (returns $0)
     ->  Limit
           ->  Merge Append
                 Sort Key: btest."time" DESC
                 ->  Index Scan using btest_time_idx on btest
                       Index Cond: ("time" IS NOT NULL)
                       Filter: (temp < '30'::double precision)
                 ->  Index Scan using _hyper_1_1_chunk_btest_time_idx on _hyper_1_1_chunk
                       Index Cond: ("time" IS NOT NULL)
                       Filter: (temp < '30'::double precision)
                 ->  Index Scan using _hyper_1_2_chunk_btest_time_idx on _hyper_1_2_chunk
                       Index Cond: ("time" IS NOT NULL)
                       Filter: (temp < '30'::double precision)
                 ->  Index Scan using _hyper_1_3_chunk_btest_time_idx on _hyper_1_3_chunk
                       Index Cond: ("time" IS NOT NULL)
                       Filter: (temp < '30'::double precision)
                 ->  Index Scan using _hyper_1_4_chunk_btest_time_idx on _hyper_1_4_chunk
                       Index Cond: ("time" IS NOT NULL)
                       Filter: (temp < '30'::double precision)
                 ->  Index Scan using _hyper_1_5_chunk_btest_time_idx on _hyper_1_5_chunk
                       Index Cond: ("time" IS NOT NULL)
                       Filter: (temp < '30'::double precision)
(23 rows)

-- SELECT first(temp, time) FROM "btest" WHERE time >= '2017-01-20 09:00:47';
-- do index scan
:PREFIX SELECT first(temp, time) FROM "btest" WHERE time >= '2017-01-20 09:00:47';
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Result
   InitPlan 1 (returns $0)
     ->  Limit
           ->  Merge Append
                 Sort Key: btest."time"
                 ->  Index Scan Backward using btest_time_idx on btest
                       Index Cond: (("time" IS NOT NULL) AND ("time" >= 'Fri Jan 20 09:00:47 2017'::timestamp without time zone))
                 ->  Index Scan Backward using _hyper_1_1_chunk_btest_time_idx on _hyper_1_1_chunk
                       Index Cond: (("time" IS NOT NULL) AND ("time" >= 'Fri Jan 20 09:00:47 2017'::timestamp without time zone))
                 ->  Index Scan Backward using _hyper_1_2_chunk_btest_time_idx on _hyper_1_2_chunk
                       Index Cond: (("time" IS NOT NULL) AND ("time" >= 'Fri Jan 20 09:00:47 2017'::timestamp without time zone))
                 ->  Index Scan Backward using _hyper_1_3_chunk_btest_time_idx on _hyper_1_3_chunk
                       Index Cond: (("time" IS NOT NULL) AND ("time" >= 'Fri Jan 20 09:00:47 2017'::timestamp without time zone))
                 ->  Index Scan Backward using _hyper_1_5_chunk_btest_time_idx on _hyper_1_5_chunk
                       Index Cond: (("time" IS NOT NULL) AND ("time" >= 'Fri Jan 20 09:00:47 2017'::timestamp without time zone))
(15 rows)

-- SELECT gp, last(temp, time) OVER (PARTITION BY gp) AS last FROM "btest";
-- can't do index scan when using WINDOW function
:PREFIX SELECT gp, last(temp, time) OVER (PARTITION BY gp) AS last FROM "btest";
                   QUERY PLAN                   
------------------------------------------------
 WindowAgg
   ->  Sort
         Sort Key: btest.gp
         ->  Append
               ->  Seq Scan on btest
               ->  Seq Scan on _hyper_1_1_chunk
               ->  Seq Scan on _hyper_1_2_chunk
               ->  Seq Scan on _hyper_1_3_chunk
               ->  Seq Scan on _hyper_1_4_chunk
               ->  Seq Scan on _hyper_1_5_chunk
(10 rows)

-- test constants
:PREFIX SELECT first(100, 100) FROM "btest";
                       QUERY PLAN                       
--------------------------------------------------------
 Result
   InitPlan 1 (returns $0)
     ->  Limit
           ->  Result
                 ->  Append
                       ->  Seq Scan on btest
                       ->  Seq Scan on _hyper_1_1_chunk
                       ->  Seq Scan on _hyper_1_2_chunk
                       ->  Seq Scan on _hyper_1_3_chunk
                       ->  Seq Scan on _hyper_1_4_chunk
                       ->  Seq Scan on _hyper_1_5_chunk
(11 rows)

-- create an index so we can test optimization
CREATE INDEX btest_time_alt_idx ON btest(time_alt);
SET enable_seqscan=OFF;
:PREFIX SELECT last(temp, time_alt) FROM "btest";
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Result
   InitPlan 1 (returns $0)
     ->  Limit
           ->  Merge Append
                 Sort Key: btest.time_alt DESC
                 ->  Index Scan Backward using btest_time_alt_idx on btest
                       Index Cond: (time_alt IS NOT NULL)
                 ->  Index Scan Backward using _hyper_1_1_chunk_btest_time_alt_idx on _hyper_1_1_chunk
                       Index Cond: (time_alt IS NOT NULL)
                 ->  Index Scan Backward using _hyper_1_2_chunk_btest_time_alt_idx on _hyper_1_2_chunk
                       Index Cond: (time_alt IS NOT NULL)
                 ->  Index Scan Backward using _hyper_1_3_chunk_btest_time_alt_idx on _hyper_1_3_chunk
                       Index Cond: (time_alt IS NOT NULL)
                 ->  Index Scan Backward using _hyper_1_4_chunk_btest_time_alt_idx on _hyper_1_4_chunk
                       Index Cond: (time_alt IS NOT NULL)
                 ->  Index Scan Backward using _hyper_1_5_chunk_btest_time_alt_idx on _hyper_1_5_chunk
                       Index Cond: (time_alt IS NOT NULL)
(17 rows)

--test nested FIRST/LAST - should optimize
:PREFIX SELECT abs(last(temp, time)) FROM "btest";
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Result
   InitPlan 1 (returns $0)
     ->  Limit
           ->  Merge Append
                 Sort Key: btest."time" DESC
                 ->  Index Scan using btest_time_idx on btest
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan using _hyper_1_1_chunk_btest_time_idx on _hyper_1_1_chunk
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan using _hyper_1_2_chunk_btest_time_idx on _hyper_1_2_chunk
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan using _hyper_1_3_chunk_btest_time_idx on _hyper_1_3_chunk
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan using _hyper_1_4_chunk_btest_time_idx on _hyper_1_4_chunk
                       Index Cond: ("time" IS NOT NULL)
                 ->  Index Scan using _hyper_1_5_chunk_btest_time_idx on _hyper_1_5_chunk
                       Index Cond: ("time" IS NOT NULL)
(17 rows)

-- test nested FIRST/LAST in ORDER BY - no optimization possible
:PREFIX SELECT abs(last(temp, time)) FROM "btest" ORDER BY abs(last(temp,time));
                    QUERY PLAN                     
---------------------------------------------------
 Sort
   Sort Key: (abs(last(btest.temp, btest."time")))
   ->  Aggregate
         ->  Append
               ->  Seq Scan on btest
               ->  Seq Scan on _hyper_1_1_chunk
               ->  Seq Scan on _hyper_1_2_chunk
               ->  Seq Scan on _hyper_1_3_chunk
               ->  Seq Scan on _hyper_1_4_chunk
               ->  Seq Scan on _hyper_1_5_chunk
(10 rows)

