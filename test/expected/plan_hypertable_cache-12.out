-- This file and its contents are licensed under the Apache License 2.0.
-- Please see the included NOTICE for copyright information and
-- LICENSE-APACHE for a copy of the license.
-- test hypertable classification when hypertable is not in cache
-- https://github.com/timescale/timescaledb/issues/1832
\set PREFIX 'EXPLAIN (costs off)'
CREATE TABLE test (a int, time timestamptz NOT NULL);
SELECT create_hypertable('public.test', 'time');
 create_hypertable 
-------------------
 (1,public,test,t)
(1 row)

INSERT INTO test SELECT i, '2020-04-01'::date-10-i from generate_series(1,20) i;
CREATE OR REPLACE FUNCTION test_f(_ts timestamptz)
RETURNS SETOF test LANGUAGE SQL STABLE PARALLEL SAFE
AS $f$
   SELECT DISTINCT ON (a) * FROM test WHERE time >= _ts ORDER BY a, time DESC
$f$;
:PREFIX SELECT * FROM test_f(now());
                   QUERY PLAN                    
-------------------------------------------------
 Unique
   ->  Sort
         Sort Key: test.a, test."time" DESC
         ->  Custom Scan (ChunkAppend) on test
               Chunks excluded during startup: 4
(5 rows)

-- create new session
\c
-- plan output should be identical to previous session
:PREFIX SELECT * FROM test_f(now());
                   QUERY PLAN                    
-------------------------------------------------
 Unique
   ->  Sort
         Sort Key: test.a, test."time" DESC
         ->  Custom Scan (ChunkAppend) on test
               Chunks excluded during startup: 4
(5 rows)

-- check hypertable detection in views
CREATE TABLE metrics (
  time timestamptz,
  value float
);
SELECT create_hypertable ('metrics', 'time');
NOTICE:  adding not-null constraint to column "time"
  create_hypertable   
----------------------
 (2,public,metrics,t)
(1 row)

INSERT INTO metrics
  VALUES ('2000-01-01', 4.56);
CREATE VIEW ht_view AS
SELECT *,
  0 AS res
FROM metrics
UNION ALL
SELECT *,
  1 AS res
FROM metrics;
CREATE FUNCTION ht_func() RETURNS SETOF metrics LANGUAGE SQL STABLE AS
$sql$
  SELECT time,
    value
  FROM ht_view
  WHERE res = 0;
$sql$;
ALTER TABLE metrics SET (timescaledb.compress);
SELECT compress_chunk(show_chunks('metrics'));
             compress_chunk             
----------------------------------------
 _timescaledb_internal._hyper_2_5_chunk
(1 row)

-- should have decompresschunk node
:PREFIX SELECT * FROM ht_func();
                    QUERY PLAN                     
---------------------------------------------------
 Custom Scan (DecompressChunk) on _hyper_2_5_chunk
   ->  Seq Scan on compress_hyper_3_6_chunk
(2 rows)

\c
-- plan should be identical to previous plan in fresh session
:PREFIX SELECT * FROM ht_func();
                    QUERY PLAN                     
---------------------------------------------------
 Custom Scan (DecompressChunk) on _hyper_2_5_chunk
   ->  Seq Scan on compress_hyper_3_6_chunk
(2 rows)

