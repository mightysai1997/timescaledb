\set ON_ERROR_STOP 1
\o /dev/null
\ir include/create_single_db.sql
\set VERBOSITY default
SET client_min_messages = WARNING;
DROP DATABASE IF EXISTS single;
SET client_min_messages = NOTICE;
CREATE DATABASE single;
\c single
CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE;
psql:include/create_single_db.sql:8: NOTICE:  installing required extension "dblink"
psql:include/create_single_db.sql:8: NOTICE:  installing required extension "postgres_fdw"
psql:include/create_single_db.sql:8: NOTICE:  installing required extension "hstore"
SELECT setup_timescaledb(hostname => 'fakehost'); -- fakehost makes sure there is no network connection
\set VERBOSITY verbose
\o
\set ECHO ALL
\c single
-- Utility function for grouping/slotting time with a given interval.
CREATE OR REPLACE FUNCTION date_group(
    field           timestamp,
    group_interval  interval
)
    RETURNS timestamp LANGUAGE SQL STABLE AS
$BODY$
    SELECT to_timestamp((EXTRACT(EPOCH from $1)::int /
        EXTRACT(EPOCH from group_interval)::int) *
        EXTRACT(EPOCH from group_interval)::int)::timestamp;
$BODY$;
CREATE TABLE PUBLIC."testNs" (
  "timeCustom" TIMESTAMP NOT NULL,
  device_id TEXT NOT NULL,
  series_0 DOUBLE PRECISION NULL,
  series_1 DOUBLE PRECISION NULL,
  series_2 DOUBLE PRECISION NULL,
  series_bool BOOLEAN NULL
);
CREATE INDEX ON PUBLIC."testNs" (device_id, "timeCustom" DESC NULLS LAST) WHERE device_id IS NOT NULL;
SELECT * FROM create_hypertable('"public"."testNs"', 'timeCustom', 'device_id', 2, associated_schema_name=>'testNs' );
 create_hypertable 
-------------------
 
(1 row)

\c single
INSERT INTO PUBLIC."testNs"("timeCustom", device_id, series_0, series_1) VALUES
('2009-11-12T01:00:00+00:00', 'dev1', 1.5, 1),
('2009-11-12T01:00:00+00:00', 'dev1', 1.5, 2),
('2009-11-10T23:00:02+00:00', 'dev1', 2.5, 3);
SELECT _timescaledb_meta_api.close_chunk_end_immediate(c.id)
FROM get_open_partition_for_key((SELECT id FROM _timescaledb_catalog.hypertable WHERE table_name = 'testNs'), 'dev1') part
INNER JOIN _timescaledb_catalog.chunk c ON (c.partition_id = part.id);
 close_chunk_end_immediate 
---------------------------
 
(1 row)

INSERT INTO PUBLIC."testNs"("timeCustom", device_id, series_0, series_1) VALUES
('2009-11-10T23:00:00+00:00', 'dev2', 1.5, 1),
('2009-11-10T23:00:00+00:00', 'dev2', 1.5, 2);
SELECT * FROM PUBLIC."testNs";
        timeCustom        | device_id | series_0 | series_1 | series_2 | series_bool 
--------------------------+-----------+----------+----------+----------+-------------
 Tue Nov 10 23:00:02 2009 | dev1      |      2.5 |        3 |          | 
 Thu Nov 12 01:00:00 2009 | dev1      |      1.5 |        1 |          | 
 Thu Nov 12 01:00:00 2009 | dev1      |      1.5 |        2 |          | 
 Tue Nov 10 23:00:00 2009 | dev2      |      1.5 |        1 |          | 
 Tue Nov 10 23:00:00 2009 | dev2      |      1.5 |        2 |          | 
(5 rows)

SET client_min_messages = WARNING;
\echo 'The next 2 queries will differ in output between UTC and EST since the mod is on the 100th hour UTC'
The next 2 queries will differ in output between UTC and EST since the mod is on the 100th hour UTC
SET timezone = 'UTC';
SELECT date_group("timeCustom", '100 days') AS time, sum(series_0)
FROM PUBLIC."testNs" GROUP BY time ORDER BY time ASC;
           time           | sum 
--------------------------+-----
 Sun Sep 13 00:00:00 2009 | 8.5
(1 row)

SET timezone = 'EST';
SELECT date_group("timeCustom", '100 days') AS time, sum(series_0)
FROM PUBLIC."testNs" GROUP BY time ORDER BY time ASC;
           time           | sum 
--------------------------+-----
 Sat Sep 12 19:00:00 2009 | 8.5
(1 row)

\echo 'The rest of the queries will be the same in output between UTC and EST'
The rest of the queries will be the same in output between UTC and EST
--have to set the timezones on both Test1 and test2. Have to also kill ongoing dblinks as their sessions cache the timezone setting.
SET timezone = 'UTC';
ALTER DATABASE single SET timezone ='UTC';
SELECT dblink_disconnect(conn) FROM unnest(dblink_get_connections()) conn;
 dblink_disconnect 
-------------------
(0 rows)

SELECT date_group("timeCustom", '1 day') AS time, sum(series_0)
FROM PUBLIC."testNs" GROUP BY time ORDER BY time ASC;
           time           | sum 
--------------------------+-----
 Tue Nov 10 00:00:00 2009 | 5.5
 Thu Nov 12 00:00:00 2009 |   3
(2 rows)

SET timezone = 'EST';
ALTER DATABASE single SET timezone ='EST';
SELECT dblink_disconnect(conn) FROM unnest(dblink_get_connections()) conn;
 dblink_disconnect 
-------------------
(0 rows)

SELECT date_group("timeCustom", '1 day') AS time, sum(series_0)
FROM PUBLIC."testNs" GROUP BY time ORDER BY time ASC;
           time           | sum 
--------------------------+-----
 Mon Nov 09 19:00:00 2009 | 5.5
 Wed Nov 11 19:00:00 2009 |   3
(2 rows)

SET timezone = 'UTC';
ALTER DATABASE single SET timezone ='UTC';
SELECT dblink_disconnect(conn) FROM unnest(dblink_get_connections()) conn;
 dblink_disconnect 
-------------------
(0 rows)

SELECT *
FROM PUBLIC."testNs"
WHERE "timeCustom" >= TIMESTAMP '2009-11-10T23:00:00'
AND "timeCustom" < TIMESTAMP '2009-11-12T01:00:00' ORDER BY "timeCustom" DESC;
        timeCustom        | device_id | series_0 | series_1 | series_2 | series_bool 
--------------------------+-----------+----------+----------+----------+-------------
 Tue Nov 10 23:00:02 2009 | dev1      |      2.5 |        3 |          | 
 Tue Nov 10 23:00:00 2009 | dev2      |      1.5 |        1 |          | 
 Tue Nov 10 23:00:00 2009 | dev2      |      1.5 |        2 |          | 
(3 rows)

SET timezone = 'EST';
ALTER DATABASE single SET timezone ='EST';
SELECT dblink_disconnect(conn) FROM unnest(dblink_get_connections()) conn;
 dblink_disconnect 
-------------------
(0 rows)

SELECT *
FROM PUBLIC."testNs"
WHERE "timeCustom" >= TIMESTAMP '2009-11-10T23:00:00'
AND "timeCustom" < TIMESTAMP '2009-11-12T01:00:00' ORDER BY "timeCustom" DESC;
        timeCustom        | device_id | series_0 | series_1 | series_2 | series_bool 
--------------------------+-----------+----------+----------+----------+-------------
 Tue Nov 10 23:00:02 2009 | dev1      |      2.5 |        3 |          | 
 Tue Nov 10 23:00:00 2009 | dev2      |      1.5 |        1 |          | 
 Tue Nov 10 23:00:00 2009 | dev2      |      1.5 |        2 |          | 
(3 rows)

SET timezone = 'UTC';
ALTER DATABASE single SET timezone ='UTC';
SELECT dblink_disconnect(conn) FROM unnest(dblink_get_connections()) conn;
 dblink_disconnect 
-------------------
(0 rows)

SELECT date_group("timeCustom", '1 day') AS time, sum(series_0)
FROM PUBLIC."testNs" GROUP BY time ORDER BY time ASC LIMIT 2;
           time           | sum 
--------------------------+-----
 Tue Nov 10 00:00:00 2009 | 5.5
 Thu Nov 12 00:00:00 2009 |   3
(2 rows)

SET timezone = 'EST';
ALTER DATABASE single SET timezone ='EST';
SELECT dblink_disconnect(conn) FROM unnest(dblink_get_connections()) conn;
 dblink_disconnect 
-------------------
(0 rows)

SELECT date_group("timeCustom", '1 day') AS time, sum(series_0)
FROM PUBLIC."testNs" GROUP BY time ORDER BY time ASC LIMIT 2;
           time           | sum 
--------------------------+-----
 Mon Nov 09 19:00:00 2009 | 5.5
 Wed Nov 11 19:00:00 2009 |   3
(2 rows)

------------------------------------
-- Test time conversion functions --
------------------------------------
\set ON_ERROR_STOP 0
SET timezone = 'UTC';
ALTER DATABASE single SET timezone ='UTC';
-- Conversion to timestamp using Postgres built-in function taking double
SELECT to_timestamp(1486480176.236538);
            to_timestamp             
-------------------------------------
 Tue Feb 07 15:09:36.236537 2017 UTC
(1 row)

-- extension-specific version taking microsecond UNIX timestamp
SELECT _timescaledb_internal.to_timestamp(1486480176236538);
            to_timestamp             
-------------------------------------
 Tue Feb 07 15:09:36.236538 2017 UTC
(1 row)

-- Should be the inverse of the statement above.
SELECT _timescaledb_internal.to_unix_microseconds('2017-02-07 15:09:36.236538+00');
 to_unix_microseconds 
----------------------
     1486480176236538
(1 row)

-- In UNIX microseconds, BIGINT MAX is smaller than internal date upper bound
-- and should therefore be OK. Further, converting to the internal postgres
-- epoch cannot overflow a 64-bit INTEGER since the postgres epoch is at a
-- later date compared to the UNIX epoch, and is therefore represented by a
-- smaller number
SELECT _timescaledb_internal.to_timestamp(9223372036854775807);
             to_timestamp              
---------------------------------------
 Sun Jan 10 04:00:54.775807 294247 UTC
(1 row)

-- Julian day zero is -210866803200000000 microseconds from UNIX epoch
SELECT _timescaledb_internal.to_timestamp(-210866803200000000);
          to_timestamp           
---------------------------------
 Mon Nov 24 00:00:00 4714 UTC BC
(1 row)

\set VERBOSITY default
-- Going beyond Julian day zero should give out-of-range error
SELECT _timescaledb_internal.to_timestamp(-210866803200000001);
ERROR:  timestamp out of range
-- Lower bound on date (should return the Julian day zero UNIX timestamp above)
SELECT _timescaledb_internal.to_unix_microseconds('4714-11-24 00:00:00+00 BC');
 to_unix_microseconds 
----------------------
  -210866803200000000
(1 row)

-- Going beyond lower bound on date should return out-of-range
SELECT _timescaledb_internal.to_unix_microseconds('4714-11-23 23:59:59.999999+00 BC');
ERROR:  timestamp out of range: "4714-11-23 23:59:59.999999+00 BC"
LINE 1: SELECT _timescaledb_internal.to_unix_microseconds('4714-11-2...
                                                          ^
-- The upper bound for Postgres TIMESTAMPTZ
SELECT timestamp '294276-12-31 23:59:59.999999+00';
             timestamp             
-----------------------------------
 Sun Dec 31 23:59:59.999999 294276
(1 row)

-- Going beyond the upper bound, should fail
SELECT timestamp '294276-12-31 23:59:59.999999+00' + interval '1 us';
ERROR:  timestamp out of range
-- Cannot represent the upper bound timestamp with a UNIX microsecond timestamp
-- since the Postgres epoch is at a later date than the UNIX epoch.
SELECT _timescaledb_internal.to_unix_microseconds('294276-12-31 23:59:59.999999+00');
ERROR:  timestamp out of range
-- Subtracting the difference between the two epochs (10957 days) should bring
-- us within range.
SELECT timestamp '294276-12-31 23:59:59.999999+00' - interval '10957 days';
             ?column?              
-----------------------------------
 Fri Jan 01 23:59:59.999999 294247
(1 row)

SELECT _timescaledb_internal.to_unix_microseconds('294247-01-01 23:59:59.999999');
 to_unix_microseconds 
----------------------
  9223371331199999999
(1 row)

-- Adding one microsecond should take us out-of-range again
SELECT timestamp '294247-01-01 23:59:59.999999' + interval '1 us';
          ?column?          
----------------------------
 Sat Jan 02 00:00:00 294247
(1 row)

SELECT _timescaledb_internal.to_unix_microseconds(timestamp '294247-01-01 23:59:59.999999' + interval '1 us');
ERROR:  timestamp out of range
