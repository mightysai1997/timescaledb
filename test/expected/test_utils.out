-- This file and its contents are licensed under the Apache License 2.0.
-- Please see the included NOTICE for copyright information and
-- LICENSE-APACHE for a copy of the license.
\c :TEST_DBNAME :ROLE_SUPERUSER
CREATE OR REPLACE FUNCTION test.condition() RETURNS VOID
    AS :MODULE_PATHNAME, 'ts_test_utils_condition' LANGUAGE C IMMUTABLE STRICT PARALLEL SAFE;
CREATE OR REPLACE FUNCTION test.int64_eq() RETURNS VOID
    AS :MODULE_PATHNAME, 'ts_test_utils_int64_eq' LANGUAGE C IMMUTABLE STRICT PARALLEL SAFE;
CREATE OR REPLACE FUNCTION test.ptr_eq() RETURNS VOID
    AS :MODULE_PATHNAME, 'ts_test_utils_ptr_eq' LANGUAGE C IMMUTABLE STRICT PARALLEL SAFE;
CREATE OR REPLACE FUNCTION test.double_eq() RETURNS VOID
    AS :MODULE_PATHNAME, 'ts_test_utils_double_eq' LANGUAGE C IMMUTABLE STRICT PARALLEL SAFE;
SET ROLE :ROLE_DEFAULT_PERM_USER;
-- We're testing that the test utils work and generate errors on
-- failing conditions
\set ON_ERROR_STOP 0
SELECT test.condition();
ERROR:  TestFailure @ test_utils.c ts_test_utils_condition:28 | (true_value == false_value)
SELECT test.int64_eq();
ERROR:  TestFailure @ test_utils.c ts_test_utils_int64_eq:38 | (big == small) [32532978 == 3242234]
SELECT test.ptr_eq();
ERROR:  TestFailure @ test_utils.c ts_test_utils_ptr_eq:52 | (true_ptr == false_ptr)
SELECT test.double_eq();
ERROR:  TestFailure @ test_utils.c ts_test_utils_double_eq:63 | (big_double == small_double) [923423478.324200 == 324.300000]
\set ON_ERROR_STOP 1
-- Test debug points
--
\set ECHO all
\c :TEST_DBNAME :ROLE_SUPERUSER
CREATE OR REPLACE FUNCTION debug_point_enable(TEXT)
RETURNS VOID
AS :MODULE_PATHNAME, 'ts_debug_point_enable'
LANGUAGE C VOLATILE STRICT;
CREATE OR REPLACE FUNCTION debug_point_release(TEXT)
RETURNS VOID
AS :MODULE_PATHNAME, 'ts_debug_point_release'
LANGUAGE C VOLATILE STRICT;
-- debug point already enabled
SELECT debug_point_enable('test_debug_point');
 debug_point_enable 
--------------------
 
(1 row)

\set ON_ERROR_STOP 0
SELECT debug_point_enable('test_debug_point');
ERROR:  debug point "test_debug_point" already enabled
\set ON_ERROR_STOP 1
SELECT debug_point_release('test_debug_point');
 debug_point_release 
---------------------
 
(1 row)

-- debug point not enabled
\set ON_ERROR_STOP 0
SELECT debug_point_release('test_debug_point');
WARNING:  you don't own a lock of type ExclusiveLock
ERROR:  cannot release debug point "test_debug_point"
\set ON_ERROR_STOP 1
-- error injections
--
CREATE OR REPLACE FUNCTION test_error_injection(TEXT)
RETURNS VOID
AS :MODULE_PATHNAME, 'ts_test_error_injection'
LANGUAGE C VOLATILE STRICT;
SELECT test_error_injection('test_error');
 test_error_injection 
----------------------
 
(1 row)

SELECT debug_point_enable('test_error');
 debug_point_enable 
--------------------
 
(1 row)

\set ON_ERROR_STOP 0
SELECT test_error_injection('test_error');
ERROR:  error injected at debug point 'test_error'
\set ON_ERROR_STOP 1
SELECT debug_point_release('test_error');
 debug_point_release 
---------------------
 
(1 row)

SELECT test_error_injection('test_error');
 test_error_injection 
----------------------
 
(1 row)

