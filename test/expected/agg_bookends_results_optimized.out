-- This file and its contents are licensed under the Apache License 2.0.
-- Please see the included NOTICE for copyright information and
-- LICENSE-APACHE for a copy of the license.
SET timescaledb.disable_optimizations= 'off';
\set PREFIX ''
\ir include/agg_bookends.sql
-- This file and its contents are licensed under the Apache License 2.0.
-- Please see the included NOTICE for copyright information and
-- LICENSE-APACHE for a copy of the license.
CREATE TABLE btest(time timestamp NOT NULL, time_alt timestamp, gp INTEGER, temp float, strid TEXT DEFAULT 'testing');
SELECT schema_name, table_name, created FROM create_hypertable('btest', 'time');
 schema_name | table_name | created 
-------------+------------+---------
 public      | btest      | t
(1 row)

INSERT INTO btest VALUES('2017-01-20T09:00:01', '2017-01-20T10:00:00', 1, 22.5);
INSERT INTO btest VALUES('2017-01-20T09:00:21', '2017-01-20T09:00:59', 1, 21.2);
INSERT INTO btest VALUES('2017-01-20T09:00:47', '2017-01-20T09:00:58', 1, 25.1);
INSERT INTO btest VALUES('2017-01-20T09:00:02', '2017-01-20T09:00:57', 2, 35.5);
INSERT INTO btest VALUES('2017-01-20T09:00:21', '2017-01-20T09:00:56', 2, 30.2);
--TOASTED;
INSERT INTO btest VALUES('2017-01-20T09:00:43', '2017-01-20T09:01:55', 2, 20.1, repeat('xyz', 1000000) );
CREATE TABLE btest_numeric (time timestamp NOT NULL, quantity numeric);
SELECT schema_name, table_name, created FROM create_hypertable('btest_numeric', 'time');
 schema_name |  table_name   | created 
-------------+---------------+---------
 public      | btest_numeric | t
(1 row)

:PREFIX SELECT time, gp, temp FROM btest ORDER BY time;
           time           | gp | temp 
--------------------------+----+------
 Fri Jan 20 09:00:01 2017 |  1 | 22.5
 Fri Jan 20 09:00:02 2017 |  2 | 35.5
 Fri Jan 20 09:00:21 2017 |  1 | 21.2
 Fri Jan 20 09:00:21 2017 |  2 | 30.2
 Fri Jan 20 09:00:43 2017 |  2 | 20.1
 Fri Jan 20 09:00:47 2017 |  1 | 25.1
(6 rows)

:PREFIX SELECT last(temp, time) FROM btest;
 last 
------
 25.1
(1 row)

:PREFIX SELECT first(temp, time) FROM btest;
 first 
-------
  22.5
(1 row)

:PREFIX SELECT last(temp, time_alt) FROM btest;
 last 
------
 22.5
(1 row)

:PREFIX SELECT first(temp, time_alt) FROM btest;
 first 
-------
  30.2
(1 row)

:PREFIX SELECT gp, last(temp, time) FROM btest GROUP BY gp ORDER BY gp;
 gp | last 
----+------
  1 | 25.1
  2 | 20.1
(2 rows)

:PREFIX SELECT gp, first(temp, time) FROM btest GROUP BY gp ORDER BY gp;
 gp | first 
----+-------
  1 |  22.5
  2 |  35.5
(2 rows)

--check whole row
:PREFIX SELECT gp, first(btest, time) FROM btest GROUP BY gp ORDER BY gp;
 gp |                                 first                                  
----+------------------------------------------------------------------------
  1 | ("Fri Jan 20 09:00:01 2017","Fri Jan 20 10:00:00 2017",1,22.5,testing)
  2 | ("Fri Jan 20 09:00:02 2017","Fri Jan 20 09:00:57 2017",2,35.5,testing)
(2 rows)

--check toasted col
:PREFIX SELECT gp, left(last(strid, time), 10) FROM btest GROUP BY gp ORDER BY gp;
 gp |    left    
----+------------
  1 | testing
  2 | xyzxyzxyzx
(2 rows)

:PREFIX SELECT gp, last(temp, strid) FROM btest GROUP BY gp ORDER BY gp;
 gp | last 
----+------
  1 | 22.5
  2 | 20.1
(2 rows)

BEGIN;
--check null value as last element
INSERT INTO btest VALUES('2018-01-20T09:00:43', '2017-01-20T09:00:55', 2, NULL);
:PREFIX SELECT last(temp, time) FROM btest;
 last 
------
     
(1 row)

--check non-null element "overrides" NULL because it comes after.
INSERT INTO btest VALUES('2019-01-20T09:00:43', '2018-01-20T09:00:55', 2, 30.5);
:PREFIX SELECT last(temp, time) FROM btest;
 last 
------
 30.5
(1 row)

--check null cmp element is skipped
INSERT INTO btest VALUES('2018-01-20T09:00:43', NULL, 2, 32.3);
:PREFIX SELECT last(temp, time_alt) FROM btest;
 last 
------
 30.5
(1 row)

-- fist returns NULL value
:PREFIX SELECT first(temp, time_alt) FROM btest;
 first 
-------
      
(1 row)

-- test first return non NULL value
INSERT INTO btest VALUES('2016-01-20T09:00:00', '2016-01-20T09:00:00', 2, 36.5);
:PREFIX SELECT first(temp, time_alt) FROM btest;
 first 
-------
  36.5
(1 row)

--check non null cmp element insert after null cmp
INSERT INTO btest VALUES('2020-01-20T09:00:43', '2020-01-20T09:00:43', 2, 35.3);
:PREFIX SELECT last(temp, time_alt) FROM btest;
 last 
------
 35.3
(1 row)

:PREFIX SELECT first(temp, time_alt) FROM btest;
 first 
-------
  36.5
(1 row)

--cmp nulls should be ignored and not present in groups
:PREFIX SELECT gp, last(temp, time_alt) FROM btest GROUP BY gp ORDER BY gp;
 gp | last 
----+------
  1 | 22.5
  2 | 35.3
(2 rows)

--Previously, some bugs were found with NULLS and numeric types, so test that
INSERT INTO btest_numeric VALUES ('2019-01-20T09:00:43', NULL);
:PREFIX SELECT last(quantity, time) FROM btest_numeric;
 last 
------
     
(1 row)

--check non-null element "overrides" NULL because it comes after.
INSERT INTO btest_numeric VALUES('2020-01-20T09:00:43', 30.5);
:PREFIX SELECT last(quantity, time) FROM btest_numeric;
 last 
------
 30.5
(1 row)

-- do index scan for last
:PREFIX SELECT last(temp, time) FROM btest;
 last 
------
 35.3
(1 row)

-- do index scan for first
:PREFIX SELECT first(temp, time) FROM btest;
 first 
-------
  36.5
(1 row)

-- can't do index scan when ordering on non-index column
:PREFIX SELECT first(temp, time_alt) FROM btest;
 first 
-------
  36.5
(1 row)

-- do index scan for subquery
:PREFIX SELECT * FROM (SELECT last(temp, time) FROM btest) last;
 last 
------
 35.3
(1 row)

-- can't do index scan when using group by
:PREFIX SELECT last(temp, time) FROM btest GROUP BY gp ORDER BY gp;
 last 
------
 25.1
 35.3
(2 rows)

-- do index scan when agg function is used in CTE subquery
:PREFIX WITH last_temp AS (SELECT last(temp, time) FROM btest) SELECT * from last_temp;
 last 
------
 35.3
(1 row)

-- do index scan when using both FIRST and LAST aggregate functions
:PREFIX SELECT first(temp, time), last(temp, time) FROM btest;
 first | last 
-------+------
  36.5 | 35.3
(1 row)

-- verify results when using both FIRST and LAST
:PREFIX SELECT first(temp, time), last(temp, time) FROM btest;
 first | last 
-------+------
  36.5 | 35.3
(1 row)

-- do index scan when using WHERE
:PREFIX SELECT last(temp, time) FROM btest WHERE time <= '2017-01-20T09:00:02';
 last 
------
 35.5
(1 row)

-- can't do index scan for MAX and LAST combined (MinMax optimization fails when having different aggregate functions)
:PREFIX SELECT max(time), last(temp, time) FROM btest;
           max            | last 
--------------------------+------
 Mon Jan 20 09:00:43 2020 | 35.3
(1 row)

-- can't do index scan when using FIRST/LAST in ORDER BY
:PREFIX SELECT last(temp, time) FROM btest ORDER BY last(temp, time);
 last 
------
 35.3
(1 row)

-- do index scan
:PREFIX SELECT last(temp, time) FROM btest WHERE temp < 30;
 last 
------
 25.1
(1 row)

-- SELECT first(temp, time) FROM btest WHERE time >= '2017-01-20 09:00:47';
-- do index scan
:PREFIX SELECT first(temp, time) FROM btest WHERE time >= '2017-01-20 09:00:47';
 first 
-------
  25.1
(1 row)

-- can't do index scan when using WINDOW function
:PREFIX SELECT gp, last(temp, time) OVER (PARTITION BY gp) AS last FROM btest;
 gp | last 
----+------
  1 | 25.1
  1 | 25.1
  1 | 25.1
  2 | 35.3
  2 | 35.3
  2 | 35.3
  2 | 35.3
  2 | 35.3
  2 | 35.3
  2 | 35.3
  2 | 35.3
(11 rows)

-- test constants
:PREFIX SELECT first(100, 100) FROM btest;
 first 
-------
   100
(1 row)

-- create an index so we can test optimization
CREATE INDEX btest_time_alt_idx ON btest(time_alt);
:PREFIX SELECT last(temp, time_alt) FROM btest;
 last 
------
 35.3
(1 row)

--test nested FIRST/LAST - should optimize
:PREFIX SELECT abs(last(temp, time)) FROM btest;
 abs  
------
 35.3
(1 row)

-- test nested FIRST/LAST in ORDER BY - no optimization possible
:PREFIX SELECT abs(last(temp, time)) FROM btest ORDER BY abs(last(temp,time));
 abs  
------
 35.3
(1 row)

ROLLBACK;
