\set ON_ERROR_STOP 0
\c single :ROLE_SUPERUSER
SET client_min_messages = ERROR;
DROP TABLESPACE IF EXISTS tablespace1;
DROP TABLESPACE IF EXISTS tablespace2;
SET client_min_messages = NOTICE;
--test hypertable with tables space
CREATE TABLESPACE tablespace1 OWNER :ROLE_DEFAULT_PERM_USER LOCATION :TEST_TABLESPACE1_PATH;
\c single :ROLE_DEFAULT_PERM_USER
--assigning a tablespace via the main table should work
CREATE TABLE tspace_2dim(time timestamp, temp float, device text) TABLESPACE tablespace1;
SELECT create_hypertable('tspace_2dim', 'time', 'device', 2);
NOTICE:  Adding NOT NULL constraint to time column time (NULL time values not allowed)
 create_hypertable 
-------------------
 
(1 row)

INSERT INTO tspace_2dim VALUES ('2017-01-20T09:00:01', 24.3, 'blue');
--verify that the table chunk has the correct tablespace
SELECT relname, spcname FROM pg_class c
INNER JOIN pg_tablespace t ON (c.reltablespace = t.oid)
INNER JOIN _timescaledb_catalog.chunk ch ON (ch.table_name = c.relname);
     relname      |   spcname   
------------------+-------------
 _hyper_1_1_chunk | tablespace1
(1 row)

--check some error conditions
SELECT attach_tablespace('tablespace2', NULL);
ERROR:  Invalid hypertable
SELECT attach_tablespace(NULL, 'tspace_2dim');
ERROR:  Invalid tablespace name
SELECT attach_tablespace('none_existing_tablespace', 'tspace_2dim');
ERROR:  Tablespace "none_existing_tablespace" does not exist
SELECT attach_tablespace('tablespace2', 'none_existing_table');
ERROR:  relation "none_existing_table" does not exist at character 41
--attach another tablespace without first creating it --> should generate error
SELECT attach_tablespace('tablespace2', 'tspace_2dim');
ERROR:  Tablespace "tablespace2" does not exist
--attach the same tablespace twice to same table should also generate error
SELECT attach_tablespace('tablespace1', 'tspace_2dim');
ERROR:  Tablespace "tablespace1" is already attached to hypertable "tspace_2dim"
\c single :ROLE_SUPERUSER
CREATE TABLESPACE tablespace2 OWNER :ROLE_DEFAULT_PERM_USER_2 LOCATION :TEST_TABLESPACE2_PATH;
\c single :ROLE_DEFAULT_PERM_USER_2
--attach without permissions on the table should fail
SELECT attach_tablespace('tablespace2', 'tspace_2dim');
ERROR:  User "default_perm_user_2" lacks permissions on table "tspace_2dim"
\c single :ROLE_DEFAULT_PERM_USER
--attach without permissions on the tablespace should also fail
SELECT attach_tablespace('tablespace2', 'tspace_2dim');
ERROR:  Table owner "default_perm_user" lacks permissions for tablespace "tablespace2"
\c single :ROLE_SUPERUSER
GRANT :ROLE_DEFAULT_PERM_USER_2 TO :ROLE_DEFAULT_PERM_USER;
\c single :ROLE_DEFAULT_PERM_USER
--should work with permissions on both the table and the tablespace
SELECT attach_tablespace('tablespace2', 'tspace_2dim');
 attach_tablespace 
-------------------
 
(1 row)

SELECT * FROM _timescaledb_catalog.tablespace;
 id | hypertable_id | tablespace_name 
----+---------------+-----------------
  1 |             1 | tablespace1
  2 |             1 | tablespace2
(2 rows)

--insert into another chunk
INSERT INTO tspace_2dim VALUES ('2017-01-20T09:00:01', 24.3, 'brown');
SELECT relname, spcname FROM pg_class c
INNER JOIN pg_tablespace t ON (c.reltablespace = t.oid)
INNER JOIN _timescaledb_catalog.chunk ch ON (ch.table_name = c.relname);
     relname      |   spcname   
------------------+-------------
 _hyper_1_1_chunk | tablespace1
 _hyper_1_2_chunk | tablespace2
(2 rows)

--
CREATE TABLE tspace_1dim(time timestamp, temp float, device text) TABLESPACE tablespace1;
SELECT create_hypertable('tspace_1dim', 'time');
NOTICE:  Adding NOT NULL constraint to time column time (NULL time values not allowed)
 create_hypertable 
-------------------
 
(1 row)

SELECT attach_tablespace('tablespace2', 'tspace_1dim');
 attach_tablespace 
-------------------
 
(1 row)

INSERT INTO tspace_1dim VALUES ('2017-01-20T09:00:01', 24.3, 'blue');
INSERT INTO tspace_1dim VALUES ('2017-03-20T09:00:01', 24.3, 'brown');
SELECT relname, spcname FROM pg_class c
INNER JOIN pg_tablespace t ON (c.reltablespace = t.oid)
INNER JOIN _timescaledb_catalog.chunk ch ON (ch.table_name = c.relname);
     relname      |   spcname   
------------------+-------------
 _hyper_1_1_chunk | tablespace1
 _hyper_1_2_chunk | tablespace2
 _hyper_2_3_chunk | tablespace1
 _hyper_2_4_chunk | tablespace2
(4 rows)

--cleanup
DROP TABLE tspace_1dim CASCADE;
DROP TABLE tspace_2dim CASCADE;
DROP TABLESPACE tablespace1;
DROP TABLESPACE tablespace2;
-- revoke grants
\c single :ROLE_SUPERUSER
REVOKE :ROLE_DEFAULT_PERM_USER_2 FROM :ROLE_DEFAULT_PERM_USER;
