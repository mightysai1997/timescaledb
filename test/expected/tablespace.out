\set ON_ERROR_STOP 0
\c single :ROLE_SUPERUSER
SET client_min_messages = ERROR;
DROP TABLESPACE IF EXISTS tablespace1;
DROP TABLESPACE IF EXISTS tablespace2;
SET client_min_messages = NOTICE;
--test hypertable with tables space
CREATE TABLESPACE tablespace1 OWNER :ROLE_DEFAULT_PERM_USER LOCATION :TEST_TABLESPACE1_PATH;
\c single :ROLE_DEFAULT_PERM_USER
--assigning a tablespace via the main table should work
CREATE TABLE tspace_2dim(time timestamp, temp float, device text) TABLESPACE tablespace1;
SELECT create_hypertable('tspace_2dim', 'time', 'device', 2);
NOTICE:  adding NOT NULL constraint to column "time"
 create_hypertable 
-------------------
 
(1 row)

INSERT INTO tspace_2dim VALUES ('2017-01-20T09:00:01', 24.3, 'blue');
--verify that the table chunk has the correct tablespace
SELECT relname, spcname FROM pg_class c
INNER JOIN pg_tablespace t ON (c.reltablespace = t.oid)
INNER JOIN _timescaledb_catalog.chunk ch ON (ch.table_name = c.relname);
     relname      |   spcname   
------------------+-------------
 _hyper_1_1_chunk | tablespace1
(1 row)

--check some error conditions
SELECT attach_tablespace('tablespace2', NULL);
ERROR:  Invalid hypertable
SELECT attach_tablespace(NULL, 'tspace_2dim');
ERROR:  Invalid tablespace name
SELECT attach_tablespace('none_existing_tablespace', 'tspace_2dim');
ERROR:  Tablespace "none_existing_tablespace" does not exist
SELECT attach_tablespace('tablespace2', 'none_existing_table');
ERROR:  relation "none_existing_table" does not exist at character 41
--attach another tablespace without first creating it --> should generate error
SELECT attach_tablespace('tablespace2', 'tspace_2dim');
ERROR:  Tablespace "tablespace2" does not exist
--attach the same tablespace twice to same table should also generate error
SELECT attach_tablespace('tablespace1', 'tspace_2dim');
ERROR:  Tablespace "tablespace1" is already attached to hypertable "tspace_2dim"
\c single :ROLE_SUPERUSER
CREATE TABLESPACE tablespace2 OWNER :ROLE_DEFAULT_PERM_USER_2 LOCATION :TEST_TABLESPACE2_PATH;
\c single :ROLE_DEFAULT_PERM_USER_2
--attach without permissions on the table should fail
SELECT attach_tablespace('tablespace2', 'tspace_2dim');
ERROR:  permission denied for relation "tspace_2dim"
\c single :ROLE_DEFAULT_PERM_USER
--attach without permissions on the tablespace should also fail
SELECT attach_tablespace('tablespace2', 'tspace_2dim');
ERROR:  Table owner "default_perm_user" lacks permissions for tablespace "tablespace2"
\c single :ROLE_SUPERUSER
GRANT :ROLE_DEFAULT_PERM_USER_2 TO :ROLE_DEFAULT_PERM_USER;
\c single :ROLE_DEFAULT_PERM_USER
--should work with permissions on both the table and the tablespace
SELECT attach_tablespace('tablespace2', 'tspace_2dim');
 attach_tablespace 
-------------------
 
(1 row)

SELECT * FROM _timescaledb_catalog.tablespace;
 id | hypertable_id | tablespace_name 
----+---------------+-----------------
  1 |             1 | tablespace1
  2 |             1 | tablespace2
(2 rows)

SELECT * FROM show_tablespaces('tspace_2dim');
 show_tablespaces 
------------------
 tablespace1
 tablespace2
(2 rows)

--insert into another chunk
INSERT INTO tspace_2dim VALUES ('2017-01-20T09:00:01', 24.3, 'brown');
SELECT * FROM test.show_subtables('tspace_2dim');
                 Child                  | Tablespace  
----------------------------------------+-------------
 _timescaledb_internal._hyper_1_1_chunk | tablespace1
 _timescaledb_internal._hyper_1_2_chunk | tablespace2
(2 rows)

--indexes should inherit the tablespace of their chunk
SELECT * FROM test.show_indexesp('_timescaledb_internal._hyper%_chunk');
                 Table                  |                               Index                                |      Columns       | Unique | Primary | Exclusion | Tablespace  
----------------------------------------+--------------------------------------------------------------------+--------------------+--------+---------+-----------+-------------
 _timescaledb_internal._hyper_1_1_chunk | _timescaledb_internal._hyper_1_1_chunk_tspace_2dim_time_idx        | {time,temp,device} | f      | f       | f         | tablespace1
 _timescaledb_internal._hyper_1_1_chunk | _timescaledb_internal._hyper_1_1_chunk_tspace_2dim_device_time_idx | {time,temp,device} | f      | f       | f         | tablespace1
 _timescaledb_internal._hyper_1_2_chunk | _timescaledb_internal._hyper_1_2_chunk_tspace_2dim_time_idx        | {time,temp,device} | f      | f       | f         | tablespace1
 _timescaledb_internal._hyper_1_2_chunk | _timescaledb_internal._hyper_1_2_chunk_tspace_2dim_device_time_idx | {time,temp,device} | f      | f       | f         | tablespace1
(4 rows)

--
SET ROLE :ROLE_DEFAULT_PERM_USER_2;
-- User doesn't have permission on tablespace1 --> error
CREATE TABLE tspace_1dim(time timestamp, temp float, device text);
-- Grant permission to tablespace1
SET ROLE :ROLE_DEFAULT_PERM_USER;
GRANT CREATE ON TABLESPACE tablespace1 TO :ROLE_DEFAULT_PERM_USER_2;
SET ROLE :ROLE_DEFAULT_PERM_USER_2;
CREATE TABLE tspace_1dim(time timestamp, temp float, device text);
ERROR:  relation "tspace_1dim" already exists
SELECT create_hypertable('tspace_1dim', 'time');
NOTICE:  adding NOT NULL constraint to column "time"
 create_hypertable 
-------------------
 
(1 row)

SELECT attach_tablespace('tablespace1', 'tspace_1dim');
 attach_tablespace 
-------------------
 
(1 row)

SELECT attach_tablespace('tablespace2', 'tspace_1dim');
 attach_tablespace 
-------------------
 
(1 row)

SELECT * FROM _timescaledb_catalog.tablespace;
 id | hypertable_id | tablespace_name 
----+---------------+-----------------
  1 |             1 | tablespace1
  2 |             1 | tablespace2
  3 |             2 | tablespace1
  4 |             2 | tablespace2
(4 rows)

INSERT INTO tspace_1dim VALUES ('2017-01-20T09:00:01', 24.3, 'blue');
INSERT INTO tspace_1dim VALUES ('2017-03-20T09:00:01', 24.3, 'brown');
SELECT * FROM test.show_subtablesp('tspace_%');
   Parent    |                 Child                  | Tablespace  
-------------+----------------------------------------+-------------
 tspace_2dim | _timescaledb_internal._hyper_1_1_chunk | tablespace1
 tspace_2dim | _timescaledb_internal._hyper_1_2_chunk | tablespace2
 tspace_1dim | _timescaledb_internal._hyper_2_3_chunk | tablespace1
 tspace_1dim | _timescaledb_internal._hyper_2_4_chunk | tablespace2
(4 rows)

--indexes should inherit the tablespace of their chunk, unless the
--parent index has a tablespace set, in which case the chunks'
--corresponding indexes are pinned to the parent index's
--tablespace. The parent index can have a tablespace set in two cases:
--(1) if explicitly set in CREATE INDEX, or (2) if the main table was
--created with a tablespace, because then default indexes will be
--created in that tablespace too.
SELECT * FROM test.show_indexesp('_timescaledb_internal._hyper%_chunk');
                 Table                  |                               Index                                |      Columns       | Unique | Primary | Exclusion | Tablespace  
----------------------------------------+--------------------------------------------------------------------+--------------------+--------+---------+-----------+-------------
 _timescaledb_internal._hyper_1_1_chunk | _timescaledb_internal._hyper_1_1_chunk_tspace_2dim_time_idx        | {time,temp,device} | f      | f       | f         | tablespace1
 _timescaledb_internal._hyper_1_1_chunk | _timescaledb_internal._hyper_1_1_chunk_tspace_2dim_device_time_idx | {time,temp,device} | f      | f       | f         | tablespace1
 _timescaledb_internal._hyper_1_2_chunk | _timescaledb_internal._hyper_1_2_chunk_tspace_2dim_time_idx        | {time,temp,device} | f      | f       | f         | tablespace1
 _timescaledb_internal._hyper_1_2_chunk | _timescaledb_internal._hyper_1_2_chunk_tspace_2dim_device_time_idx | {time,temp,device} | f      | f       | f         | tablespace1
 _timescaledb_internal._hyper_2_3_chunk | _timescaledb_internal._hyper_2_3_chunk_tspace_1dim_time_idx        | {time,temp,device} | f      | f       | f         | tablespace2
 _timescaledb_internal._hyper_2_4_chunk | _timescaledb_internal._hyper_2_4_chunk_tspace_1dim_time_idx        | {time,temp,device} | f      | f       | f         | tablespace1
(6 rows)

--detach tablespace1 from all tables. Due to lack of permissions,
--should only detach from 'tspace_1dim' (1 tablespace)
SELECT detach_tablespace('tablespace1');
NOTICE:  Tablespace "tablespace1" remains attached to 1 hypertable(s) due to lack of permissions
 detach_tablespace 
-------------------
                 1
(1 row)

SELECT * FROM _timescaledb_catalog.tablespace;
 id | hypertable_id | tablespace_name 
----+---------------+-----------------
  1 |             1 | tablespace1
  2 |             1 | tablespace2
  4 |             2 | tablespace2
(3 rows)

SELECT * FROM show_tablespaces('tspace_1dim');
 show_tablespaces 
------------------
 tablespace2
(1 row)

SELECT * FROM show_tablespaces('tspace_2dim');
 show_tablespaces 
------------------
 tablespace1
 tablespace2
(2 rows)

--detach the other tablespace
SELECT detach_tablespace('tablespace2', 'tspace_1dim');
 detach_tablespace 
-------------------
                 1
(1 row)

SELECT * FROM _timescaledb_catalog.tablespace;
 id | hypertable_id | tablespace_name 
----+---------------+-----------------
  1 |             1 | tablespace1
  2 |             1 | tablespace2
(2 rows)

SELECT * FROM show_tablespaces('tspace_1dim');
 show_tablespaces 
------------------
(0 rows)

SELECT * FROM show_tablespaces('tspace_2dim');
 show_tablespaces 
------------------
 tablespace1
 tablespace2
(2 rows)

--detaching a tablespace from table without permissions should fail
SELECT detach_tablespace('tablespace2', 'tspace_2dim');
ERROR:  permission denied for relation "tspace_2dim"
SELECT detach_tablespaces('tspace_2dim');
ERROR:  permission denied for relation "tspace_2dim"
--set other user should make detach work
SET ROLE :ROLE_DEFAULT_PERM_USER;
SELECT detach_tablespaces('tspace_2dim');
 detach_tablespaces 
--------------------
                  2
(1 row)

SELECT * FROM _timescaledb_catalog.tablespace;
 id | hypertable_id | tablespace_name 
----+---------------+-----------------
(0 rows)

SELECT * FROM show_tablespaces('tspace_1dim');
 show_tablespaces 
------------------
(0 rows)

SELECT * FROM show_tablespaces('tspace_2dim');
 show_tablespaces 
------------------
(0 rows)

--cleanup
DROP TABLE tspace_1dim CASCADE;
DROP TABLE tspace_2dim CASCADE;
DROP TABLESPACE tablespace1;
DROP TABLESPACE tablespace2;
-- revoke grants
\c single :ROLE_SUPERUSER
REVOKE :ROLE_DEFAULT_PERM_USER_2 FROM :ROLE_DEFAULT_PERM_USER;
