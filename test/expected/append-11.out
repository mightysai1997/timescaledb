-- This file and its contents are licensed under the Apache License 2.0.
-- Please see the included NOTICE for copyright information and
-- LICENSE-APACHE for a copy of the license.
\set TEST_BASE_NAME append
SELECT format('include/%s_load.sql', :'TEST_BASE_NAME') as "TEST_LOAD_NAME",
       format('include/%s_query.sql', :'TEST_BASE_NAME') as "TEST_QUERY_NAME",
       format('%s/results/%s_results_optimized.out', :'TEST_OUTPUT_DIR', :'TEST_BASE_NAME') as "TEST_RESULTS_OPTIMIZED",
       format('%s/results/%s_results_unoptimized.out', :'TEST_OUTPUT_DIR', :'TEST_BASE_NAME') as "TEST_RESULTS_UNOPTIMIZED"
\gset
SELECT format('\! diff -u --label "Unoptimized results" --label "Optimized results" %s %s', :'TEST_RESULTS_UNOPTIMIZED', :'TEST_RESULTS_OPTIMIZED') as "DIFF_CMD"
\gset
-- look at postgres version to decide whether we run with analyze or without
SELECT
  CASE WHEN current_setting('server_version_num')::int >= 100000
    THEN 'EXPLAIN (analyze, costs off, timing off, summary off)'
    ELSE 'EXPLAIN (costs off)'
  END AS "PREFIX"
\gset
\ir :TEST_LOAD_NAME
-- This file and its contents are licensed under the Apache License 2.0.
-- Please see the included NOTICE for copyright information and
-- LICENSE-APACHE for a copy of the license.
-- create a now() function for repeatable testing that always returns
-- the same timestamp. It needs to be marked STABLE
CREATE OR REPLACE FUNCTION now_s()
RETURNS timestamptz LANGUAGE PLPGSQL STABLE AS
$BODY$
BEGIN
    RAISE NOTICE 'Stable function now_s() called!';
    RETURN '2017-08-22T10:00:00'::timestamptz;
END;
$BODY$;
CREATE OR REPLACE FUNCTION now_i()
RETURNS timestamptz LANGUAGE PLPGSQL IMMUTABLE AS
$BODY$
BEGIN
    RAISE NOTICE 'Immutable function now_i() called!';
    RETURN '2017-08-22T10:00:00'::timestamptz;
END;
$BODY$;
CREATE OR REPLACE FUNCTION now_v()
RETURNS timestamptz LANGUAGE PLPGSQL VOLATILE AS
$BODY$
BEGIN
    RAISE NOTICE 'Volatile function now_v() called!';
    RETURN '2017-08-22T10:00:00'::timestamptz;
END;
$BODY$;
CREATE TABLE append_test(time timestamptz, temp float, colorid integer);
SELECT create_hypertable('append_test', 'time', chunk_time_interval => 2628000000000);
psql:include/append_load.sql:35: NOTICE:  adding not-null constraint to column "time"
    create_hypertable     
--------------------------
 (1,public,append_test,t)
(1 row)

-- create three chunks
INSERT INTO append_test VALUES ('2017-03-22T09:18:22', 23.5, 1),
                               ('2017-03-22T09:18:23', 21.5, 1),
                               ('2017-05-22T09:18:22', 36.2, 2),
                               ('2017-05-22T09:18:23', 15.2, 2),
                               ('2017-08-22T09:18:22', 34.1, 3);
-- Create another hypertable to join with
CREATE TABLE join_test(time timestamptz, temp float, colorid integer);
SELECT create_hypertable('join_test', 'time', chunk_time_interval => 2628000000000);
psql:include/append_load.sql:46: NOTICE:  adding not-null constraint to column "time"
   create_hypertable    
------------------------
 (2,public,join_test,t)
(1 row)

INSERT INTO join_test VALUES ('2017-01-22T09:18:22', 15.2, 1),
                             ('2017-02-22T09:18:22', 24.5, 2),
                             ('2017-08-22T09:18:22', 23.1, 3);
-- create hypertable with DATE time dimension
CREATE TABLE metrics_date(time DATE NOT NULL);
SELECT create_hypertable('metrics_date','time');
     create_hypertable     
---------------------------
 (3,public,metrics_date,t)
(1 row)

INSERT INTO metrics_date SELECT generate_series('2000-01-01'::date, '2000-02-01'::date, '1h'::interval);
-- create hypertable with TIMESTAMP time dimension
CREATE TABLE metrics_timestamp(time TIMESTAMP NOT NULL);
SELECT create_hypertable('metrics_timestamp','time');
       create_hypertable        
--------------------------------
 (4,public,metrics_timestamp,t)
(1 row)

INSERT INTO metrics_timestamp SELECT generate_series('2000-01-01'::date, '2000-02-01'::date, '1h'::interval);
-- create hypertable with TIMESTAMPTZ time dimension
CREATE TABLE metrics_timestamptz(time TIMESTAMPTZ NOT NULL, device_id INT NOT NULL);
CREATE INDEX ON metrics_timestamptz(device_id,time);
SELECT create_hypertable('metrics_timestamptz','time');
        create_hypertable         
----------------------------------
 (5,public,metrics_timestamptz,t)
(1 row)

INSERT INTO metrics_timestamptz SELECT generate_series('2000-01-01'::date, '2000-02-01'::date, '1h'::interval), 1;
INSERT INTO metrics_timestamptz SELECT generate_series('2000-01-01'::date, '2000-02-01'::date, '1h'::interval), 2;
INSERT INTO metrics_timestamptz SELECT generate_series('2000-01-01'::date, '2000-02-01'::date, '1h'::interval), 3;
-- create space partitioned hypertable
CREATE TABLE metrics_space(time timestamptz NOT NULL, device_id int NOT NULL, v1 float, v2 float);
SELECT create_hypertable('metrics_space','time','device_id',3);
     create_hypertable      
----------------------------
 (6,public,metrics_space,t)
(1 row)

INSERT INTO metrics_space SELECT time, device_id, device_id + 0.25, device_id + 0.75 FROM generate_series('2000-01-01'::date, '2000-01-14'::date, '1h'::interval) g1(time), generate_series(1,10,1) g2(device_id);
\ir :TEST_QUERY_NAME
-- This file and its contents are licensed under the Apache License 2.0.
-- Please see the included NOTICE for copyright information and
-- LICENSE-APACHE for a copy of the license.
-- canary for results diff
-- this should be the only output of the results diff
SELECT setting, current_setting(setting) AS value from (VALUES ('timescaledb.disable_optimizations'),('timescaledb.enable_chunk_append')) v(setting);
              setting              | value 
-----------------------------------+-------
 timescaledb.disable_optimizations | off
 timescaledb.enable_chunk_append   | on
(2 rows)

-- query should exclude all chunks with optimization on
:PREFIX
SELECT * FROM append_test WHERE time > now_s() + '1 month'
ORDER BY time DESC;
psql:include/append_query.sql:12: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:12: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:12: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:12: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:12: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:12: NOTICE:  Stable function now_s() called!
                            QUERY PLAN                            
------------------------------------------------------------------
 Custom Scan (ChunkAppend) on append_test (actual rows=0 loops=1)
   Order: append_test."time" DESC
   Chunks excluded during startup: 3
(3 rows)

--query should exclude all chunks and be a MergeAppend
:PREFIX
SELECT * FROM append_test WHERE time > now_s() + '1 month'
ORDER BY time DESC limit 1;
psql:include/append_query.sql:17: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:17: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:17: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:17: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:17: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:17: NOTICE:  Stable function now_s() called!
                               QUERY PLAN                               
------------------------------------------------------------------------
 Limit (actual rows=0 loops=1)
   ->  Custom Scan (ChunkAppend) on append_test (actual rows=0 loops=1)
         Order: append_test."time" DESC
         Chunks excluded during startup: 3
(4 rows)

-- when optimized, the plan should be a constraint-aware append and
-- cover only one chunk. It should be a backward index scan due to
-- descending index on time. Should also skip the main table, since it
-- cannot hold tuples
:PREFIX
SELECT * FROM append_test WHERE time > now_s() - interval '2 months';
psql:include/append_query.sql:24: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:24: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:24: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:24: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:24: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:24: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:24: NOTICE:  Stable function now_s() called!
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on append_test (actual rows=1 loops=1)
   Chunks excluded during startup: 2
   ->  Index Scan using _hyper_1_3_chunk_append_test_time_idx on _hyper_1_3_chunk (actual rows=1 loops=1)
         Index Cond: ("time" > (now_s() - '@ 2 mons'::interval))
(4 rows)

-- adding ORDER BY and LIMIT should turn the plan into an optimized
-- ordered append plan
:PREFIX
SELECT * FROM append_test WHERE time > now_s() - interval '2 months'
ORDER BY time LIMIT 3;
psql:include/append_query.sql:30: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:30: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:30: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:30: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:30: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:30: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:30: NOTICE:  Stable function now_s() called!
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on append_test (actual rows=1 loops=1)
         Order: append_test."time"
         Chunks excluded during startup: 2
         ->  Index Scan Backward using _hyper_1_3_chunk_append_test_time_idx on _hyper_1_3_chunk (actual rows=1 loops=1)
               Index Cond: ("time" > (now_s() - '@ 2 mons'::interval))
(6 rows)

-- no optimized plan for queries with restrictions that can be
-- constified at planning time. Regular planning-time constraint
-- exclusion should occur.
:PREFIX
SELECT * FROM append_test WHERE time > now_i() - interval '2 months'
ORDER BY time;
psql:include/append_query.sql:37: NOTICE:  Immutable function now_i() called!
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on append_test (actual rows=1 loops=1)
   Order: append_test."time"
   Chunks excluded during startup: 2
   ->  Index Scan Backward using _hyper_1_3_chunk_append_test_time_idx on _hyper_1_3_chunk (actual rows=1 loops=1)
         Index Cond: ("time" > ('Tue Aug 22 10:00:00 2017 PDT'::timestamp with time zone - '@ 2 mons'::interval))
(5 rows)

-- currently, we cannot distinguish between stable and volatile
-- functions as far as applying our modified plan. However, volatile
-- function should not be pre-evaluated to constants, so no chunk
-- exclusion should occur.
:PREFIX
SELECT * FROM append_test WHERE time > now_v() - interval '2 months'
ORDER BY time;
psql:include/append_query.sql:45: NOTICE:  Volatile function now_v() called!
psql:include/append_query.sql:45: NOTICE:  Volatile function now_v() called!
psql:include/append_query.sql:45: NOTICE:  Volatile function now_v() called!
psql:include/append_query.sql:45: NOTICE:  Volatile function now_v() called!
psql:include/append_query.sql:45: NOTICE:  Volatile function now_v() called!
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on append_test (actual rows=1 loops=1)
   Order: append_test."time"
   Chunks excluded during startup: 0
   ->  Index Scan Backward using _hyper_1_1_chunk_append_test_time_idx on _hyper_1_1_chunk (actual rows=0 loops=1)
         Filter: ("time" > (now_v() - '@ 2 mons'::interval))
         Rows Removed by Filter: 2
   ->  Index Scan Backward using _hyper_1_2_chunk_append_test_time_idx on _hyper_1_2_chunk (actual rows=0 loops=1)
         Filter: ("time" > (now_v() - '@ 2 mons'::interval))
         Rows Removed by Filter: 2
   ->  Index Scan Backward using _hyper_1_3_chunk_append_test_time_idx on _hyper_1_3_chunk (actual rows=1 loops=1)
         Filter: ("time" > (now_v() - '@ 2 mons'::interval))
(11 rows)

-- prepared statement output should be the same regardless of
-- optimizations
PREPARE query_opt AS
SELECT * FROM append_test WHERE time > now_s() - interval '2 months'
ORDER BY time;
:PREFIX EXECUTE query_opt;
psql:include/append_query.sql:53: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:53: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:53: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:53: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:53: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:53: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:53: NOTICE:  Stable function now_s() called!
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on append_test (actual rows=1 loops=1)
   Order: append_test."time"
   Chunks excluded during startup: 2
   ->  Index Scan Backward using _hyper_1_3_chunk_append_test_time_idx on _hyper_1_3_chunk (actual rows=1 loops=1)
         Index Cond: ("time" > (now_s() - '@ 2 mons'::interval))
(5 rows)

DEALLOCATE query_opt;
-- aggregates should produce same output
:PREFIX
SELECT date_trunc('year', time) t, avg(temp) FROM append_test
WHERE time > now_s() - interval '4 months'
GROUP BY t
ORDER BY t DESC;
psql:include/append_query.sql:62: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:62: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:62: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:62: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:62: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:62: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:62: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:62: NOTICE:  Stable function now_s() called!
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 GroupAggregate (actual rows=1 loops=1)
   Group Key: (date_trunc('year'::text, append_test."time"))
   ->  Custom Scan (ChunkAppend) on append_test (actual rows=3 loops=1)
         Order: date_trunc('year'::text, append_test."time") DESC
         Chunks excluded during startup: 1
         ->  Index Scan using _hyper_1_3_chunk_append_test_time_idx on _hyper_1_3_chunk (actual rows=1 loops=1)
               Index Cond: ("time" > (now_s() - '@ 4 mons'::interval))
         ->  Index Scan using _hyper_1_2_chunk_append_test_time_idx on _hyper_1_2_chunk (actual rows=2 loops=1)
               Index Cond: ("time" > (now_s() - '@ 4 mons'::interval))
(9 rows)

-- querying outside the time range should return nothing. This tests
-- that ConstraintAwareAppend can handle the case when an Append node
-- is turned into a Result node due to no children
:PREFIX
SELECT date_trunc('year', time) t, avg(temp)
FROM append_test
WHERE time < '2016-03-22'
AND date_part('dow', time) between 1 and 5
GROUP BY t
ORDER BY t DESC;
                        QUERY PLAN                         
-----------------------------------------------------------
 GroupAggregate (actual rows=0 loops=1)
   Group Key: (date_trunc('year'::text, "time"))
   ->  Sort (actual rows=0 loops=1)
         Sort Key: (date_trunc('year'::text, "time")) DESC
         Sort Method: quicksort 
         ->  Result (actual rows=0 loops=1)
               One-Time Filter: false
(7 rows)

-- a parameterized query can safely constify params, so won't be
-- optimized by constraint-aware append since regular constraint
-- exclusion works just fine
PREPARE query_param AS
SELECT * FROM append_test WHERE time > $1 ORDER BY time;
:PREFIX
EXECUTE query_param(now_s() - interval '2 months');
psql:include/append_query.sql:82: NOTICE:  Stable function now_s() called!
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on append_test (actual rows=1 loops=1)
   Order: append_test."time"
   ->  Index Scan Backward using _hyper_1_3_chunk_append_test_time_idx on _hyper_1_3_chunk (actual rows=1 loops=1)
         Index Cond: ("time" > 'Thu Jun 22 10:00:00 2017 PDT'::timestamp with time zone)
(4 rows)

DEALLOCATE query_param;
--test with cte
:PREFIX
WITH data AS (
    SELECT time_bucket(INTERVAL '30 day', TIME) AS btime, AVG(temp) AS VALUE
    FROM append_test
    WHERE
        TIME > now_s() - INTERVAL '400 day'
    AND colorid > 0
    GROUP BY btime
),
period AS (
    SELECT time_bucket(INTERVAL '30 day', TIME) AS btime
      FROM  GENERATE_SERIES('2017-03-22T01:01:01', '2017-08-23T01:01:01', INTERVAL '30 day') TIME
  )
SELECT period.btime, VALUE
    FROM period
    LEFT JOIN DATA USING (btime)
    ORDER BY period.btime;
psql:include/append_query.sql:102: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:102: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:102: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:102: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:102: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:102: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:102: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:102: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:102: NOTICE:  Stable function now_s() called!
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Merge Left Join (actual rows=6 loops=1)
   Merge Cond: (period.btime = data.btime)
   CTE data
     ->  HashAggregate (actual rows=3 loops=1)
           Group Key: time_bucket('@ 30 days'::interval, append_test."time")
           ->  Custom Scan (ChunkAppend) on append_test (actual rows=5 loops=1)
                 Chunks excluded during startup: 0
                 ->  Index Scan Backward using _hyper_1_1_chunk_append_test_time_idx on _hyper_1_1_chunk (actual rows=2 loops=1)
                       Index Cond: ("time" > (now_s() - '@ 400 days'::interval))
                       Filter: (colorid > 0)
                 ->  Index Scan Backward using _hyper_1_2_chunk_append_test_time_idx on _hyper_1_2_chunk (actual rows=2 loops=1)
                       Index Cond: ("time" > (now_s() - '@ 400 days'::interval))
                       Filter: (colorid > 0)
                 ->  Index Scan Backward using _hyper_1_3_chunk_append_test_time_idx on _hyper_1_3_chunk (actual rows=1 loops=1)
                       Index Cond: ("time" > (now_s() - '@ 400 days'::interval))
                       Filter: (colorid > 0)
   CTE period
     ->  Function Scan on generate_series "time" (actual rows=6 loops=1)
   ->  Sort (actual rows=6 loops=1)
         Sort Key: period.btime
         Sort Method: quicksort 
         ->  CTE Scan on period (actual rows=6 loops=1)
   ->  Sort (actual rows=3 loops=1)
         Sort Key: data.btime
         Sort Method: quicksort 
         ->  CTE Scan on data (actual rows=3 loops=1)
(26 rows)

WITH data AS (
    SELECT time_bucket(INTERVAL '30 day', TIME) AS btime, AVG(temp) AS VALUE
    FROM append_test
    WHERE
        TIME > now_s() - INTERVAL '400 day'
    AND colorid > 0
    GROUP BY btime
),
period AS (
    SELECT time_bucket(INTERVAL '30 day', TIME) AS btime
      FROM  GENERATE_SERIES('2017-03-22T01:01:01', '2017-08-23T01:01:01', INTERVAL '30 day') TIME
  )
SELECT period.btime, VALUE
    FROM period
    LEFT JOIN DATA USING (btime)
    ORDER BY period.btime;
psql:include/append_query.sql:119: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:119: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:119: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:119: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:119: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:119: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:119: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:119: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:119: NOTICE:  Stable function now_s() called!
            btime             | value 
------------------------------+-------
 Fri Mar 03 16:00:00 2017 PST |  22.5
 Sun Apr 02 17:00:00 2017 PDT |      
 Tue May 02 17:00:00 2017 PDT |  25.7
 Thu Jun 01 17:00:00 2017 PDT |      
 Sat Jul 01 17:00:00 2017 PDT |      
 Mon Jul 31 17:00:00 2017 PDT |  34.1
(6 rows)

-- force nested loop join with no materialization. This tests that the
-- inner ConstraintAwareScan supports resetting its scan for every
-- iteration of the outer relation loop
set enable_hashjoin = 'off';
set enable_mergejoin = 'off';
set enable_material = 'off';
:PREFIX
SELECT * FROM append_test a INNER JOIN join_test j ON (a.colorid = j.colorid)
WHERE a.time > now_s() - interval '3 hours' AND j.time > now_s() - interval '3 hours';
psql:include/append_query.sql:130: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:130: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:130: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:130: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:130: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:130: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:130: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:130: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:130: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:130: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:130: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:130: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:130: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:130: NOTICE:  Stable function now_s() called!
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Nested Loop (actual rows=1 loops=1)
   Join Filter: (a.colorid = j.colorid)
   ->  Custom Scan (ChunkAppend) on append_test a (actual rows=1 loops=1)
         Chunks excluded during startup: 2
         ->  Index Scan using _hyper_1_3_chunk_append_test_time_idx on _hyper_1_3_chunk a_1 (actual rows=1 loops=1)
               Index Cond: ("time" > (now_s() - '@ 3 hours'::interval))
   ->  Custom Scan (ChunkAppend) on join_test j (actual rows=1 loops=1)
         Chunks excluded during startup: 2
         ->  Index Scan using _hyper_2_6_chunk_join_test_time_idx on _hyper_2_6_chunk j_1 (actual rows=1 loops=1)
               Index Cond: ("time" > (now_s() - '@ 3 hours'::interval))
(10 rows)

reset enable_hashjoin;
reset enable_mergejoin;
reset enable_material;
-- test constraint_exclusion with date time dimension and DATE/TIMESTAMP/TIMESTAMPTZ constraints
-- the queries should all have 3 chunks
:PREFIX SELECT * FROM metrics_date WHERE time > '2000-01-15'::date ORDER BY time;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_date (actual rows=385 loops=1)
   Order: metrics_date."time"
   ->  Index Only Scan Backward using _hyper_3_9_chunk_metrics_date_time_idx on _hyper_3_9_chunk (actual rows=96 loops=1)
         Index Cond: ("time" > '01-15-2000'::date)
         Heap Fetches: 96
   ->  Index Only Scan Backward using _hyper_3_10_chunk_metrics_date_time_idx on _hyper_3_10_chunk (actual rows=168 loops=1)
         Index Cond: ("time" > '01-15-2000'::date)
         Heap Fetches: 168
   ->  Index Only Scan Backward using _hyper_3_11_chunk_metrics_date_time_idx on _hyper_3_11_chunk (actual rows=121 loops=1)
         Index Cond: ("time" > '01-15-2000'::date)
         Heap Fetches: 121
(11 rows)

:PREFIX SELECT * FROM metrics_date WHERE time > '2000-01-15'::timestamp ORDER BY time;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_date (actual rows=385 loops=1)
   Order: metrics_date."time"
   ->  Index Only Scan Backward using _hyper_3_9_chunk_metrics_date_time_idx on _hyper_3_9_chunk (actual rows=96 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
         Heap Fetches: 96
   ->  Index Only Scan Backward using _hyper_3_10_chunk_metrics_date_time_idx on _hyper_3_10_chunk (actual rows=168 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
         Heap Fetches: 168
   ->  Index Only Scan Backward using _hyper_3_11_chunk_metrics_date_time_idx on _hyper_3_11_chunk (actual rows=121 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
         Heap Fetches: 121
(11 rows)

:PREFIX SELECT * FROM metrics_date WHERE time > '2000-01-15'::timestamptz ORDER BY time;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_date (actual rows=385 loops=1)
   Order: metrics_date."time"
   Chunks excluded during startup: 2
   ->  Index Only Scan Backward using _hyper_3_9_chunk_metrics_date_time_idx on _hyper_3_9_chunk (actual rows=96 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
         Heap Fetches: 96
   ->  Index Only Scan Backward using _hyper_3_10_chunk_metrics_date_time_idx on _hyper_3_10_chunk (actual rows=168 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
         Heap Fetches: 168
   ->  Index Only Scan Backward using _hyper_3_11_chunk_metrics_date_time_idx on _hyper_3_11_chunk (actual rows=121 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
         Heap Fetches: 121
(12 rows)

-- test Const OP Var
-- the queries should all have 3 chunks
:PREFIX SELECT * FROM metrics_date WHERE '2000-01-15'::date < time ORDER BY time;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_date (actual rows=385 loops=1)
   Order: metrics_date."time"
   ->  Index Only Scan Backward using _hyper_3_9_chunk_metrics_date_time_idx on _hyper_3_9_chunk (actual rows=96 loops=1)
         Index Cond: ("time" > '01-15-2000'::date)
         Heap Fetches: 96
   ->  Index Only Scan Backward using _hyper_3_10_chunk_metrics_date_time_idx on _hyper_3_10_chunk (actual rows=168 loops=1)
         Index Cond: ("time" > '01-15-2000'::date)
         Heap Fetches: 168
   ->  Index Only Scan Backward using _hyper_3_11_chunk_metrics_date_time_idx on _hyper_3_11_chunk (actual rows=121 loops=1)
         Index Cond: ("time" > '01-15-2000'::date)
         Heap Fetches: 121
(11 rows)

:PREFIX SELECT * FROM metrics_date WHERE '2000-01-15'::timestamp < time ORDER BY time;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_date (actual rows=385 loops=1)
   Order: metrics_date."time"
   ->  Index Only Scan Backward using _hyper_3_9_chunk_metrics_date_time_idx on _hyper_3_9_chunk (actual rows=96 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
         Heap Fetches: 96
   ->  Index Only Scan Backward using _hyper_3_10_chunk_metrics_date_time_idx on _hyper_3_10_chunk (actual rows=168 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
         Heap Fetches: 168
   ->  Index Only Scan Backward using _hyper_3_11_chunk_metrics_date_time_idx on _hyper_3_11_chunk (actual rows=121 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
         Heap Fetches: 121
(11 rows)

:PREFIX SELECT * FROM metrics_date WHERE '2000-01-15'::timestamptz < time ORDER BY time;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_date (actual rows=385 loops=1)
   Order: metrics_date."time"
   Chunks excluded during startup: 2
   ->  Index Only Scan Backward using _hyper_3_9_chunk_metrics_date_time_idx on _hyper_3_9_chunk (actual rows=96 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
         Heap Fetches: 96
   ->  Index Only Scan Backward using _hyper_3_10_chunk_metrics_date_time_idx on _hyper_3_10_chunk (actual rows=168 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
         Heap Fetches: 168
   ->  Index Only Scan Backward using _hyper_3_11_chunk_metrics_date_time_idx on _hyper_3_11_chunk (actual rows=121 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
         Heap Fetches: 121
(12 rows)

-- test 2 constraints
-- the queries should all have 2 chunks
:PREFIX SELECT * FROM metrics_date WHERE time > '2000-01-15'::date AND time < '2000-01-21'::date ORDER BY time;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_date (actual rows=120 loops=1)
   Order: metrics_date."time"
   ->  Index Only Scan Backward using _hyper_3_9_chunk_metrics_date_time_idx on _hyper_3_9_chunk (actual rows=96 loops=1)
         Index Cond: (("time" > '01-15-2000'::date) AND ("time" < '01-21-2000'::date))
         Heap Fetches: 96
   ->  Index Only Scan Backward using _hyper_3_10_chunk_metrics_date_time_idx on _hyper_3_10_chunk (actual rows=24 loops=1)
         Index Cond: (("time" > '01-15-2000'::date) AND ("time" < '01-21-2000'::date))
         Heap Fetches: 24
(8 rows)

:PREFIX SELECT * FROM metrics_date WHERE time > '2000-01-15'::timestamp AND time < '2000-01-21'::timestamp ORDER BY time;
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_date (actual rows=120 loops=1)
   Order: metrics_date."time"
   ->  Index Only Scan Backward using _hyper_3_9_chunk_metrics_date_time_idx on _hyper_3_9_chunk (actual rows=96 loops=1)
         Index Cond: (("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone) AND ("time" < 'Fri Jan 21 00:00:00 2000'::timestamp without time zone))
         Heap Fetches: 96
   ->  Index Only Scan Backward using _hyper_3_10_chunk_metrics_date_time_idx on _hyper_3_10_chunk (actual rows=24 loops=1)
         Index Cond: (("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone) AND ("time" < 'Fri Jan 21 00:00:00 2000'::timestamp without time zone))
         Heap Fetches: 24
(8 rows)

:PREFIX SELECT * FROM metrics_date WHERE time > '2000-01-15'::timestamptz AND time < '2000-01-21'::timestamptz ORDER BY time;
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_date (actual rows=120 loops=1)
   Order: metrics_date."time"
   Chunks excluded during startup: 3
   ->  Index Only Scan Backward using _hyper_3_9_chunk_metrics_date_time_idx on _hyper_3_9_chunk (actual rows=96 loops=1)
         Index Cond: (("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone) AND ("time" < 'Fri Jan 21 00:00:00 2000 PST'::timestamp with time zone))
         Heap Fetches: 96
   ->  Index Only Scan Backward using _hyper_3_10_chunk_metrics_date_time_idx on _hyper_3_10_chunk (actual rows=24 loops=1)
         Index Cond: (("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone) AND ("time" < 'Fri Jan 21 00:00:00 2000 PST'::timestamp with time zone))
         Heap Fetches: 24
(9 rows)

-- test constraint_exclusion with timestamp time dimension and DATE/TIMESTAMP/TIMESTAMPTZ constraints
-- the queries should all have 3 chunks
:PREFIX SELECT * FROM metrics_timestamp WHERE time > '2000-01-15'::date ORDER BY time;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamp (actual rows=408 loops=1)
   Order: metrics_timestamp."time"
   ->  Index Only Scan Backward using _hyper_4_14_chunk_metrics_timestamp_time_idx on _hyper_4_14_chunk (actual rows=119 loops=1)
         Index Cond: ("time" > '01-15-2000'::date)
         Heap Fetches: 119
   ->  Index Only Scan Backward using _hyper_4_15_chunk_metrics_timestamp_time_idx on _hyper_4_15_chunk (actual rows=168 loops=1)
         Index Cond: ("time" > '01-15-2000'::date)
         Heap Fetches: 168
   ->  Index Only Scan Backward using _hyper_4_16_chunk_metrics_timestamp_time_idx on _hyper_4_16_chunk (actual rows=121 loops=1)
         Index Cond: ("time" > '01-15-2000'::date)
         Heap Fetches: 121
(11 rows)

:PREFIX SELECT * FROM metrics_timestamp WHERE time > '2000-01-15'::timestamp ORDER BY time;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamp (actual rows=408 loops=1)
   Order: metrics_timestamp."time"
   ->  Index Only Scan Backward using _hyper_4_14_chunk_metrics_timestamp_time_idx on _hyper_4_14_chunk (actual rows=119 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
         Heap Fetches: 119
   ->  Index Only Scan Backward using _hyper_4_15_chunk_metrics_timestamp_time_idx on _hyper_4_15_chunk (actual rows=168 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
         Heap Fetches: 168
   ->  Index Only Scan Backward using _hyper_4_16_chunk_metrics_timestamp_time_idx on _hyper_4_16_chunk (actual rows=121 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
         Heap Fetches: 121
(11 rows)

:PREFIX SELECT * FROM metrics_timestamp WHERE time > '2000-01-15'::timestamptz ORDER BY time;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamp (actual rows=408 loops=1)
   Order: metrics_timestamp."time"
   Chunks excluded during startup: 2
   ->  Index Only Scan Backward using _hyper_4_14_chunk_metrics_timestamp_time_idx on _hyper_4_14_chunk (actual rows=119 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
         Heap Fetches: 119
   ->  Index Only Scan Backward using _hyper_4_15_chunk_metrics_timestamp_time_idx on _hyper_4_15_chunk (actual rows=168 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
         Heap Fetches: 168
   ->  Index Only Scan Backward using _hyper_4_16_chunk_metrics_timestamp_time_idx on _hyper_4_16_chunk (actual rows=121 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
         Heap Fetches: 121
(12 rows)

-- test Const OP Var
-- the queries should all have 3 chunks
:PREFIX SELECT * FROM metrics_timestamp WHERE '2000-01-15'::date < time ORDER BY time;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamp (actual rows=408 loops=1)
   Order: metrics_timestamp."time"
   ->  Index Only Scan Backward using _hyper_4_14_chunk_metrics_timestamp_time_idx on _hyper_4_14_chunk (actual rows=119 loops=1)
         Index Cond: ("time" > '01-15-2000'::date)
         Heap Fetches: 119
   ->  Index Only Scan Backward using _hyper_4_15_chunk_metrics_timestamp_time_idx on _hyper_4_15_chunk (actual rows=168 loops=1)
         Index Cond: ("time" > '01-15-2000'::date)
         Heap Fetches: 168
   ->  Index Only Scan Backward using _hyper_4_16_chunk_metrics_timestamp_time_idx on _hyper_4_16_chunk (actual rows=121 loops=1)
         Index Cond: ("time" > '01-15-2000'::date)
         Heap Fetches: 121
(11 rows)

:PREFIX SELECT * FROM metrics_timestamp WHERE '2000-01-15'::timestamp < time ORDER BY time;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamp (actual rows=408 loops=1)
   Order: metrics_timestamp."time"
   ->  Index Only Scan Backward using _hyper_4_14_chunk_metrics_timestamp_time_idx on _hyper_4_14_chunk (actual rows=119 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
         Heap Fetches: 119
   ->  Index Only Scan Backward using _hyper_4_15_chunk_metrics_timestamp_time_idx on _hyper_4_15_chunk (actual rows=168 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
         Heap Fetches: 168
   ->  Index Only Scan Backward using _hyper_4_16_chunk_metrics_timestamp_time_idx on _hyper_4_16_chunk (actual rows=121 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
         Heap Fetches: 121
(11 rows)

:PREFIX SELECT * FROM metrics_timestamp WHERE '2000-01-15'::timestamptz < time ORDER BY time;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamp (actual rows=408 loops=1)
   Order: metrics_timestamp."time"
   Chunks excluded during startup: 2
   ->  Index Only Scan Backward using _hyper_4_14_chunk_metrics_timestamp_time_idx on _hyper_4_14_chunk (actual rows=119 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
         Heap Fetches: 119
   ->  Index Only Scan Backward using _hyper_4_15_chunk_metrics_timestamp_time_idx on _hyper_4_15_chunk (actual rows=168 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
         Heap Fetches: 168
   ->  Index Only Scan Backward using _hyper_4_16_chunk_metrics_timestamp_time_idx on _hyper_4_16_chunk (actual rows=121 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
         Heap Fetches: 121
(12 rows)

-- test 2 constraints
-- the queries should all have 2 chunks
:PREFIX SELECT * FROM metrics_timestamp WHERE time > '2000-01-15'::date AND time < '2000-01-21'::date ORDER BY time;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamp (actual rows=143 loops=1)
   Order: metrics_timestamp."time"
   ->  Index Only Scan Backward using _hyper_4_14_chunk_metrics_timestamp_time_idx on _hyper_4_14_chunk (actual rows=119 loops=1)
         Index Cond: (("time" > '01-15-2000'::date) AND ("time" < '01-21-2000'::date))
         Heap Fetches: 119
   ->  Index Only Scan Backward using _hyper_4_15_chunk_metrics_timestamp_time_idx on _hyper_4_15_chunk (actual rows=24 loops=1)
         Index Cond: (("time" > '01-15-2000'::date) AND ("time" < '01-21-2000'::date))
         Heap Fetches: 24
(8 rows)

:PREFIX SELECT * FROM metrics_timestamp WHERE time > '2000-01-15'::timestamp AND time < '2000-01-21'::timestamp ORDER BY time;
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamp (actual rows=143 loops=1)
   Order: metrics_timestamp."time"
   ->  Index Only Scan Backward using _hyper_4_14_chunk_metrics_timestamp_time_idx on _hyper_4_14_chunk (actual rows=119 loops=1)
         Index Cond: (("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone) AND ("time" < 'Fri Jan 21 00:00:00 2000'::timestamp without time zone))
         Heap Fetches: 119
   ->  Index Only Scan Backward using _hyper_4_15_chunk_metrics_timestamp_time_idx on _hyper_4_15_chunk (actual rows=24 loops=1)
         Index Cond: (("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone) AND ("time" < 'Fri Jan 21 00:00:00 2000'::timestamp without time zone))
         Heap Fetches: 24
(8 rows)

:PREFIX SELECT * FROM metrics_timestamp WHERE time > '2000-01-15'::timestamptz AND time < '2000-01-21'::timestamptz ORDER BY time;
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamp (actual rows=143 loops=1)
   Order: metrics_timestamp."time"
   Chunks excluded during startup: 3
   ->  Index Only Scan Backward using _hyper_4_14_chunk_metrics_timestamp_time_idx on _hyper_4_14_chunk (actual rows=119 loops=1)
         Index Cond: (("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone) AND ("time" < 'Fri Jan 21 00:00:00 2000 PST'::timestamp with time zone))
         Heap Fetches: 119
   ->  Index Only Scan Backward using _hyper_4_15_chunk_metrics_timestamp_time_idx on _hyper_4_15_chunk (actual rows=24 loops=1)
         Index Cond: (("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone) AND ("time" < 'Fri Jan 21 00:00:00 2000 PST'::timestamp with time zone))
         Heap Fetches: 24
(9 rows)

-- test constraint_exclusion with timestamptz time dimension and DATE/TIMESTAMP/TIMESTAMPTZ constraints
-- the queries should all have 3 chunks
:PREFIX SELECT time FROM metrics_timestamptz WHERE time > '2000-01-15'::date ORDER BY time;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz (actual rows=1224 loops=1)
   Order: metrics_timestamptz."time"
   Chunks excluded during startup: 2
   ->  Index Only Scan Backward using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk (actual rows=333 loops=1)
         Index Cond: ("time" > '01-15-2000'::date)
         Heap Fetches: 333
   ->  Index Only Scan Backward using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk (actual rows=504 loops=1)
         Index Cond: ("time" > '01-15-2000'::date)
         Heap Fetches: 504
   ->  Index Only Scan Backward using _hyper_5_21_chunk_metrics_timestamptz_time_idx on _hyper_5_21_chunk (actual rows=387 loops=1)
         Index Cond: ("time" > '01-15-2000'::date)
         Heap Fetches: 387
(12 rows)

:PREFIX SELECT time FROM metrics_timestamptz WHERE time > '2000-01-15'::timestamp ORDER BY time;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz (actual rows=1224 loops=1)
   Order: metrics_timestamptz."time"
   Chunks excluded during startup: 2
   ->  Index Only Scan Backward using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk (actual rows=333 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
         Heap Fetches: 333
   ->  Index Only Scan Backward using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk (actual rows=504 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
         Heap Fetches: 504
   ->  Index Only Scan Backward using _hyper_5_21_chunk_metrics_timestamptz_time_idx on _hyper_5_21_chunk (actual rows=387 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
         Heap Fetches: 387
(12 rows)

:PREFIX SELECT time FROM metrics_timestamptz WHERE time > '2000-01-15'::timestamptz ORDER BY time;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz (actual rows=1224 loops=1)
   Order: metrics_timestamptz."time"
   ->  Index Only Scan Backward using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk (actual rows=333 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
         Heap Fetches: 333
   ->  Index Only Scan Backward using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk (actual rows=504 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
         Heap Fetches: 504
   ->  Index Only Scan Backward using _hyper_5_21_chunk_metrics_timestamptz_time_idx on _hyper_5_21_chunk (actual rows=387 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
         Heap Fetches: 387
(11 rows)

-- test Const OP Var
-- the queries should all have 3 chunks
:PREFIX SELECT time FROM metrics_timestamptz WHERE '2000-01-15'::date < time ORDER BY time;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz (actual rows=1224 loops=1)
   Order: metrics_timestamptz."time"
   Chunks excluded during startup: 2
   ->  Index Only Scan Backward using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk (actual rows=333 loops=1)
         Index Cond: ("time" > '01-15-2000'::date)
         Heap Fetches: 333
   ->  Index Only Scan Backward using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk (actual rows=504 loops=1)
         Index Cond: ("time" > '01-15-2000'::date)
         Heap Fetches: 504
   ->  Index Only Scan Backward using _hyper_5_21_chunk_metrics_timestamptz_time_idx on _hyper_5_21_chunk (actual rows=387 loops=1)
         Index Cond: ("time" > '01-15-2000'::date)
         Heap Fetches: 387
(12 rows)

:PREFIX SELECT time FROM metrics_timestamptz WHERE '2000-01-15'::timestamp < time ORDER BY time;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz (actual rows=1224 loops=1)
   Order: metrics_timestamptz."time"
   Chunks excluded during startup: 2
   ->  Index Only Scan Backward using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk (actual rows=333 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
         Heap Fetches: 333
   ->  Index Only Scan Backward using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk (actual rows=504 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
         Heap Fetches: 504
   ->  Index Only Scan Backward using _hyper_5_21_chunk_metrics_timestamptz_time_idx on _hyper_5_21_chunk (actual rows=387 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
         Heap Fetches: 387
(12 rows)

:PREFIX SELECT time FROM metrics_timestamptz WHERE '2000-01-15'::timestamptz < time ORDER BY time;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz (actual rows=1224 loops=1)
   Order: metrics_timestamptz."time"
   ->  Index Only Scan Backward using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk (actual rows=333 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
         Heap Fetches: 333
   ->  Index Only Scan Backward using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk (actual rows=504 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
         Heap Fetches: 504
   ->  Index Only Scan Backward using _hyper_5_21_chunk_metrics_timestamptz_time_idx on _hyper_5_21_chunk (actual rows=387 loops=1)
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
         Heap Fetches: 387
(11 rows)

-- test 2 constraints
-- the queries should all have 2 chunks
:PREFIX SELECT time FROM metrics_timestamptz WHERE time > '2000-01-15'::date AND time < '2000-01-21'::date ORDER BY time;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz (actual rows=429 loops=1)
   Order: metrics_timestamptz."time"
   Chunks excluded during startup: 3
   ->  Index Only Scan Backward using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk (actual rows=333 loops=1)
         Index Cond: (("time" > '01-15-2000'::date) AND ("time" < '01-21-2000'::date))
         Heap Fetches: 333
   ->  Index Only Scan Backward using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk (actual rows=96 loops=1)
         Index Cond: (("time" > '01-15-2000'::date) AND ("time" < '01-21-2000'::date))
         Heap Fetches: 96
(9 rows)

:PREFIX SELECT time FROM metrics_timestamptz WHERE time > '2000-01-15'::timestamp AND time < '2000-01-21'::timestamp ORDER BY time;
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz (actual rows=429 loops=1)
   Order: metrics_timestamptz."time"
   Chunks excluded during startup: 3
   ->  Index Only Scan Backward using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk (actual rows=333 loops=1)
         Index Cond: (("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone) AND ("time" < 'Fri Jan 21 00:00:00 2000'::timestamp without time zone))
         Heap Fetches: 333
   ->  Index Only Scan Backward using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk (actual rows=96 loops=1)
         Index Cond: (("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone) AND ("time" < 'Fri Jan 21 00:00:00 2000'::timestamp without time zone))
         Heap Fetches: 96
(9 rows)

:PREFIX SELECT time FROM metrics_timestamptz WHERE time > '2000-01-15'::timestamptz AND time < '2000-01-21'::timestamptz ORDER BY time;
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz (actual rows=429 loops=1)
   Order: metrics_timestamptz."time"
   ->  Index Only Scan Backward using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk (actual rows=333 loops=1)
         Index Cond: (("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone) AND ("time" < 'Fri Jan 21 00:00:00 2000 PST'::timestamp with time zone))
         Heap Fetches: 333
   ->  Index Only Scan Backward using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk (actual rows=96 loops=1)
         Index Cond: (("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone) AND ("time" < 'Fri Jan 21 00:00:00 2000 PST'::timestamp with time zone))
         Heap Fetches: 96
(8 rows)

-- test constraint_exclusion with space partitioning and DATE/TIMESTAMP/TIMESTAMPTZ constraints
-- exclusion for constraints with non-matching datatypes not working for space partitioning atm
:PREFIX SELECT time FROM metrics_space WHERE time > '2000-01-10'::date ORDER BY time;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_space (actual rows=960 loops=1)
   Order: metrics_space."time"
   ->  Merge Append (actual rows=0 loops=1)
         Sort Key: _hyper_6_22_chunk."time"
         ->  Index Only Scan Backward using _hyper_6_22_chunk_metrics_space_time_idx on _hyper_6_22_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > '01-10-2000'::date)
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_6_23_chunk_metrics_space_time_idx on _hyper_6_23_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > '01-10-2000'::date)
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_6_24_chunk_metrics_space_time_idx on _hyper_6_24_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > '01-10-2000'::date)
               Heap Fetches: 0
   ->  Merge Append (actual rows=630 loops=1)
         Sort Key: _hyper_6_25_chunk."time"
         ->  Index Only Scan Backward using _hyper_6_25_chunk_metrics_space_time_idx on _hyper_6_25_chunk (actual rows=252 loops=1)
               Index Cond: ("time" > '01-10-2000'::date)
               Heap Fetches: 252
         ->  Index Only Scan Backward using _hyper_6_26_chunk_metrics_space_time_idx on _hyper_6_26_chunk (actual rows=252 loops=1)
               Index Cond: ("time" > '01-10-2000'::date)
               Heap Fetches: 252
         ->  Index Only Scan Backward using _hyper_6_27_chunk_metrics_space_time_idx on _hyper_6_27_chunk (actual rows=126 loops=1)
               Index Cond: ("time" > '01-10-2000'::date)
               Heap Fetches: 126
   ->  Merge Append (actual rows=330 loops=1)
         Sort Key: _hyper_6_28_chunk."time"
         ->  Index Only Scan Backward using _hyper_6_28_chunk_metrics_space_time_idx on _hyper_6_28_chunk (actual rows=132 loops=1)
               Index Cond: ("time" > '01-10-2000'::date)
               Heap Fetches: 132
         ->  Index Only Scan Backward using _hyper_6_29_chunk_metrics_space_time_idx on _hyper_6_29_chunk (actual rows=132 loops=1)
               Index Cond: ("time" > '01-10-2000'::date)
               Heap Fetches: 132
         ->  Index Only Scan Backward using _hyper_6_30_chunk_metrics_space_time_idx on _hyper_6_30_chunk (actual rows=66 loops=1)
               Index Cond: ("time" > '01-10-2000'::date)
               Heap Fetches: 66
(35 rows)

:PREFIX SELECT time FROM metrics_space WHERE time > '2000-01-10'::timestamp ORDER BY time;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_space (actual rows=960 loops=1)
   Order: metrics_space."time"
   ->  Merge Append (actual rows=0 loops=1)
         Sort Key: _hyper_6_22_chunk."time"
         ->  Index Only Scan Backward using _hyper_6_22_chunk_metrics_space_time_idx on _hyper_6_22_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > 'Mon Jan 10 00:00:00 2000'::timestamp without time zone)
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_6_23_chunk_metrics_space_time_idx on _hyper_6_23_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > 'Mon Jan 10 00:00:00 2000'::timestamp without time zone)
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_6_24_chunk_metrics_space_time_idx on _hyper_6_24_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > 'Mon Jan 10 00:00:00 2000'::timestamp without time zone)
               Heap Fetches: 0
   ->  Merge Append (actual rows=630 loops=1)
         Sort Key: _hyper_6_25_chunk."time"
         ->  Index Only Scan Backward using _hyper_6_25_chunk_metrics_space_time_idx on _hyper_6_25_chunk (actual rows=252 loops=1)
               Index Cond: ("time" > 'Mon Jan 10 00:00:00 2000'::timestamp without time zone)
               Heap Fetches: 252
         ->  Index Only Scan Backward using _hyper_6_26_chunk_metrics_space_time_idx on _hyper_6_26_chunk (actual rows=252 loops=1)
               Index Cond: ("time" > 'Mon Jan 10 00:00:00 2000'::timestamp without time zone)
               Heap Fetches: 252
         ->  Index Only Scan Backward using _hyper_6_27_chunk_metrics_space_time_idx on _hyper_6_27_chunk (actual rows=126 loops=1)
               Index Cond: ("time" > 'Mon Jan 10 00:00:00 2000'::timestamp without time zone)
               Heap Fetches: 126
   ->  Merge Append (actual rows=330 loops=1)
         Sort Key: _hyper_6_28_chunk."time"
         ->  Index Only Scan Backward using _hyper_6_28_chunk_metrics_space_time_idx on _hyper_6_28_chunk (actual rows=132 loops=1)
               Index Cond: ("time" > 'Mon Jan 10 00:00:00 2000'::timestamp without time zone)
               Heap Fetches: 132
         ->  Index Only Scan Backward using _hyper_6_29_chunk_metrics_space_time_idx on _hyper_6_29_chunk (actual rows=132 loops=1)
               Index Cond: ("time" > 'Mon Jan 10 00:00:00 2000'::timestamp without time zone)
               Heap Fetches: 132
         ->  Index Only Scan Backward using _hyper_6_30_chunk_metrics_space_time_idx on _hyper_6_30_chunk (actual rows=66 loops=1)
               Index Cond: ("time" > 'Mon Jan 10 00:00:00 2000'::timestamp without time zone)
               Heap Fetches: 66
(35 rows)

:PREFIX SELECT time FROM metrics_space WHERE time > '2000-01-10'::timestamptz ORDER BY time;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_space (actual rows=960 loops=1)
   Order: metrics_space."time"
   ->  Merge Append (actual rows=630 loops=1)
         Sort Key: _hyper_6_25_chunk."time"
         ->  Index Only Scan Backward using _hyper_6_25_chunk_metrics_space_time_idx on _hyper_6_25_chunk (actual rows=252 loops=1)
               Index Cond: ("time" > 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone)
               Heap Fetches: 252
         ->  Index Only Scan Backward using _hyper_6_26_chunk_metrics_space_time_idx on _hyper_6_26_chunk (actual rows=252 loops=1)
               Index Cond: ("time" > 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone)
               Heap Fetches: 252
         ->  Index Only Scan Backward using _hyper_6_27_chunk_metrics_space_time_idx on _hyper_6_27_chunk (actual rows=126 loops=1)
               Index Cond: ("time" > 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone)
               Heap Fetches: 126
   ->  Merge Append (actual rows=330 loops=1)
         Sort Key: _hyper_6_28_chunk."time"
         ->  Index Only Scan Backward using _hyper_6_28_chunk_metrics_space_time_idx on _hyper_6_28_chunk (actual rows=132 loops=1)
               Index Cond: ("time" > 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone)
               Heap Fetches: 132
         ->  Index Only Scan Backward using _hyper_6_29_chunk_metrics_space_time_idx on _hyper_6_29_chunk (actual rows=132 loops=1)
               Index Cond: ("time" > 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone)
               Heap Fetches: 132
         ->  Index Only Scan Backward using _hyper_6_30_chunk_metrics_space_time_idx on _hyper_6_30_chunk (actual rows=66 loops=1)
               Index Cond: ("time" > 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone)
               Heap Fetches: 66
(24 rows)

-- test Const OP Var
-- exclusion for constraints with non-matching datatypes not working for space partitioning atm
:PREFIX SELECT time FROM metrics_space WHERE '2000-01-10'::date < time ORDER BY time;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_space (actual rows=960 loops=1)
   Order: metrics_space."time"
   ->  Merge Append (actual rows=0 loops=1)
         Sort Key: _hyper_6_22_chunk."time"
         ->  Index Only Scan Backward using _hyper_6_22_chunk_metrics_space_time_idx on _hyper_6_22_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > '01-10-2000'::date)
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_6_23_chunk_metrics_space_time_idx on _hyper_6_23_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > '01-10-2000'::date)
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_6_24_chunk_metrics_space_time_idx on _hyper_6_24_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > '01-10-2000'::date)
               Heap Fetches: 0
   ->  Merge Append (actual rows=630 loops=1)
         Sort Key: _hyper_6_25_chunk."time"
         ->  Index Only Scan Backward using _hyper_6_25_chunk_metrics_space_time_idx on _hyper_6_25_chunk (actual rows=252 loops=1)
               Index Cond: ("time" > '01-10-2000'::date)
               Heap Fetches: 252
         ->  Index Only Scan Backward using _hyper_6_26_chunk_metrics_space_time_idx on _hyper_6_26_chunk (actual rows=252 loops=1)
               Index Cond: ("time" > '01-10-2000'::date)
               Heap Fetches: 252
         ->  Index Only Scan Backward using _hyper_6_27_chunk_metrics_space_time_idx on _hyper_6_27_chunk (actual rows=126 loops=1)
               Index Cond: ("time" > '01-10-2000'::date)
               Heap Fetches: 126
   ->  Merge Append (actual rows=330 loops=1)
         Sort Key: _hyper_6_28_chunk."time"
         ->  Index Only Scan Backward using _hyper_6_28_chunk_metrics_space_time_idx on _hyper_6_28_chunk (actual rows=132 loops=1)
               Index Cond: ("time" > '01-10-2000'::date)
               Heap Fetches: 132
         ->  Index Only Scan Backward using _hyper_6_29_chunk_metrics_space_time_idx on _hyper_6_29_chunk (actual rows=132 loops=1)
               Index Cond: ("time" > '01-10-2000'::date)
               Heap Fetches: 132
         ->  Index Only Scan Backward using _hyper_6_30_chunk_metrics_space_time_idx on _hyper_6_30_chunk (actual rows=66 loops=1)
               Index Cond: ("time" > '01-10-2000'::date)
               Heap Fetches: 66
(35 rows)

:PREFIX SELECT time FROM metrics_space WHERE '2000-01-10'::timestamp < time ORDER BY time;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_space (actual rows=960 loops=1)
   Order: metrics_space."time"
   ->  Merge Append (actual rows=0 loops=1)
         Sort Key: _hyper_6_22_chunk."time"
         ->  Index Only Scan Backward using _hyper_6_22_chunk_metrics_space_time_idx on _hyper_6_22_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > 'Mon Jan 10 00:00:00 2000'::timestamp without time zone)
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_6_23_chunk_metrics_space_time_idx on _hyper_6_23_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > 'Mon Jan 10 00:00:00 2000'::timestamp without time zone)
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_6_24_chunk_metrics_space_time_idx on _hyper_6_24_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > 'Mon Jan 10 00:00:00 2000'::timestamp without time zone)
               Heap Fetches: 0
   ->  Merge Append (actual rows=630 loops=1)
         Sort Key: _hyper_6_25_chunk."time"
         ->  Index Only Scan Backward using _hyper_6_25_chunk_metrics_space_time_idx on _hyper_6_25_chunk (actual rows=252 loops=1)
               Index Cond: ("time" > 'Mon Jan 10 00:00:00 2000'::timestamp without time zone)
               Heap Fetches: 252
         ->  Index Only Scan Backward using _hyper_6_26_chunk_metrics_space_time_idx on _hyper_6_26_chunk (actual rows=252 loops=1)
               Index Cond: ("time" > 'Mon Jan 10 00:00:00 2000'::timestamp without time zone)
               Heap Fetches: 252
         ->  Index Only Scan Backward using _hyper_6_27_chunk_metrics_space_time_idx on _hyper_6_27_chunk (actual rows=126 loops=1)
               Index Cond: ("time" > 'Mon Jan 10 00:00:00 2000'::timestamp without time zone)
               Heap Fetches: 126
   ->  Merge Append (actual rows=330 loops=1)
         Sort Key: _hyper_6_28_chunk."time"
         ->  Index Only Scan Backward using _hyper_6_28_chunk_metrics_space_time_idx on _hyper_6_28_chunk (actual rows=132 loops=1)
               Index Cond: ("time" > 'Mon Jan 10 00:00:00 2000'::timestamp without time zone)
               Heap Fetches: 132
         ->  Index Only Scan Backward using _hyper_6_29_chunk_metrics_space_time_idx on _hyper_6_29_chunk (actual rows=132 loops=1)
               Index Cond: ("time" > 'Mon Jan 10 00:00:00 2000'::timestamp without time zone)
               Heap Fetches: 132
         ->  Index Only Scan Backward using _hyper_6_30_chunk_metrics_space_time_idx on _hyper_6_30_chunk (actual rows=66 loops=1)
               Index Cond: ("time" > 'Mon Jan 10 00:00:00 2000'::timestamp without time zone)
               Heap Fetches: 66
(35 rows)

:PREFIX SELECT time FROM metrics_space WHERE '2000-01-10'::timestamptz < time ORDER BY time;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_space (actual rows=960 loops=1)
   Order: metrics_space."time"
   ->  Merge Append (actual rows=630 loops=1)
         Sort Key: _hyper_6_25_chunk."time"
         ->  Index Only Scan Backward using _hyper_6_25_chunk_metrics_space_time_idx on _hyper_6_25_chunk (actual rows=252 loops=1)
               Index Cond: ("time" > 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone)
               Heap Fetches: 252
         ->  Index Only Scan Backward using _hyper_6_26_chunk_metrics_space_time_idx on _hyper_6_26_chunk (actual rows=252 loops=1)
               Index Cond: ("time" > 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone)
               Heap Fetches: 252
         ->  Index Only Scan Backward using _hyper_6_27_chunk_metrics_space_time_idx on _hyper_6_27_chunk (actual rows=126 loops=1)
               Index Cond: ("time" > 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone)
               Heap Fetches: 126
   ->  Merge Append (actual rows=330 loops=1)
         Sort Key: _hyper_6_28_chunk."time"
         ->  Index Only Scan Backward using _hyper_6_28_chunk_metrics_space_time_idx on _hyper_6_28_chunk (actual rows=132 loops=1)
               Index Cond: ("time" > 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone)
               Heap Fetches: 132
         ->  Index Only Scan Backward using _hyper_6_29_chunk_metrics_space_time_idx on _hyper_6_29_chunk (actual rows=132 loops=1)
               Index Cond: ("time" > 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone)
               Heap Fetches: 132
         ->  Index Only Scan Backward using _hyper_6_30_chunk_metrics_space_time_idx on _hyper_6_30_chunk (actual rows=66 loops=1)
               Index Cond: ("time" > 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone)
               Heap Fetches: 66
(24 rows)

-- test 2 constraints
-- exclusion for constraints with non-matching datatypes not working for space partitioning atm
:PREFIX SELECT time FROM metrics_space WHERE time > '2000-01-10'::date AND time < '2000-01-15'::date ORDER BY time;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_space (actual rows=960 loops=1)
   Order: metrics_space."time"
   ->  Merge Append (actual rows=0 loops=1)
         Sort Key: _hyper_6_22_chunk."time"
         ->  Index Only Scan Backward using _hyper_6_22_chunk_metrics_space_time_idx on _hyper_6_22_chunk (actual rows=0 loops=1)
               Index Cond: (("time" > '01-10-2000'::date) AND ("time" < '01-15-2000'::date))
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_6_23_chunk_metrics_space_time_idx on _hyper_6_23_chunk (actual rows=0 loops=1)
               Index Cond: (("time" > '01-10-2000'::date) AND ("time" < '01-15-2000'::date))
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_6_24_chunk_metrics_space_time_idx on _hyper_6_24_chunk (actual rows=0 loops=1)
               Index Cond: (("time" > '01-10-2000'::date) AND ("time" < '01-15-2000'::date))
               Heap Fetches: 0
   ->  Merge Append (actual rows=630 loops=1)
         Sort Key: _hyper_6_25_chunk."time"
         ->  Index Only Scan Backward using _hyper_6_25_chunk_metrics_space_time_idx on _hyper_6_25_chunk (actual rows=252 loops=1)
               Index Cond: (("time" > '01-10-2000'::date) AND ("time" < '01-15-2000'::date))
               Heap Fetches: 252
         ->  Index Only Scan Backward using _hyper_6_26_chunk_metrics_space_time_idx on _hyper_6_26_chunk (actual rows=252 loops=1)
               Index Cond: (("time" > '01-10-2000'::date) AND ("time" < '01-15-2000'::date))
               Heap Fetches: 252
         ->  Index Only Scan Backward using _hyper_6_27_chunk_metrics_space_time_idx on _hyper_6_27_chunk (actual rows=126 loops=1)
               Index Cond: (("time" > '01-10-2000'::date) AND ("time" < '01-15-2000'::date))
               Heap Fetches: 126
   ->  Merge Append (actual rows=330 loops=1)
         Sort Key: _hyper_6_28_chunk."time"
         ->  Index Only Scan Backward using _hyper_6_28_chunk_metrics_space_time_idx on _hyper_6_28_chunk (actual rows=132 loops=1)
               Index Cond: (("time" > '01-10-2000'::date) AND ("time" < '01-15-2000'::date))
               Heap Fetches: 132
         ->  Index Only Scan Backward using _hyper_6_29_chunk_metrics_space_time_idx on _hyper_6_29_chunk (actual rows=132 loops=1)
               Index Cond: (("time" > '01-10-2000'::date) AND ("time" < '01-15-2000'::date))
               Heap Fetches: 132
         ->  Index Only Scan Backward using _hyper_6_30_chunk_metrics_space_time_idx on _hyper_6_30_chunk (actual rows=66 loops=1)
               Index Cond: (("time" > '01-10-2000'::date) AND ("time" < '01-15-2000'::date))
               Heap Fetches: 66
(35 rows)

:PREFIX SELECT time FROM metrics_space WHERE time > '2000-01-10'::timestamp AND time < '2000-01-15'::timestamp ORDER BY time;
                                                                              QUERY PLAN                                                                               
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_space (actual rows=960 loops=1)
   Order: metrics_space."time"
   ->  Merge Append (actual rows=0 loops=1)
         Sort Key: _hyper_6_22_chunk."time"
         ->  Index Only Scan Backward using _hyper_6_22_chunk_metrics_space_time_idx on _hyper_6_22_chunk (actual rows=0 loops=1)
               Index Cond: (("time" > 'Mon Jan 10 00:00:00 2000'::timestamp without time zone) AND ("time" < 'Sat Jan 15 00:00:00 2000'::timestamp without time zone))
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_6_23_chunk_metrics_space_time_idx on _hyper_6_23_chunk (actual rows=0 loops=1)
               Index Cond: (("time" > 'Mon Jan 10 00:00:00 2000'::timestamp without time zone) AND ("time" < 'Sat Jan 15 00:00:00 2000'::timestamp without time zone))
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_6_24_chunk_metrics_space_time_idx on _hyper_6_24_chunk (actual rows=0 loops=1)
               Index Cond: (("time" > 'Mon Jan 10 00:00:00 2000'::timestamp without time zone) AND ("time" < 'Sat Jan 15 00:00:00 2000'::timestamp without time zone))
               Heap Fetches: 0
   ->  Merge Append (actual rows=630 loops=1)
         Sort Key: _hyper_6_25_chunk."time"
         ->  Index Only Scan Backward using _hyper_6_25_chunk_metrics_space_time_idx on _hyper_6_25_chunk (actual rows=252 loops=1)
               Index Cond: (("time" > 'Mon Jan 10 00:00:00 2000'::timestamp without time zone) AND ("time" < 'Sat Jan 15 00:00:00 2000'::timestamp without time zone))
               Heap Fetches: 252
         ->  Index Only Scan Backward using _hyper_6_26_chunk_metrics_space_time_idx on _hyper_6_26_chunk (actual rows=252 loops=1)
               Index Cond: (("time" > 'Mon Jan 10 00:00:00 2000'::timestamp without time zone) AND ("time" < 'Sat Jan 15 00:00:00 2000'::timestamp without time zone))
               Heap Fetches: 252
         ->  Index Only Scan Backward using _hyper_6_27_chunk_metrics_space_time_idx on _hyper_6_27_chunk (actual rows=126 loops=1)
               Index Cond: (("time" > 'Mon Jan 10 00:00:00 2000'::timestamp without time zone) AND ("time" < 'Sat Jan 15 00:00:00 2000'::timestamp without time zone))
               Heap Fetches: 126
   ->  Merge Append (actual rows=330 loops=1)
         Sort Key: _hyper_6_28_chunk."time"
         ->  Index Only Scan Backward using _hyper_6_28_chunk_metrics_space_time_idx on _hyper_6_28_chunk (actual rows=132 loops=1)
               Index Cond: (("time" > 'Mon Jan 10 00:00:00 2000'::timestamp without time zone) AND ("time" < 'Sat Jan 15 00:00:00 2000'::timestamp without time zone))
               Heap Fetches: 132
         ->  Index Only Scan Backward using _hyper_6_29_chunk_metrics_space_time_idx on _hyper_6_29_chunk (actual rows=132 loops=1)
               Index Cond: (("time" > 'Mon Jan 10 00:00:00 2000'::timestamp without time zone) AND ("time" < 'Sat Jan 15 00:00:00 2000'::timestamp without time zone))
               Heap Fetches: 132
         ->  Index Only Scan Backward using _hyper_6_30_chunk_metrics_space_time_idx on _hyper_6_30_chunk (actual rows=66 loops=1)
               Index Cond: (("time" > 'Mon Jan 10 00:00:00 2000'::timestamp without time zone) AND ("time" < 'Sat Jan 15 00:00:00 2000'::timestamp without time zone))
               Heap Fetches: 66
(35 rows)

:PREFIX SELECT time FROM metrics_space WHERE time > '2000-01-10'::timestamptz AND time < '2000-01-15'::timestamptz ORDER BY time;
                                                                               QUERY PLAN                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_space (actual rows=960 loops=1)
   Order: metrics_space."time"
   ->  Merge Append (actual rows=630 loops=1)
         Sort Key: _hyper_6_25_chunk."time"
         ->  Index Only Scan Backward using _hyper_6_25_chunk_metrics_space_time_idx on _hyper_6_25_chunk (actual rows=252 loops=1)
               Index Cond: (("time" > 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone) AND ("time" < 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone))
               Heap Fetches: 252
         ->  Index Only Scan Backward using _hyper_6_26_chunk_metrics_space_time_idx on _hyper_6_26_chunk (actual rows=252 loops=1)
               Index Cond: (("time" > 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone) AND ("time" < 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone))
               Heap Fetches: 252
         ->  Index Only Scan Backward using _hyper_6_27_chunk_metrics_space_time_idx on _hyper_6_27_chunk (actual rows=126 loops=1)
               Index Cond: (("time" > 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone) AND ("time" < 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone))
               Heap Fetches: 126
   ->  Merge Append (actual rows=330 loops=1)
         Sort Key: _hyper_6_28_chunk."time"
         ->  Index Only Scan Backward using _hyper_6_28_chunk_metrics_space_time_idx on _hyper_6_28_chunk (actual rows=132 loops=1)
               Index Cond: (("time" > 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone) AND ("time" < 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone))
               Heap Fetches: 132
         ->  Index Only Scan Backward using _hyper_6_29_chunk_metrics_space_time_idx on _hyper_6_29_chunk (actual rows=132 loops=1)
               Index Cond: (("time" > 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone) AND ("time" < 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone))
               Heap Fetches: 132
         ->  Index Only Scan Backward using _hyper_6_30_chunk_metrics_space_time_idx on _hyper_6_30_chunk (actual rows=66 loops=1)
               Index Cond: (("time" > 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone) AND ("time" < 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone))
               Heap Fetches: 66
(24 rows)

-- test filtering on space partition
:PREFIX SELECT time FROM metrics_space WHERE time > '2000-01-10'::timestamptz AND device_id = 1 ORDER BY time;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_space (actual rows=96 loops=1)
   Order: metrics_space."time"
   ->  Index Only Scan Backward using _hyper_6_25_chunk_metrics_space_device_id_time_idx on _hyper_6_25_chunk (actual rows=63 loops=1)
         Index Cond: ((device_id = 1) AND ("time" > 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone))
         Heap Fetches: 63
   ->  Index Only Scan Backward using _hyper_6_28_chunk_metrics_space_device_id_time_idx on _hyper_6_28_chunk (actual rows=33 loops=1)
         Index Cond: ((device_id = 1) AND ("time" > 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone))
         Heap Fetches: 33
(8 rows)

:PREFIX SELECT time FROM metrics_space WHERE time > '2000-01-10'::timestamptz AND device_id IN (1,2) ORDER BY time;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Sort (actual rows=192 loops=1)
   Sort Key: _hyper_6_25_chunk."time"
   Sort Method: quicksort 
   ->  Append (actual rows=192 loops=1)
         ->  Index Only Scan using _hyper_6_25_chunk_metrics_space_device_id_time_idx on _hyper_6_25_chunk (actual rows=63 loops=1)
               Index Cond: ((device_id = ANY ('{1,2}'::integer[])) AND ("time" > 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone))
               Heap Fetches: 63
         ->  Index Only Scan using _hyper_6_26_chunk_metrics_space_device_id_time_idx on _hyper_6_26_chunk (actual rows=63 loops=1)
               Index Cond: ((device_id = ANY ('{1,2}'::integer[])) AND ("time" > 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone))
               Heap Fetches: 63
         ->  Index Only Scan using _hyper_6_28_chunk_metrics_space_device_id_time_idx on _hyper_6_28_chunk (actual rows=33 loops=1)
               Index Cond: ((device_id = ANY ('{1,2}'::integer[])) AND ("time" > 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone))
               Heap Fetches: 33
         ->  Index Only Scan using _hyper_6_29_chunk_metrics_space_device_id_time_idx on _hyper_6_29_chunk (actual rows=33 loops=1)
               Index Cond: ((device_id = ANY ('{1,2}'::integer[])) AND ("time" > 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone))
               Heap Fetches: 33
(16 rows)

-- test CURRENT_DATE
-- should be 0 chunks
:PREFIX SELECT time FROM metrics_date WHERE time > CURRENT_DATE ORDER BY time;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_date (actual rows=0 loops=1)
   Order: metrics_date."time"
   Chunks excluded during startup: 5
(3 rows)

:PREFIX SELECT time FROM metrics_timestamp WHERE time > CURRENT_DATE ORDER BY time;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamp (actual rows=0 loops=1)
   Order: metrics_timestamp."time"
   Chunks excluded during startup: 5
(3 rows)

:PREFIX SELECT time FROM metrics_timestamptz WHERE time > CURRENT_DATE ORDER BY time;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz (actual rows=0 loops=1)
   Order: metrics_timestamptz."time"
   Chunks excluded during startup: 5
(3 rows)

:PREFIX SELECT time FROM metrics_space WHERE time > CURRENT_DATE ORDER BY time;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_space (actual rows=0 loops=1)
   Order: metrics_space."time"
   ->  Merge Append (actual rows=0 loops=1)
         Sort Key: _hyper_6_22_chunk."time"
         ->  Index Only Scan Backward using _hyper_6_22_chunk_metrics_space_time_idx on _hyper_6_22_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > CURRENT_DATE)
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_6_23_chunk_metrics_space_time_idx on _hyper_6_23_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > CURRENT_DATE)
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_6_24_chunk_metrics_space_time_idx on _hyper_6_24_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > CURRENT_DATE)
               Heap Fetches: 0
   ->  Merge Append (actual rows=0 loops=1)
         Sort Key: _hyper_6_25_chunk."time"
         ->  Index Only Scan Backward using _hyper_6_25_chunk_metrics_space_time_idx on _hyper_6_25_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > CURRENT_DATE)
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_6_26_chunk_metrics_space_time_idx on _hyper_6_26_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > CURRENT_DATE)
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_6_27_chunk_metrics_space_time_idx on _hyper_6_27_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > CURRENT_DATE)
               Heap Fetches: 0
   ->  Merge Append (actual rows=0 loops=1)
         Sort Key: _hyper_6_28_chunk."time"
         ->  Index Only Scan Backward using _hyper_6_28_chunk_metrics_space_time_idx on _hyper_6_28_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > CURRENT_DATE)
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_6_29_chunk_metrics_space_time_idx on _hyper_6_29_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > CURRENT_DATE)
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_6_30_chunk_metrics_space_time_idx on _hyper_6_30_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > CURRENT_DATE)
               Heap Fetches: 0
(35 rows)

-- test CURRENT_TIMESTAMP
-- should be 0 chunks
:PREFIX SELECT time FROM metrics_date WHERE time > CURRENT_TIMESTAMP ORDER BY time;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_date (actual rows=0 loops=1)
   Order: metrics_date."time"
   Chunks excluded during startup: 5
(3 rows)

:PREFIX SELECT time FROM metrics_timestamp WHERE time > CURRENT_TIMESTAMP ORDER BY time;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamp (actual rows=0 loops=1)
   Order: metrics_timestamp."time"
   Chunks excluded during startup: 5
(3 rows)

:PREFIX SELECT time FROM metrics_timestamptz WHERE time > CURRENT_TIMESTAMP ORDER BY time;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz (actual rows=0 loops=1)
   Order: metrics_timestamptz."time"
   Chunks excluded during startup: 5
(3 rows)

:PREFIX SELECT time FROM metrics_space WHERE time > CURRENT_TIMESTAMP ORDER BY time;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_space (actual rows=0 loops=1)
   Order: metrics_space."time"
   ->  Merge Append (actual rows=0 loops=1)
         Sort Key: _hyper_6_22_chunk."time"
         ->  Index Only Scan Backward using _hyper_6_22_chunk_metrics_space_time_idx on _hyper_6_22_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > CURRENT_TIMESTAMP)
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_6_23_chunk_metrics_space_time_idx on _hyper_6_23_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > CURRENT_TIMESTAMP)
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_6_24_chunk_metrics_space_time_idx on _hyper_6_24_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > CURRENT_TIMESTAMP)
               Heap Fetches: 0
   ->  Merge Append (actual rows=0 loops=1)
         Sort Key: _hyper_6_25_chunk."time"
         ->  Index Only Scan Backward using _hyper_6_25_chunk_metrics_space_time_idx on _hyper_6_25_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > CURRENT_TIMESTAMP)
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_6_26_chunk_metrics_space_time_idx on _hyper_6_26_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > CURRENT_TIMESTAMP)
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_6_27_chunk_metrics_space_time_idx on _hyper_6_27_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > CURRENT_TIMESTAMP)
               Heap Fetches: 0
   ->  Merge Append (actual rows=0 loops=1)
         Sort Key: _hyper_6_28_chunk."time"
         ->  Index Only Scan Backward using _hyper_6_28_chunk_metrics_space_time_idx on _hyper_6_28_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > CURRENT_TIMESTAMP)
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_6_29_chunk_metrics_space_time_idx on _hyper_6_29_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > CURRENT_TIMESTAMP)
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_6_30_chunk_metrics_space_time_idx on _hyper_6_30_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > CURRENT_TIMESTAMP)
               Heap Fetches: 0
(35 rows)

-- test now()
-- should be 0 chunks
:PREFIX SELECT time FROM metrics_date WHERE time > now() ORDER BY time;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_date (actual rows=0 loops=1)
   Order: metrics_date."time"
   Chunks excluded during startup: 5
(3 rows)

:PREFIX SELECT time FROM metrics_timestamp WHERE time > now() ORDER BY time;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamp (actual rows=0 loops=1)
   Order: metrics_timestamp."time"
   Chunks excluded during startup: 5
(3 rows)

:PREFIX SELECT time FROM metrics_timestamptz WHERE time > now() ORDER BY time;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz (actual rows=0 loops=1)
   Order: metrics_timestamptz."time"
   Chunks excluded during startup: 5
(3 rows)

:PREFIX SELECT time FROM metrics_space WHERE time > now() ORDER BY time;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_space (actual rows=0 loops=1)
   Order: metrics_space."time"
   ->  Merge Append (actual rows=0 loops=1)
         Sort Key: _hyper_6_22_chunk."time"
         ->  Index Only Scan Backward using _hyper_6_22_chunk_metrics_space_time_idx on _hyper_6_22_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > now())
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_6_23_chunk_metrics_space_time_idx on _hyper_6_23_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > now())
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_6_24_chunk_metrics_space_time_idx on _hyper_6_24_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > now())
               Heap Fetches: 0
   ->  Merge Append (actual rows=0 loops=1)
         Sort Key: _hyper_6_25_chunk."time"
         ->  Index Only Scan Backward using _hyper_6_25_chunk_metrics_space_time_idx on _hyper_6_25_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > now())
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_6_26_chunk_metrics_space_time_idx on _hyper_6_26_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > now())
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_6_27_chunk_metrics_space_time_idx on _hyper_6_27_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > now())
               Heap Fetches: 0
   ->  Merge Append (actual rows=0 loops=1)
         Sort Key: _hyper_6_28_chunk."time"
         ->  Index Only Scan Backward using _hyper_6_28_chunk_metrics_space_time_idx on _hyper_6_28_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > now())
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_6_29_chunk_metrics_space_time_idx on _hyper_6_29_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > now())
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_6_30_chunk_metrics_space_time_idx on _hyper_6_30_chunk (actual rows=0 loops=1)
               Index Cond: ("time" > now())
               Heap Fetches: 0
(35 rows)

-- query with tablesample and planner exclusion
:PREFIX
SELECT * FROM metrics_date TABLESAMPLE BERNOULLI(5) REPEATABLE(0)
WHERE time > '2000-01-15'
ORDER BY time DESC;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Sort (actual rows=17 loops=1)
   Sort Key: _hyper_3_11_chunk."time" DESC
   Sort Method: quicksort 
   ->  Append (actual rows=17 loops=1)
         ->  Sample Scan on _hyper_3_11_chunk (actual rows=4 loops=1)
               Sampling: bernoulli ('5'::real) REPEATABLE ('0'::double precision)
               Filter: ("time" > '01-15-2000'::date)
         ->  Sample Scan on _hyper_3_10_chunk (actual rows=8 loops=1)
               Sampling: bernoulli ('5'::real) REPEATABLE ('0'::double precision)
               Filter: ("time" > '01-15-2000'::date)
         ->  Sample Scan on _hyper_3_9_chunk (actual rows=5 loops=1)
               Sampling: bernoulli ('5'::real) REPEATABLE ('0'::double precision)
               Filter: ("time" > '01-15-2000'::date)
               Rows Removed by Filter: 3
(14 rows)

-- query with tablesample and startup exclusion
:PREFIX
SELECT * FROM metrics_date TABLESAMPLE BERNOULLI(5) REPEATABLE(0)
WHERE time > '2000-01-15'::text::date
ORDER BY time DESC;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Sort (actual rows=17 loops=1)
   Sort Key: metrics_date."time" DESC
   Sort Method: quicksort 
   ->  Custom Scan (ChunkAppend) on metrics_date (actual rows=17 loops=1)
         Chunks excluded during startup: 2
         ->  Sample Scan on _hyper_3_11_chunk (actual rows=4 loops=1)
               Sampling: bernoulli ('5'::real) REPEATABLE ('0'::double precision)
               Filter: ("time" > ('2000-01-15'::cstring)::date)
         ->  Sample Scan on _hyper_3_10_chunk (actual rows=8 loops=1)
               Sampling: bernoulli ('5'::real) REPEATABLE ('0'::double precision)
               Filter: ("time" > ('2000-01-15'::cstring)::date)
         ->  Sample Scan on _hyper_3_9_chunk (actual rows=5 loops=1)
               Sampling: bernoulli ('5'::real) REPEATABLE ('0'::double precision)
               Filter: ("time" > ('2000-01-15'::cstring)::date)
               Rows Removed by Filter: 3
(15 rows)

-- query with tablesample, space partitioning and planner exclusion
:PREFIX
SELECT * FROM metrics_space TABLESAMPLE BERNOULLI(5) REPEATABLE(0)
WHERE time > '2000-01-10'::timestamptz
ORDER BY time DESC, device_id;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Sort (actual rows=51 loops=1)
   Sort Key: _hyper_6_30_chunk."time" DESC, _hyper_6_30_chunk.device_id
   Sort Method: quicksort 
   ->  Append (actual rows=51 loops=1)
         ->  Sample Scan on _hyper_6_30_chunk (actual rows=3 loops=1)
               Sampling: bernoulli ('5'::real) REPEATABLE ('0'::double precision)
               Filter: ("time" > 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone)
         ->  Sample Scan on _hyper_6_29_chunk (actual rows=5 loops=1)
               Sampling: bernoulli ('5'::real) REPEATABLE ('0'::double precision)
               Filter: ("time" > 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone)
         ->  Sample Scan on _hyper_6_28_chunk (actual rows=5 loops=1)
               Sampling: bernoulli ('5'::real) REPEATABLE ('0'::double precision)
               Filter: ("time" > 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone)
         ->  Sample Scan on _hyper_6_27_chunk (actual rows=4 loops=1)
               Sampling: bernoulli ('5'::real) REPEATABLE ('0'::double precision)
               Filter: ("time" > 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone)
               Rows Removed by Filter: 10
         ->  Sample Scan on _hyper_6_26_chunk (actual rows=17 loops=1)
               Sampling: bernoulli ('5'::real) REPEATABLE ('0'::double precision)
               Filter: ("time" > 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone)
               Rows Removed by Filter: 20
         ->  Sample Scan on _hyper_6_25_chunk (actual rows=17 loops=1)
               Sampling: bernoulli ('5'::real) REPEATABLE ('0'::double precision)
               Filter: ("time" > 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone)
               Rows Removed by Filter: 20
(25 rows)

-- test runtime exclusion
-- test runtime exclusion with LATERAL and 2 hypertables
:PREFIX SELECT m1.time, m2.time FROM metrics_timestamptz m1 LEFT JOIN LATERAL(SELECT time FROM metrics_timestamptz m2 WHERE m1.time = m2.time LIMIT 1) m2 ON true ORDER BY m1.time;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Left Join (actual rows=2235 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_timestamptz m1 (actual rows=2235 loops=1)
         Order: m1."time"
         ->  Index Only Scan Backward using _hyper_5_17_chunk_metrics_timestamptz_time_idx on _hyper_5_17_chunk m1_1 (actual rows=336 loops=1)
               Heap Fetches: 336
         ->  Index Only Scan Backward using _hyper_5_18_chunk_metrics_timestamptz_time_idx on _hyper_5_18_chunk m1_2 (actual rows=504 loops=1)
               Heap Fetches: 504
         ->  Index Only Scan Backward using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk m1_3 (actual rows=504 loops=1)
               Heap Fetches: 504
         ->  Index Only Scan Backward using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk m1_4 (actual rows=504 loops=1)
               Heap Fetches: 504
         ->  Index Only Scan Backward using _hyper_5_21_chunk_metrics_timestamptz_time_idx on _hyper_5_21_chunk m1_5 (actual rows=387 loops=1)
               Heap Fetches: 387
   ->  Limit (actual rows=1 loops=2235)
         ->  Custom Scan (ChunkAppend) on metrics_timestamptz m2 (actual rows=1 loops=2235)
               Chunks excluded during runtime: 4
               ->  Index Only Scan using _hyper_5_17_chunk_metrics_timestamptz_time_idx on _hyper_5_17_chunk m2_1 (actual rows=1 loops=336)
                     Index Cond: ("time" = m1."time")
                     Heap Fetches: 336
               ->  Index Only Scan using _hyper_5_18_chunk_metrics_timestamptz_time_idx on _hyper_5_18_chunk m2_2 (actual rows=1 loops=504)
                     Index Cond: ("time" = m1."time")
                     Heap Fetches: 504
               ->  Index Only Scan using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk m2_3 (actual rows=1 loops=504)
                     Index Cond: ("time" = m1."time")
                     Heap Fetches: 504
               ->  Index Only Scan using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk m2_4 (actual rows=1 loops=504)
                     Index Cond: ("time" = m1."time")
                     Heap Fetches: 504
               ->  Index Only Scan using _hyper_5_21_chunk_metrics_timestamptz_time_idx on _hyper_5_21_chunk m2_5 (actual rows=1 loops=387)
                     Index Cond: ("time" = m1."time")
                     Heap Fetches: 387
(31 rows)

-- test runtime exclusion does not activate for constraints on non-partitioning columns
-- should not use runtime exclusion
:PREFIX SELECT * FROM append_test a LEFT JOIN LATERAL(SELECT * FROM join_test j WHERE a.colorid = j.colorid ORDER BY time DESC LIMIT 1) j ON true ORDER BY a.time LIMIT 1;
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Nested Loop Left Join (actual rows=1 loops=1)
         ->  Custom Scan (ChunkAppend) on append_test a (actual rows=1 loops=1)
               Order: a."time"
               ->  Index Scan Backward using _hyper_1_1_chunk_append_test_time_idx on _hyper_1_1_chunk a_1 (actual rows=1 loops=1)
               ->  Index Scan Backward using _hyper_1_2_chunk_append_test_time_idx on _hyper_1_2_chunk a_2 (never executed)
               ->  Index Scan Backward using _hyper_1_3_chunk_append_test_time_idx on _hyper_1_3_chunk a_3 (never executed)
         ->  Limit (actual rows=1 loops=1)
               ->  Custom Scan (ChunkAppend) on join_test j (actual rows=1 loops=1)
                     Order: j."time" DESC
                     ->  Index Scan using _hyper_2_6_chunk_join_test_time_idx on _hyper_2_6_chunk j_1 (actual rows=0 loops=1)
                           Filter: (a.colorid = colorid)
                           Rows Removed by Filter: 1
                     ->  Index Scan using _hyper_2_5_chunk_join_test_time_idx on _hyper_2_5_chunk j_2 (actual rows=0 loops=1)
                           Filter: (a.colorid = colorid)
                           Rows Removed by Filter: 1
                     ->  Index Scan using _hyper_2_4_chunk_join_test_time_idx on _hyper_2_4_chunk j_3 (actual rows=1 loops=1)
                           Filter: (a.colorid = colorid)
(18 rows)

-- test runtime exclusion with LATERAL and generate_series
:PREFIX SELECT g.time FROM generate_series('2000-01-01'::timestamptz, '2000-02-01'::timestamptz, '1d'::interval) g(time) LEFT JOIN LATERAL(SELECT time FROM metrics_timestamptz m WHERE m.time=g.time LIMIT 1) m ON true;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Left Join (actual rows=32 loops=1)
   ->  Function Scan on generate_series g (actual rows=32 loops=1)
   ->  Limit (actual rows=1 loops=32)
         ->  Custom Scan (ChunkAppend) on metrics_timestamptz m (actual rows=1 loops=32)
               Chunks excluded during runtime: 4
               ->  Index Only Scan using _hyper_5_17_chunk_metrics_timestamptz_time_idx on _hyper_5_17_chunk m_1 (actual rows=1 loops=5)
                     Index Cond: ("time" = g."time")
                     Heap Fetches: 5
               ->  Index Only Scan using _hyper_5_18_chunk_metrics_timestamptz_time_idx on _hyper_5_18_chunk m_2 (actual rows=1 loops=7)
                     Index Cond: ("time" = g."time")
                     Heap Fetches: 7
               ->  Index Only Scan using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk m_3 (actual rows=1 loops=7)
                     Index Cond: ("time" = g."time")
                     Heap Fetches: 7
               ->  Index Only Scan using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk m_4 (actual rows=1 loops=7)
                     Index Cond: ("time" = g."time")
                     Heap Fetches: 7
               ->  Index Only Scan using _hyper_5_21_chunk_metrics_timestamptz_time_idx on _hyper_5_21_chunk m_5 (actual rows=1 loops=6)
                     Index Cond: ("time" = g."time")
                     Heap Fetches: 6
(20 rows)

:PREFIX SELECT * FROM generate_series('2000-01-01'::timestamptz,'2000-02-01'::timestamptz,'1d'::interval) AS g(time) INNER JOIN LATERAL (SELECT time FROM metrics_timestamptz m WHERE time=g.time) m ON true;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Merge Join (actual rows=96 loops=1)
   Merge Cond: (m."time" = g."time")
   ->  Merge Append (actual rows=2235 loops=1)
         Sort Key: m."time"
         ->  Index Only Scan Backward using _hyper_5_17_chunk_metrics_timestamptz_time_idx on _hyper_5_17_chunk m (actual rows=336 loops=1)
               Heap Fetches: 336
         ->  Index Only Scan Backward using _hyper_5_18_chunk_metrics_timestamptz_time_idx on _hyper_5_18_chunk m_1 (actual rows=504 loops=1)
               Heap Fetches: 504
         ->  Index Only Scan Backward using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk m_2 (actual rows=504 loops=1)
               Heap Fetches: 504
         ->  Index Only Scan Backward using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk m_3 (actual rows=504 loops=1)
               Heap Fetches: 504
         ->  Index Only Scan Backward using _hyper_5_21_chunk_metrics_timestamptz_time_idx on _hyper_5_21_chunk m_4 (actual rows=387 loops=1)
               Heap Fetches: 387
   ->  Sort (actual rows=94 loops=1)
         Sort Key: g."time"
         Sort Method: quicksort 
         ->  Function Scan on generate_series g (actual rows=32 loops=1)
(18 rows)

:PREFIX SELECT * FROM generate_series('2000-01-01'::timestamptz,'2000-02-01'::timestamptz,'1d'::interval) AS g(time) INNER JOIN LATERAL (SELECT time FROM metrics_timestamptz m WHERE time=g.time ORDER BY time) m ON true;
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Nested Loop (actual rows=96 loops=1)
   ->  Function Scan on generate_series g (actual rows=32 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_timestamptz m (actual rows=3 loops=32)
         Chunks excluded during runtime: 4
         ->  Index Only Scan using _hyper_5_17_chunk_metrics_timestamptz_time_idx on _hyper_5_17_chunk m_1 (actual rows=3 loops=5)
               Index Cond: ("time" = g."time")
               Heap Fetches: 15
         ->  Index Only Scan using _hyper_5_18_chunk_metrics_timestamptz_time_idx on _hyper_5_18_chunk m_2 (actual rows=3 loops=7)
               Index Cond: ("time" = g."time")
               Heap Fetches: 21
         ->  Index Only Scan using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk m_3 (actual rows=3 loops=7)
               Index Cond: ("time" = g."time")
               Heap Fetches: 21
         ->  Index Only Scan using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk m_4 (actual rows=3 loops=7)
               Index Cond: ("time" = g."time")
               Heap Fetches: 21
         ->  Index Only Scan using _hyper_5_21_chunk_metrics_timestamptz_time_idx on _hyper_5_21_chunk m_5 (actual rows=3 loops=6)
               Index Cond: ("time" = g."time")
               Heap Fetches: 18
(19 rows)

:PREFIX SELECT * FROM generate_series('2000-01-01'::timestamptz,'2000-02-01'::timestamptz,'1d'::interval) AS g(time) INNER JOIN LATERAL (SELECT time FROM metrics_timestamptz m WHERE time>g.time + '1 day' ORDER BY time LIMIT 1) m ON true;
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop (actual rows=30 loops=1)
   ->  Function Scan on generate_series g (actual rows=32 loops=1)
   ->  Limit (actual rows=1 loops=32)
         ->  Custom Scan (ChunkAppend) on metrics_timestamptz m (actual rows=1 loops=32)
               Order: m."time"
               Chunks excluded during startup: 0
               Chunks excluded during runtime: 2
               ->  Index Only Scan Backward using _hyper_5_17_chunk_metrics_timestamptz_time_idx on _hyper_5_17_chunk m_1 (actual rows=1 loops=4)
                     Index Cond: ("time" > (g."time" + '@ 1 day'::interval))
                     Heap Fetches: 4
               ->  Index Only Scan Backward using _hyper_5_18_chunk_metrics_timestamptz_time_idx on _hyper_5_18_chunk m_2 (actual rows=1 loops=7)
                     Index Cond: ("time" > (g."time" + '@ 1 day'::interval))
                     Heap Fetches: 7
               ->  Index Only Scan Backward using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk m_3 (actual rows=1 loops=7)
                     Index Cond: ("time" > (g."time" + '@ 1 day'::interval))
                     Heap Fetches: 7
               ->  Index Only Scan Backward using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk m_4 (actual rows=1 loops=7)
                     Index Cond: ("time" > (g."time" + '@ 1 day'::interval))
                     Heap Fetches: 7
               ->  Index Only Scan Backward using _hyper_5_21_chunk_metrics_timestamptz_time_idx on _hyper_5_21_chunk m_5 (actual rows=1 loops=7)
                     Index Cond: ("time" > (g."time" + '@ 1 day'::interval))
                     Heap Fetches: 5
(22 rows)

-- test runtime exclusion with subquery
:PREFIX SELECT m1.time FROM metrics_timestamptz m1 WHERE m1.time=(SELECT max(time) FROM metrics_timestamptz);
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz m1 (actual rows=3 loops=1)
   Chunks excluded during runtime: 4
   InitPlan 2 (returns $1)
     ->  Result (actual rows=1 loops=1)
           InitPlan 1 (returns $0)
             ->  Limit (actual rows=1 loops=1)
                   ->  Custom Scan (ChunkAppend) on metrics_timestamptz (actual rows=1 loops=1)
                         Order: metrics_timestamptz."time" DESC
                         ->  Index Only Scan using _hyper_5_21_chunk_metrics_timestamptz_time_idx on _hyper_5_21_chunk (actual rows=1 loops=1)
                               Index Cond: ("time" IS NOT NULL)
                               Heap Fetches: 1
                         ->  Index Only Scan using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk (never executed)
                               Index Cond: ("time" IS NOT NULL)
                               Heap Fetches: 0
                         ->  Index Only Scan using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk (never executed)
                               Index Cond: ("time" IS NOT NULL)
                               Heap Fetches: 0
                         ->  Index Only Scan using _hyper_5_18_chunk_metrics_timestamptz_time_idx on _hyper_5_18_chunk (never executed)
                               Index Cond: ("time" IS NOT NULL)
                               Heap Fetches: 0
                         ->  Index Only Scan using _hyper_5_17_chunk_metrics_timestamptz_time_idx on _hyper_5_17_chunk (never executed)
                               Index Cond: ("time" IS NOT NULL)
                               Heap Fetches: 0
   ->  Index Only Scan using _hyper_5_17_chunk_metrics_timestamptz_time_idx on _hyper_5_17_chunk m1_1 (never executed)
         Index Cond: ("time" = $1)
         Heap Fetches: 0
   ->  Index Only Scan using _hyper_5_18_chunk_metrics_timestamptz_time_idx on _hyper_5_18_chunk m1_2 (never executed)
         Index Cond: ("time" = $1)
         Heap Fetches: 0
   ->  Index Only Scan using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk m1_3 (never executed)
         Index Cond: ("time" = $1)
         Heap Fetches: 0
   ->  Index Only Scan using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk m1_4 (never executed)
         Index Cond: ("time" = $1)
         Heap Fetches: 0
   ->  Index Only Scan using _hyper_5_21_chunk_metrics_timestamptz_time_idx on _hyper_5_21_chunk m1_5 (actual rows=3 loops=1)
         Index Cond: ("time" = $1)
         Heap Fetches: 3
(38 rows)

-- test runtime exclusion with correlated subquery
:PREFIX SELECT m1.time, (SELECT m2.time FROM metrics_timestamptz m2 WHERE m2.time < m1.time ORDER BY m2.time DESC LIMIT 1) FROM metrics_timestamptz m1 WHERE m1.time < '2000-01-10' ORDER BY m1.time;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz m1 (actual rows=648 loops=1)
   Order: m1."time"
   ->  Index Only Scan Backward using _hyper_5_17_chunk_metrics_timestamptz_time_idx on _hyper_5_17_chunk m1_1 (actual rows=336 loops=1)
         Index Cond: ("time" < 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone)
         Heap Fetches: 336
   ->  Index Only Scan Backward using _hyper_5_18_chunk_metrics_timestamptz_time_idx on _hyper_5_18_chunk m1_2 (actual rows=312 loops=1)
         Index Cond: ("time" < 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone)
         Heap Fetches: 312
   SubPlan 1
     ->  Limit (actual rows=1 loops=648)
           ->  Custom Scan (ChunkAppend) on metrics_timestamptz m2 (actual rows=1 loops=648)
                 Order: m2."time" DESC
                 Chunks excluded during runtime: 3
                 ->  Index Only Scan using _hyper_5_21_chunk_metrics_timestamptz_time_idx on _hyper_5_21_chunk m2_1 (never executed)
                       Index Cond: ("time" < m1."time")
                       Heap Fetches: 0
                 ->  Index Only Scan using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk m2_2 (never executed)
                       Index Cond: ("time" < m1."time")
                       Heap Fetches: 0
                 ->  Index Only Scan using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk m2_3 (never executed)
                       Index Cond: ("time" < m1."time")
                       Heap Fetches: 0
                 ->  Index Only Scan using _hyper_5_18_chunk_metrics_timestamptz_time_idx on _hyper_5_18_chunk m2_4 (actual rows=1 loops=309)
                       Index Cond: ("time" < m1."time")
                       Heap Fetches: 309
                 ->  Index Only Scan using _hyper_5_17_chunk_metrics_timestamptz_time_idx on _hyper_5_17_chunk m2_5 (actual rows=1 loops=339)
                       Index Cond: ("time" < m1."time")
                       Heap Fetches: 336
(28 rows)

-- test EXISTS
:PREFIX SELECT m1.time FROM metrics_timestamptz m1 WHERE EXISTS(SELECT 1 FROM metrics_timestamptz m2 WHERE m1.time < m2.time) ORDER BY m1.time DESC limit 1000;
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1000 loops=1)
   ->  Nested Loop Semi Join (actual rows=1000 loops=1)
         ->  Custom Scan (ChunkAppend) on metrics_timestamptz m1 (actual rows=1003 loops=1)
               Order: m1."time" DESC
               ->  Index Only Scan using _hyper_5_21_chunk_metrics_timestamptz_time_idx on _hyper_5_21_chunk m1_1 (actual rows=387 loops=1)
                     Heap Fetches: 387
               ->  Index Only Scan using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk m1_2 (actual rows=504 loops=1)
                     Heap Fetches: 504
               ->  Index Only Scan using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk m1_3 (actual rows=112 loops=1)
                     Heap Fetches: 112
               ->  Index Only Scan using _hyper_5_18_chunk_metrics_timestamptz_time_idx on _hyper_5_18_chunk m1_4 (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_5_17_chunk_metrics_timestamptz_time_idx on _hyper_5_17_chunk m1_5 (never executed)
                     Heap Fetches: 0
         ->  Append (actual rows=1 loops=1003)
               ->  Index Only Scan using _hyper_5_17_chunk_metrics_timestamptz_time_idx on _hyper_5_17_chunk m2 (actual rows=0 loops=1003)
                     Index Cond: ("time" > m1."time")
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_5_18_chunk_metrics_timestamptz_time_idx on _hyper_5_18_chunk m2_1 (actual rows=0 loops=1003)
                     Index Cond: ("time" > m1."time")
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk m2_2 (actual rows=0 loops=1003)
                     Index Cond: ("time" > m1."time")
                     Heap Fetches: 109
               ->  Index Only Scan using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk m2_3 (actual rows=1 loops=894)
                     Index Cond: ("time" > m1."time")
                     Heap Fetches: 504
               ->  Index Only Scan using _hyper_5_21_chunk_metrics_timestamptz_time_idx on _hyper_5_21_chunk m2_4 (actual rows=1 loops=390)
                     Index Cond: ("time" > m1."time")
                     Heap Fetches: 387
(30 rows)

-- test constraint exclusion for subqueries with append
-- should include 2 chunks
:PREFIX SELECT time FROM (SELECT time FROM metrics_timestamptz WHERE time < '2000-01-10'::text::timestamptz ORDER BY time) m;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz (actual rows=648 loops=1)
   Order: metrics_timestamptz."time"
   Chunks excluded during startup: 3
   ->  Index Only Scan Backward using _hyper_5_17_chunk_metrics_timestamptz_time_idx on _hyper_5_17_chunk (actual rows=336 loops=1)
         Index Cond: ("time" < ('2000-01-10'::cstring)::timestamp with time zone)
         Heap Fetches: 336
   ->  Index Only Scan Backward using _hyper_5_18_chunk_metrics_timestamptz_time_idx on _hyper_5_18_chunk (actual rows=312 loops=1)
         Index Cond: ("time" < ('2000-01-10'::cstring)::timestamp with time zone)
         Heap Fetches: 312
(9 rows)

-- test constraint exclusion for subqueries with mergeappend
-- should include 2 chunks
:PREFIX SELECT device_id, time FROM (SELECT device_id, time FROM metrics_timestamptz WHERE time < '2000-01-10'::text::timestamptz ORDER BY device_id, time) m;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ConstraintAwareAppend) (actual rows=648 loops=1)
   Hypertable: metrics_timestamptz
   Chunks left after exclusion: 2
   ->  Merge Append (actual rows=648 loops=1)
         Sort Key: _hyper_5_17_chunk.device_id, _hyper_5_17_chunk."time"
         ->  Index Only Scan using _hyper_5_17_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_17_chunk (actual rows=336 loops=1)
               Index Cond: ("time" < ('2000-01-10'::cstring)::timestamp with time zone)
               Heap Fetches: 336
         ->  Index Only Scan using _hyper_5_18_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_18_chunk (actual rows=312 loops=1)
               Index Cond: ("time" < ('2000-01-10'::cstring)::timestamp with time zone)
               Heap Fetches: 312
(11 rows)

-- test prepared statements
-- executor startup exclusion with no chunks excluded
PREPARE prep AS SELECT time FROM metrics_timestamptz WHERE time < now() AND device_id = 1 ORDER BY time;
:PREFIX EXECUTE prep;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz (actual rows=745 loops=1)
   Order: metrics_timestamptz."time"
   Chunks excluded during startup: 0
   ->  Index Only Scan using _hyper_5_17_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_17_chunk (actual rows=112 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 112
   ->  Index Only Scan using _hyper_5_18_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_18_chunk (actual rows=168 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 168
   ->  Index Only Scan using _hyper_5_19_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_19_chunk (actual rows=168 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 168
   ->  Index Only Scan using _hyper_5_20_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_20_chunk (actual rows=168 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 168
   ->  Index Only Scan using _hyper_5_21_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_21_chunk (actual rows=129 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 129
(18 rows)

:PREFIX EXECUTE prep;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz (actual rows=745 loops=1)
   Order: metrics_timestamptz."time"
   Chunks excluded during startup: 0
   ->  Index Only Scan using _hyper_5_17_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_17_chunk (actual rows=112 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 112
   ->  Index Only Scan using _hyper_5_18_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_18_chunk (actual rows=168 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 168
   ->  Index Only Scan using _hyper_5_19_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_19_chunk (actual rows=168 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 168
   ->  Index Only Scan using _hyper_5_20_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_20_chunk (actual rows=168 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 168
   ->  Index Only Scan using _hyper_5_21_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_21_chunk (actual rows=129 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 129
(18 rows)

:PREFIX EXECUTE prep;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz (actual rows=745 loops=1)
   Order: metrics_timestamptz."time"
   Chunks excluded during startup: 0
   ->  Index Only Scan using _hyper_5_17_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_17_chunk (actual rows=112 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 112
   ->  Index Only Scan using _hyper_5_18_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_18_chunk (actual rows=168 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 168
   ->  Index Only Scan using _hyper_5_19_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_19_chunk (actual rows=168 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 168
   ->  Index Only Scan using _hyper_5_20_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_20_chunk (actual rows=168 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 168
   ->  Index Only Scan using _hyper_5_21_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_21_chunk (actual rows=129 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 129
(18 rows)

:PREFIX EXECUTE prep;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz (actual rows=745 loops=1)
   Order: metrics_timestamptz."time"
   Chunks excluded during startup: 0
   ->  Index Only Scan using _hyper_5_17_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_17_chunk (actual rows=112 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 112
   ->  Index Only Scan using _hyper_5_18_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_18_chunk (actual rows=168 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 168
   ->  Index Only Scan using _hyper_5_19_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_19_chunk (actual rows=168 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 168
   ->  Index Only Scan using _hyper_5_20_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_20_chunk (actual rows=168 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 168
   ->  Index Only Scan using _hyper_5_21_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_21_chunk (actual rows=129 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 129
(18 rows)

:PREFIX EXECUTE prep;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz (actual rows=745 loops=1)
   Order: metrics_timestamptz."time"
   Chunks excluded during startup: 0
   ->  Index Only Scan using _hyper_5_17_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_17_chunk (actual rows=112 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 112
   ->  Index Only Scan using _hyper_5_18_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_18_chunk (actual rows=168 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 168
   ->  Index Only Scan using _hyper_5_19_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_19_chunk (actual rows=168 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 168
   ->  Index Only Scan using _hyper_5_20_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_20_chunk (actual rows=168 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 168
   ->  Index Only Scan using _hyper_5_21_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_21_chunk (actual rows=129 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 129
(18 rows)

DEALLOCATE prep;
-- executor startup exclusion with no chunks excluded and space partitioning
PREPARE prep AS SELECT time FROM metrics_space WHERE time < now() AND device_id = 1 ORDER BY time;
:PREFIX EXECUTE prep;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_space (actual rows=313 loops=1)
   Order: metrics_space."time"
   Chunks excluded during startup: 0
   ->  Index Only Scan Backward using _hyper_6_22_chunk_metrics_space_device_id_time_idx on _hyper_6_22_chunk (actual rows=112 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 112
   ->  Index Only Scan Backward using _hyper_6_25_chunk_metrics_space_device_id_time_idx on _hyper_6_25_chunk (actual rows=168 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 168
   ->  Index Only Scan Backward using _hyper_6_28_chunk_metrics_space_device_id_time_idx on _hyper_6_28_chunk (actual rows=33 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 33
(12 rows)

:PREFIX EXECUTE prep;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_space (actual rows=313 loops=1)
   Order: metrics_space."time"
   Chunks excluded during startup: 0
   ->  Index Only Scan Backward using _hyper_6_22_chunk_metrics_space_device_id_time_idx on _hyper_6_22_chunk (actual rows=112 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 112
   ->  Index Only Scan Backward using _hyper_6_25_chunk_metrics_space_device_id_time_idx on _hyper_6_25_chunk (actual rows=168 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 168
   ->  Index Only Scan Backward using _hyper_6_28_chunk_metrics_space_device_id_time_idx on _hyper_6_28_chunk (actual rows=33 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 33
(12 rows)

:PREFIX EXECUTE prep;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_space (actual rows=313 loops=1)
   Order: metrics_space."time"
   Chunks excluded during startup: 0
   ->  Index Only Scan Backward using _hyper_6_22_chunk_metrics_space_device_id_time_idx on _hyper_6_22_chunk (actual rows=112 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 112
   ->  Index Only Scan Backward using _hyper_6_25_chunk_metrics_space_device_id_time_idx on _hyper_6_25_chunk (actual rows=168 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 168
   ->  Index Only Scan Backward using _hyper_6_28_chunk_metrics_space_device_id_time_idx on _hyper_6_28_chunk (actual rows=33 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 33
(12 rows)

:PREFIX EXECUTE prep;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_space (actual rows=313 loops=1)
   Order: metrics_space."time"
   Chunks excluded during startup: 0
   ->  Index Only Scan Backward using _hyper_6_22_chunk_metrics_space_device_id_time_idx on _hyper_6_22_chunk (actual rows=112 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 112
   ->  Index Only Scan Backward using _hyper_6_25_chunk_metrics_space_device_id_time_idx on _hyper_6_25_chunk (actual rows=168 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 168
   ->  Index Only Scan Backward using _hyper_6_28_chunk_metrics_space_device_id_time_idx on _hyper_6_28_chunk (actual rows=33 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 33
(12 rows)

:PREFIX EXECUTE prep;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_space (actual rows=313 loops=1)
   Order: metrics_space."time"
   Chunks excluded during startup: 0
   ->  Index Only Scan Backward using _hyper_6_22_chunk_metrics_space_device_id_time_idx on _hyper_6_22_chunk (actual rows=112 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 112
   ->  Index Only Scan Backward using _hyper_6_25_chunk_metrics_space_device_id_time_idx on _hyper_6_25_chunk (actual rows=168 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 168
   ->  Index Only Scan Backward using _hyper_6_28_chunk_metrics_space_device_id_time_idx on _hyper_6_28_chunk (actual rows=33 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < now()))
         Heap Fetches: 33
(12 rows)

DEALLOCATE prep;
-- executor startup exclusion with chunks excluded
PREPARE prep AS SELECT time FROM metrics_timestamptz WHERE time < '2000-01-10'::text::timestamptz AND device_id = 1 ORDER BY time;
:PREFIX EXECUTE prep;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz (actual rows=216 loops=1)
   Order: metrics_timestamptz."time"
   Chunks excluded during startup: 3
   ->  Index Only Scan using _hyper_5_17_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_17_chunk (actual rows=112 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < ('2000-01-10'::cstring)::timestamp with time zone))
         Heap Fetches: 112
   ->  Index Only Scan using _hyper_5_18_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_18_chunk (actual rows=104 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < ('2000-01-10'::cstring)::timestamp with time zone))
         Heap Fetches: 104
(9 rows)

:PREFIX EXECUTE prep;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz (actual rows=216 loops=1)
   Order: metrics_timestamptz."time"
   Chunks excluded during startup: 3
   ->  Index Only Scan using _hyper_5_17_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_17_chunk (actual rows=112 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < ('2000-01-10'::cstring)::timestamp with time zone))
         Heap Fetches: 112
   ->  Index Only Scan using _hyper_5_18_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_18_chunk (actual rows=104 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < ('2000-01-10'::cstring)::timestamp with time zone))
         Heap Fetches: 104
(9 rows)

:PREFIX EXECUTE prep;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz (actual rows=216 loops=1)
   Order: metrics_timestamptz."time"
   Chunks excluded during startup: 3
   ->  Index Only Scan using _hyper_5_17_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_17_chunk (actual rows=112 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < ('2000-01-10'::cstring)::timestamp with time zone))
         Heap Fetches: 112
   ->  Index Only Scan using _hyper_5_18_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_18_chunk (actual rows=104 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < ('2000-01-10'::cstring)::timestamp with time zone))
         Heap Fetches: 104
(9 rows)

:PREFIX EXECUTE prep;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz (actual rows=216 loops=1)
   Order: metrics_timestamptz."time"
   Chunks excluded during startup: 3
   ->  Index Only Scan using _hyper_5_17_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_17_chunk (actual rows=112 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < ('2000-01-10'::cstring)::timestamp with time zone))
         Heap Fetches: 112
   ->  Index Only Scan using _hyper_5_18_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_18_chunk (actual rows=104 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < ('2000-01-10'::cstring)::timestamp with time zone))
         Heap Fetches: 104
(9 rows)

:PREFIX EXECUTE prep;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz (actual rows=216 loops=1)
   Order: metrics_timestamptz."time"
   Chunks excluded during startup: 3
   ->  Index Only Scan using _hyper_5_17_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_17_chunk (actual rows=112 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < ('2000-01-10'::cstring)::timestamp with time zone))
         Heap Fetches: 112
   ->  Index Only Scan using _hyper_5_18_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_18_chunk (actual rows=104 loops=1)
         Index Cond: ((device_id = 1) AND ("time" < ('2000-01-10'::cstring)::timestamp with time zone))
         Heap Fetches: 104
(9 rows)

DEALLOCATE prep;
-- runtime exclusion with LATERAL and 2 hypertables
PREPARE prep AS SELECT m1.time, m2.time FROM metrics_timestamptz m1 LEFT JOIN LATERAL(SELECT time FROM metrics_timestamptz m2 WHERE m1.time = m2.time LIMIT 1) m2 ON true ORDER BY m1.time;
:PREFIX EXECUTE prep;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Left Join (actual rows=2235 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_timestamptz m1 (actual rows=2235 loops=1)
         Order: m1."time"
         ->  Index Only Scan Backward using _hyper_5_17_chunk_metrics_timestamptz_time_idx on _hyper_5_17_chunk m1_1 (actual rows=336 loops=1)
               Heap Fetches: 336
         ->  Index Only Scan Backward using _hyper_5_18_chunk_metrics_timestamptz_time_idx on _hyper_5_18_chunk m1_2 (actual rows=504 loops=1)
               Heap Fetches: 504
         ->  Index Only Scan Backward using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk m1_3 (actual rows=504 loops=1)
               Heap Fetches: 504
         ->  Index Only Scan Backward using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk m1_4 (actual rows=504 loops=1)
               Heap Fetches: 504
         ->  Index Only Scan Backward using _hyper_5_21_chunk_metrics_timestamptz_time_idx on _hyper_5_21_chunk m1_5 (actual rows=387 loops=1)
               Heap Fetches: 387
   ->  Limit (actual rows=1 loops=2235)
         ->  Custom Scan (ChunkAppend) on metrics_timestamptz m2 (actual rows=1 loops=2235)
               Chunks excluded during runtime: 4
               ->  Index Only Scan using _hyper_5_17_chunk_metrics_timestamptz_time_idx on _hyper_5_17_chunk m2_1 (actual rows=1 loops=336)
                     Index Cond: ("time" = m1."time")
                     Heap Fetches: 336
               ->  Index Only Scan using _hyper_5_18_chunk_metrics_timestamptz_time_idx on _hyper_5_18_chunk m2_2 (actual rows=1 loops=504)
                     Index Cond: ("time" = m1."time")
                     Heap Fetches: 504
               ->  Index Only Scan using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk m2_3 (actual rows=1 loops=504)
                     Index Cond: ("time" = m1."time")
                     Heap Fetches: 504
               ->  Index Only Scan using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk m2_4 (actual rows=1 loops=504)
                     Index Cond: ("time" = m1."time")
                     Heap Fetches: 504
               ->  Index Only Scan using _hyper_5_21_chunk_metrics_timestamptz_time_idx on _hyper_5_21_chunk m2_5 (actual rows=1 loops=387)
                     Index Cond: ("time" = m1."time")
                     Heap Fetches: 387
(31 rows)

:PREFIX EXECUTE prep;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Left Join (actual rows=2235 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_timestamptz m1 (actual rows=2235 loops=1)
         Order: m1."time"
         ->  Index Only Scan Backward using _hyper_5_17_chunk_metrics_timestamptz_time_idx on _hyper_5_17_chunk m1_1 (actual rows=336 loops=1)
               Heap Fetches: 336
         ->  Index Only Scan Backward using _hyper_5_18_chunk_metrics_timestamptz_time_idx on _hyper_5_18_chunk m1_2 (actual rows=504 loops=1)
               Heap Fetches: 504
         ->  Index Only Scan Backward using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk m1_3 (actual rows=504 loops=1)
               Heap Fetches: 504
         ->  Index Only Scan Backward using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk m1_4 (actual rows=504 loops=1)
               Heap Fetches: 504
         ->  Index Only Scan Backward using _hyper_5_21_chunk_metrics_timestamptz_time_idx on _hyper_5_21_chunk m1_5 (actual rows=387 loops=1)
               Heap Fetches: 387
   ->  Limit (actual rows=1 loops=2235)
         ->  Custom Scan (ChunkAppend) on metrics_timestamptz m2 (actual rows=1 loops=2235)
               Chunks excluded during runtime: 4
               ->  Index Only Scan using _hyper_5_17_chunk_metrics_timestamptz_time_idx on _hyper_5_17_chunk m2_1 (actual rows=1 loops=336)
                     Index Cond: ("time" = m1."time")
                     Heap Fetches: 336
               ->  Index Only Scan using _hyper_5_18_chunk_metrics_timestamptz_time_idx on _hyper_5_18_chunk m2_2 (actual rows=1 loops=504)
                     Index Cond: ("time" = m1."time")
                     Heap Fetches: 504
               ->  Index Only Scan using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk m2_3 (actual rows=1 loops=504)
                     Index Cond: ("time" = m1."time")
                     Heap Fetches: 504
               ->  Index Only Scan using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk m2_4 (actual rows=1 loops=504)
                     Index Cond: ("time" = m1."time")
                     Heap Fetches: 504
               ->  Index Only Scan using _hyper_5_21_chunk_metrics_timestamptz_time_idx on _hyper_5_21_chunk m2_5 (actual rows=1 loops=387)
                     Index Cond: ("time" = m1."time")
                     Heap Fetches: 387
(31 rows)

:PREFIX EXECUTE prep;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Left Join (actual rows=2235 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_timestamptz m1 (actual rows=2235 loops=1)
         Order: m1."time"
         ->  Index Only Scan Backward using _hyper_5_17_chunk_metrics_timestamptz_time_idx on _hyper_5_17_chunk m1_1 (actual rows=336 loops=1)
               Heap Fetches: 336
         ->  Index Only Scan Backward using _hyper_5_18_chunk_metrics_timestamptz_time_idx on _hyper_5_18_chunk m1_2 (actual rows=504 loops=1)
               Heap Fetches: 504
         ->  Index Only Scan Backward using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk m1_3 (actual rows=504 loops=1)
               Heap Fetches: 504
         ->  Index Only Scan Backward using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk m1_4 (actual rows=504 loops=1)
               Heap Fetches: 504
         ->  Index Only Scan Backward using _hyper_5_21_chunk_metrics_timestamptz_time_idx on _hyper_5_21_chunk m1_5 (actual rows=387 loops=1)
               Heap Fetches: 387
   ->  Limit (actual rows=1 loops=2235)
         ->  Custom Scan (ChunkAppend) on metrics_timestamptz m2 (actual rows=1 loops=2235)
               Chunks excluded during runtime: 4
               ->  Index Only Scan using _hyper_5_17_chunk_metrics_timestamptz_time_idx on _hyper_5_17_chunk m2_1 (actual rows=1 loops=336)
                     Index Cond: ("time" = m1."time")
                     Heap Fetches: 336
               ->  Index Only Scan using _hyper_5_18_chunk_metrics_timestamptz_time_idx on _hyper_5_18_chunk m2_2 (actual rows=1 loops=504)
                     Index Cond: ("time" = m1."time")
                     Heap Fetches: 504
               ->  Index Only Scan using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk m2_3 (actual rows=1 loops=504)
                     Index Cond: ("time" = m1."time")
                     Heap Fetches: 504
               ->  Index Only Scan using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk m2_4 (actual rows=1 loops=504)
                     Index Cond: ("time" = m1."time")
                     Heap Fetches: 504
               ->  Index Only Scan using _hyper_5_21_chunk_metrics_timestamptz_time_idx on _hyper_5_21_chunk m2_5 (actual rows=1 loops=387)
                     Index Cond: ("time" = m1."time")
                     Heap Fetches: 387
(31 rows)

:PREFIX EXECUTE prep;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Left Join (actual rows=2235 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_timestamptz m1 (actual rows=2235 loops=1)
         Order: m1."time"
         ->  Index Only Scan Backward using _hyper_5_17_chunk_metrics_timestamptz_time_idx on _hyper_5_17_chunk m1_1 (actual rows=336 loops=1)
               Heap Fetches: 336
         ->  Index Only Scan Backward using _hyper_5_18_chunk_metrics_timestamptz_time_idx on _hyper_5_18_chunk m1_2 (actual rows=504 loops=1)
               Heap Fetches: 504
         ->  Index Only Scan Backward using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk m1_3 (actual rows=504 loops=1)
               Heap Fetches: 504
         ->  Index Only Scan Backward using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk m1_4 (actual rows=504 loops=1)
               Heap Fetches: 504
         ->  Index Only Scan Backward using _hyper_5_21_chunk_metrics_timestamptz_time_idx on _hyper_5_21_chunk m1_5 (actual rows=387 loops=1)
               Heap Fetches: 387
   ->  Limit (actual rows=1 loops=2235)
         ->  Custom Scan (ChunkAppend) on metrics_timestamptz m2 (actual rows=1 loops=2235)
               Chunks excluded during runtime: 4
               ->  Index Only Scan using _hyper_5_17_chunk_metrics_timestamptz_time_idx on _hyper_5_17_chunk m2_1 (actual rows=1 loops=336)
                     Index Cond: ("time" = m1."time")
                     Heap Fetches: 336
               ->  Index Only Scan using _hyper_5_18_chunk_metrics_timestamptz_time_idx on _hyper_5_18_chunk m2_2 (actual rows=1 loops=504)
                     Index Cond: ("time" = m1."time")
                     Heap Fetches: 504
               ->  Index Only Scan using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk m2_3 (actual rows=1 loops=504)
                     Index Cond: ("time" = m1."time")
                     Heap Fetches: 504
               ->  Index Only Scan using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk m2_4 (actual rows=1 loops=504)
                     Index Cond: ("time" = m1."time")
                     Heap Fetches: 504
               ->  Index Only Scan using _hyper_5_21_chunk_metrics_timestamptz_time_idx on _hyper_5_21_chunk m2_5 (actual rows=1 loops=387)
                     Index Cond: ("time" = m1."time")
                     Heap Fetches: 387
(31 rows)

:PREFIX EXECUTE prep;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Left Join (actual rows=2235 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_timestamptz m1 (actual rows=2235 loops=1)
         Order: m1."time"
         ->  Index Only Scan Backward using _hyper_5_17_chunk_metrics_timestamptz_time_idx on _hyper_5_17_chunk m1_1 (actual rows=336 loops=1)
               Heap Fetches: 336
         ->  Index Only Scan Backward using _hyper_5_18_chunk_metrics_timestamptz_time_idx on _hyper_5_18_chunk m1_2 (actual rows=504 loops=1)
               Heap Fetches: 504
         ->  Index Only Scan Backward using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk m1_3 (actual rows=504 loops=1)
               Heap Fetches: 504
         ->  Index Only Scan Backward using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk m1_4 (actual rows=504 loops=1)
               Heap Fetches: 504
         ->  Index Only Scan Backward using _hyper_5_21_chunk_metrics_timestamptz_time_idx on _hyper_5_21_chunk m1_5 (actual rows=387 loops=1)
               Heap Fetches: 387
   ->  Limit (actual rows=1 loops=2235)
         ->  Custom Scan (ChunkAppend) on metrics_timestamptz m2 (actual rows=1 loops=2235)
               Chunks excluded during runtime: 4
               ->  Index Only Scan using _hyper_5_17_chunk_metrics_timestamptz_time_idx on _hyper_5_17_chunk m2_1 (actual rows=1 loops=336)
                     Index Cond: ("time" = m1."time")
                     Heap Fetches: 336
               ->  Index Only Scan using _hyper_5_18_chunk_metrics_timestamptz_time_idx on _hyper_5_18_chunk m2_2 (actual rows=1 loops=504)
                     Index Cond: ("time" = m1."time")
                     Heap Fetches: 504
               ->  Index Only Scan using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk m2_3 (actual rows=1 loops=504)
                     Index Cond: ("time" = m1."time")
                     Heap Fetches: 504
               ->  Index Only Scan using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk m2_4 (actual rows=1 loops=504)
                     Index Cond: ("time" = m1."time")
                     Heap Fetches: 504
               ->  Index Only Scan using _hyper_5_21_chunk_metrics_timestamptz_time_idx on _hyper_5_21_chunk m2_5 (actual rows=1 loops=387)
                     Index Cond: ("time" = m1."time")
                     Heap Fetches: 387
(31 rows)

DEALLOCATE prep;
-- executor startup exclusion with subquery
PREPARE prep AS SELECT time FROM (SELECT time FROM metrics_timestamptz WHERE time < '2000-01-10'::text::timestamptz ORDER BY time) m;
:PREFIX EXECUTE prep;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz (actual rows=648 loops=1)
   Order: metrics_timestamptz."time"
   Chunks excluded during startup: 3
   ->  Index Only Scan Backward using _hyper_5_17_chunk_metrics_timestamptz_time_idx on _hyper_5_17_chunk (actual rows=336 loops=1)
         Index Cond: ("time" < ('2000-01-10'::cstring)::timestamp with time zone)
         Heap Fetches: 336
   ->  Index Only Scan Backward using _hyper_5_18_chunk_metrics_timestamptz_time_idx on _hyper_5_18_chunk (actual rows=312 loops=1)
         Index Cond: ("time" < ('2000-01-10'::cstring)::timestamp with time zone)
         Heap Fetches: 312
(9 rows)

:PREFIX EXECUTE prep;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz (actual rows=648 loops=1)
   Order: metrics_timestamptz."time"
   Chunks excluded during startup: 3
   ->  Index Only Scan Backward using _hyper_5_17_chunk_metrics_timestamptz_time_idx on _hyper_5_17_chunk (actual rows=336 loops=1)
         Index Cond: ("time" < ('2000-01-10'::cstring)::timestamp with time zone)
         Heap Fetches: 336
   ->  Index Only Scan Backward using _hyper_5_18_chunk_metrics_timestamptz_time_idx on _hyper_5_18_chunk (actual rows=312 loops=1)
         Index Cond: ("time" < ('2000-01-10'::cstring)::timestamp with time zone)
         Heap Fetches: 312
(9 rows)

:PREFIX EXECUTE prep;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz (actual rows=648 loops=1)
   Order: metrics_timestamptz."time"
   Chunks excluded during startup: 3
   ->  Index Only Scan Backward using _hyper_5_17_chunk_metrics_timestamptz_time_idx on _hyper_5_17_chunk (actual rows=336 loops=1)
         Index Cond: ("time" < ('2000-01-10'::cstring)::timestamp with time zone)
         Heap Fetches: 336
   ->  Index Only Scan Backward using _hyper_5_18_chunk_metrics_timestamptz_time_idx on _hyper_5_18_chunk (actual rows=312 loops=1)
         Index Cond: ("time" < ('2000-01-10'::cstring)::timestamp with time zone)
         Heap Fetches: 312
(9 rows)

:PREFIX EXECUTE prep;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz (actual rows=648 loops=1)
   Order: metrics_timestamptz."time"
   Chunks excluded during startup: 3
   ->  Index Only Scan Backward using _hyper_5_17_chunk_metrics_timestamptz_time_idx on _hyper_5_17_chunk (actual rows=336 loops=1)
         Index Cond: ("time" < ('2000-01-10'::cstring)::timestamp with time zone)
         Heap Fetches: 336
   ->  Index Only Scan Backward using _hyper_5_18_chunk_metrics_timestamptz_time_idx on _hyper_5_18_chunk (actual rows=312 loops=1)
         Index Cond: ("time" < ('2000-01-10'::cstring)::timestamp with time zone)
         Heap Fetches: 312
(9 rows)

:PREFIX EXECUTE prep;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz (actual rows=648 loops=1)
   Order: metrics_timestamptz."time"
   Chunks excluded during startup: 3
   ->  Index Only Scan Backward using _hyper_5_17_chunk_metrics_timestamptz_time_idx on _hyper_5_17_chunk (actual rows=336 loops=1)
         Index Cond: ("time" < ('2000-01-10'::cstring)::timestamp with time zone)
         Heap Fetches: 336
   ->  Index Only Scan Backward using _hyper_5_18_chunk_metrics_timestamptz_time_idx on _hyper_5_18_chunk (actual rows=312 loops=1)
         Index Cond: ("time" < ('2000-01-10'::cstring)::timestamp with time zone)
         Heap Fetches: 312
(9 rows)

DEALLOCATE prep;
-- test constraint exclusion for subqueries with ConstraintAwareAppend
SET timescaledb.enable_chunk_append TO false;
PREPARE prep AS SELECT device_id, time FROM (SELECT device_id, time FROM metrics_timestamptz WHERE time < '2000-01-10'::text::timestamptz ORDER BY device_id, time) m;
:PREFIX EXECUTE prep;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ConstraintAwareAppend) (actual rows=648 loops=1)
   Hypertable: metrics_timestamptz
   Chunks left after exclusion: 2
   ->  Merge Append (actual rows=648 loops=1)
         Sort Key: _hyper_5_17_chunk.device_id, _hyper_5_17_chunk."time"
         ->  Index Only Scan using _hyper_5_17_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_17_chunk (actual rows=336 loops=1)
               Index Cond: ("time" < ('2000-01-10'::cstring)::timestamp with time zone)
               Heap Fetches: 336
         ->  Index Only Scan using _hyper_5_18_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_18_chunk (actual rows=312 loops=1)
               Index Cond: ("time" < ('2000-01-10'::cstring)::timestamp with time zone)
               Heap Fetches: 312
(11 rows)

:PREFIX EXECUTE prep;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ConstraintAwareAppend) (actual rows=648 loops=1)
   Hypertable: metrics_timestamptz
   Chunks left after exclusion: 2
   ->  Merge Append (actual rows=648 loops=1)
         Sort Key: _hyper_5_17_chunk.device_id, _hyper_5_17_chunk."time"
         ->  Index Only Scan using _hyper_5_17_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_17_chunk (actual rows=336 loops=1)
               Index Cond: ("time" < ('2000-01-10'::cstring)::timestamp with time zone)
               Heap Fetches: 336
         ->  Index Only Scan using _hyper_5_18_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_18_chunk (actual rows=312 loops=1)
               Index Cond: ("time" < ('2000-01-10'::cstring)::timestamp with time zone)
               Heap Fetches: 312
(11 rows)

:PREFIX EXECUTE prep;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ConstraintAwareAppend) (actual rows=648 loops=1)
   Hypertable: metrics_timestamptz
   Chunks left after exclusion: 2
   ->  Merge Append (actual rows=648 loops=1)
         Sort Key: _hyper_5_17_chunk.device_id, _hyper_5_17_chunk."time"
         ->  Index Only Scan using _hyper_5_17_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_17_chunk (actual rows=336 loops=1)
               Index Cond: ("time" < ('2000-01-10'::cstring)::timestamp with time zone)
               Heap Fetches: 336
         ->  Index Only Scan using _hyper_5_18_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_18_chunk (actual rows=312 loops=1)
               Index Cond: ("time" < ('2000-01-10'::cstring)::timestamp with time zone)
               Heap Fetches: 312
(11 rows)

:PREFIX EXECUTE prep;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ConstraintAwareAppend) (actual rows=648 loops=1)
   Hypertable: metrics_timestamptz
   Chunks left after exclusion: 2
   ->  Merge Append (actual rows=648 loops=1)
         Sort Key: _hyper_5_17_chunk.device_id, _hyper_5_17_chunk."time"
         ->  Index Only Scan using _hyper_5_17_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_17_chunk (actual rows=336 loops=1)
               Index Cond: ("time" < ('2000-01-10'::cstring)::timestamp with time zone)
               Heap Fetches: 336
         ->  Index Only Scan using _hyper_5_18_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_18_chunk (actual rows=312 loops=1)
               Index Cond: ("time" < ('2000-01-10'::cstring)::timestamp with time zone)
               Heap Fetches: 312
(11 rows)

:PREFIX EXECUTE prep;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ConstraintAwareAppend) (actual rows=648 loops=1)
   Hypertable: metrics_timestamptz
   Chunks left after exclusion: 2
   ->  Merge Append (actual rows=648 loops=1)
         Sort Key: _hyper_5_17_chunk.device_id, _hyper_5_17_chunk."time"
         ->  Index Only Scan using _hyper_5_17_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_17_chunk (actual rows=336 loops=1)
               Index Cond: ("time" < ('2000-01-10'::cstring)::timestamp with time zone)
               Heap Fetches: 336
         ->  Index Only Scan using _hyper_5_18_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_18_chunk (actual rows=312 loops=1)
               Index Cond: ("time" < ('2000-01-10'::cstring)::timestamp with time zone)
               Heap Fetches: 312
(11 rows)

DEALLOCATE prep;
RESET timescaledb.enable_chunk_append;
-- test LIMIT pushdown
-- no aggregates/window functions/SRF should pushdown limit
:PREFIX SELECT FROM metrics_timestamptz ORDER BY time LIMIT 1;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_timestamptz (actual rows=1 loops=1)
         Order: metrics_timestamptz."time"
         ->  Index Only Scan Backward using _hyper_5_17_chunk_metrics_timestamptz_time_idx on _hyper_5_17_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan Backward using _hyper_5_18_chunk_metrics_timestamptz_time_idx on _hyper_5_18_chunk (never executed)
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk (never executed)
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk (never executed)
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_5_21_chunk_metrics_timestamptz_time_idx on _hyper_5_21_chunk (never executed)
               Heap Fetches: 0
(13 rows)

-- aggregates should prevent pushdown
:PREFIX SELECT count(*) FROM metrics_timestamptz LIMIT 1;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Aggregate (actual rows=1 loops=1)
         ->  Append (actual rows=2235 loops=1)
               ->  Seq Scan on _hyper_5_17_chunk (actual rows=336 loops=1)
               ->  Seq Scan on _hyper_5_18_chunk (actual rows=504 loops=1)
               ->  Seq Scan on _hyper_5_19_chunk (actual rows=504 loops=1)
               ->  Seq Scan on _hyper_5_20_chunk (actual rows=504 loops=1)
               ->  Seq Scan on _hyper_5_21_chunk (actual rows=387 loops=1)
(8 rows)

:PREFIX SELECT count(*) FROM metrics_space LIMIT 1;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Aggregate (actual rows=1 loops=1)
         ->  Append (actual rows=3130 loops=1)
               ->  Seq Scan on _hyper_6_22_chunk (actual rows=448 loops=1)
               ->  Seq Scan on _hyper_6_23_chunk (actual rows=448 loops=1)
               ->  Seq Scan on _hyper_6_24_chunk (actual rows=224 loops=1)
               ->  Seq Scan on _hyper_6_25_chunk (actual rows=672 loops=1)
               ->  Seq Scan on _hyper_6_26_chunk (actual rows=672 loops=1)
               ->  Seq Scan on _hyper_6_27_chunk (actual rows=336 loops=1)
               ->  Seq Scan on _hyper_6_28_chunk (actual rows=132 loops=1)
               ->  Seq Scan on _hyper_6_29_chunk (actual rows=132 loops=1)
               ->  Seq Scan on _hyper_6_30_chunk (actual rows=66 loops=1)
(12 rows)

-- HAVING should prevent pushdown
:PREFIX SELECT 1 FROM metrics_timestamptz HAVING count(*) > 1 LIMIT 1;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Aggregate (actual rows=1 loops=1)
         Filter: (count(*) > 1)
         ->  Append (actual rows=2235 loops=1)
               ->  Seq Scan on _hyper_5_17_chunk (actual rows=336 loops=1)
               ->  Seq Scan on _hyper_5_18_chunk (actual rows=504 loops=1)
               ->  Seq Scan on _hyper_5_19_chunk (actual rows=504 loops=1)
               ->  Seq Scan on _hyper_5_20_chunk (actual rows=504 loops=1)
               ->  Seq Scan on _hyper_5_21_chunk (actual rows=387 loops=1)
(9 rows)

:PREFIX SELECT 1 FROM metrics_space HAVING count(*) > 1 LIMIT 1;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Aggregate (actual rows=1 loops=1)
         Filter: (count(*) > 1)
         ->  Append (actual rows=3130 loops=1)
               ->  Seq Scan on _hyper_6_22_chunk (actual rows=448 loops=1)
               ->  Seq Scan on _hyper_6_23_chunk (actual rows=448 loops=1)
               ->  Seq Scan on _hyper_6_24_chunk (actual rows=224 loops=1)
               ->  Seq Scan on _hyper_6_25_chunk (actual rows=672 loops=1)
               ->  Seq Scan on _hyper_6_26_chunk (actual rows=672 loops=1)
               ->  Seq Scan on _hyper_6_27_chunk (actual rows=336 loops=1)
               ->  Seq Scan on _hyper_6_28_chunk (actual rows=132 loops=1)
               ->  Seq Scan on _hyper_6_29_chunk (actual rows=132 loops=1)
               ->  Seq Scan on _hyper_6_30_chunk (actual rows=66 loops=1)
(13 rows)

-- DISTINCT should prevent pushdown
:PREFIX SELECT DISTINCT device_id FROM metrics_timestamptz ORDER BY device_id LIMIT 3;
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=3 loops=1)
   ->  Unique (actual rows=3 loops=1)
         ->  Merge Append (actual rows=1491 loops=1)
               Sort Key: _hyper_5_17_chunk.device_id
               ->  Index Only Scan using _hyper_5_17_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_17_chunk (actual rows=225 loops=1)
                     Heap Fetches: 225
               ->  Index Only Scan using _hyper_5_18_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_18_chunk (actual rows=337 loops=1)
                     Heap Fetches: 337
               ->  Index Only Scan using _hyper_5_19_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_19_chunk (actual rows=337 loops=1)
                     Heap Fetches: 337
               ->  Index Only Scan using _hyper_5_20_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_20_chunk (actual rows=337 loops=1)
                     Heap Fetches: 337
               ->  Index Only Scan using _hyper_5_21_chunk_metrics_timestamptz_device_id_time_idx on _hyper_5_21_chunk (actual rows=259 loops=1)
                     Heap Fetches: 259
(14 rows)

:PREFIX SELECT DISTINCT device_id FROM metrics_space ORDER BY device_id LIMIT 3;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=3 loops=1)
   ->  Unique (actual rows=3 loops=1)
         ->  Merge Append (actual rows=627 loops=1)
               Sort Key: _hyper_6_22_chunk.device_id
               ->  Index Only Scan using _hyper_6_22_chunk_metrics_space_device_id_time_idx on _hyper_6_22_chunk (actual rows=113 loops=1)
                     Heap Fetches: 113
               ->  Index Only Scan using _hyper_6_23_chunk_metrics_space_device_id_time_idx on _hyper_6_23_chunk (actual rows=113 loops=1)
                     Heap Fetches: 113
               ->  Index Only Scan using _hyper_6_24_chunk_metrics_space_device_id_time_idx on _hyper_6_24_chunk (actual rows=1 loops=1)
                     Heap Fetches: 1
               ->  Index Only Scan using _hyper_6_25_chunk_metrics_space_device_id_time_idx on _hyper_6_25_chunk (actual rows=169 loops=1)
                     Heap Fetches: 169
               ->  Index Only Scan using _hyper_6_26_chunk_metrics_space_device_id_time_idx on _hyper_6_26_chunk (actual rows=169 loops=1)
                     Heap Fetches: 169
               ->  Index Only Scan using _hyper_6_27_chunk_metrics_space_device_id_time_idx on _hyper_6_27_chunk (actual rows=1 loops=1)
                     Heap Fetches: 1
               ->  Index Only Scan using _hyper_6_28_chunk_metrics_space_device_id_time_idx on _hyper_6_28_chunk (actual rows=34 loops=1)
                     Heap Fetches: 34
               ->  Index Only Scan using _hyper_6_29_chunk_metrics_space_device_id_time_idx on _hyper_6_29_chunk (actual rows=34 loops=1)
                     Heap Fetches: 34
               ->  Index Only Scan using _hyper_6_30_chunk_metrics_space_device_id_time_idx on _hyper_6_30_chunk (actual rows=1 loops=1)
                     Heap Fetches: 1
(22 rows)

--generate the results into two different files
\set ECHO errors
--- Unoptimized results
+++ Optimized results
@@ -1,6 +1,6 @@
               setting              | value 
 -----------------------------------+-------
- timescaledb.disable_optimizations | on
+ timescaledb.disable_optimizations | off
  timescaledb.enable_chunk_append   | on
 (2 rows)
 
--- Unoptimized results
+++ Optimized results
@@ -1,7 +1,7 @@
               setting              | value 
 -----------------------------------+-------
- timescaledb.disable_optimizations | on
- timescaledb.enable_chunk_append   | on
+ timescaledb.disable_optimizations | off
+ timescaledb.enable_chunk_append   | off
 (2 rows)
 
  time | temp | colorid 
