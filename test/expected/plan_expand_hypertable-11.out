-- This file and its contents are licensed under the Apache License 2.0.
-- Please see the included NOTICE for copyright information and
-- LICENSE-APACHE for a copy of the license.
SET timescaledb.disable_optimizations= 'off';
\set PREFIX 'EXPLAIN (costs off) '
\ir include/plan_expand_hypertable_load.sql
-- This file and its contents are licensed under the Apache License 2.0.
-- Please see the included NOTICE for copyright information and
-- LICENSE-APACHE for a copy of the license.
--single time dimension
CREATE TABLE hyper ("time_broken" bigint NOT NULL, "value" integer);
ALTER TABLE hyper
DROP COLUMN time_broken,
ADD COLUMN time BIGINT;
SELECT create_hypertable('hyper', 'time',  chunk_time_interval => 10);
psql:include/plan_expand_hypertable_load.sql:12: NOTICE:  adding not-null constraint to column "time"
 create_hypertable  
--------------------
 (1,public,hyper,t)
(1 row)

INSERT INTO hyper SELECT g, g FROM generate_series(0,1000) g;
--insert a point with INT_MAX_64
INSERT INTO hyper (time, value) SELECT 9223372036854775807::bigint, 0;
--time and space
CREATE TABLE hyper_w_space ("time_broken" bigint NOT NULL, "device_id" text, "value" integer);
ALTER TABLE hyper_w_space
DROP COLUMN time_broken,
ADD COLUMN time BIGINT;
SELECT create_hypertable('hyper_w_space', 'time', 'device_id', 4, chunk_time_interval => 10);
psql:include/plan_expand_hypertable_load.sql:26: NOTICE:  adding not-null constraint to column "time"
     create_hypertable      
----------------------------
 (2,public,hyper_w_space,t)
(1 row)

INSERT INTO hyper_w_space (time, device_id, value) SELECT g, 'dev' || g, g FROM generate_series(0,30) g;
CREATE VIEW hyper_w_space_view AS (SELECT * FROM hyper_w_space);
--with timestamp and space
CREATE TABLE tag (id serial PRIMARY KEY, name text);
CREATE TABLE hyper_ts ("time_broken" timestamptz NOT NULL, "device_id" text, tag_id INT REFERENCES tag(id), "value" integer);
ALTER TABLE hyper_ts
DROP COLUMN time_broken,
ADD COLUMN time TIMESTAMPTZ;
SELECT create_hypertable('hyper_ts', 'time', 'device_id', 2, chunk_time_interval => '10 seconds'::interval);
psql:include/plan_expand_hypertable_load.sql:41: NOTICE:  adding not-null constraint to column "time"
   create_hypertable   
-----------------------
 (3,public,hyper_ts,t)
(1 row)

INSERT INTO tag(name) SELECT 'tag'||g FROM generate_series(0,10) g;
INSERT INTO hyper_ts (time, device_id, tag_id, value) SELECT to_timestamp(g), 'dev' || g, (random() /10)+1, g FROM generate_series(0,30) g;
--one in the future
INSERT INTO hyper_ts (time, device_id, tag_id, value)  VALUES ('2100-01-01 02:03:04 PST', 'dev101', 1, 0);
--time partitioning function
CREATE OR REPLACE FUNCTION unix_to_timestamp(unixtime float8)
    RETURNS TIMESTAMPTZ LANGUAGE SQL IMMUTABLE PARALLEL SAFE STRICT AS
$BODY$
    SELECT to_timestamp(unixtime);
$BODY$;
CREATE TABLE hyper_timefunc ("time" float8 NOT NULL, "device_id" text, "value" integer);
SELECT create_hypertable('hyper_timefunc', 'time', 'device_id', 4, chunk_time_interval => 10, time_partitioning_func => 'unix_to_timestamp');
psql:include/plan_expand_hypertable_load.sql:57: WARNING:  unexpected interval: smaller than one second
      create_hypertable      
-----------------------------
 (4,public,hyper_timefunc,t)
(1 row)

INSERT INTO hyper_timefunc (time, device_id, value) SELECT g, 'dev' || g, g FROM generate_series(0,30) g;
ANALYZE hyper;
ANALYZE hyper_w_space;
ANALYZE tag;
ANALYZE hyper_ts;
ANALYZE hyper_timefunc;
\ir include/plan_expand_hypertable_query.sql
-- This file and its contents are licensed under the Apache License 2.0.
-- Please see the included NOTICE for copyright information and
-- LICENSE-APACHE for a copy of the license.
--we want to see how our logic excludes chunks
--and not how much work constraint_exclusion does
SET constraint_exclusion = 'off';
--test upper bounds
:PREFIX SELECT * FROM hyper WHERE time < 10 ORDER BY value;
                QUERY PLAN                
------------------------------------------
 Sort
   Sort Key: _hyper_1_1_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_1_1_chunk
               Filter: ("time" < 10)
(5 rows)

:PREFIX SELECT * FROM hyper WHERE time < 11 ORDER BY value;
                QUERY PLAN                
------------------------------------------
 Sort
   Sort Key: _hyper_1_1_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_1_1_chunk
               Filter: ("time" < 11)
         ->  Seq Scan on _hyper_1_2_chunk
               Filter: ("time" < 11)
(7 rows)

:PREFIX SELECT * FROM hyper WHERE time = 10 ORDER BY value;
                QUERY PLAN                
------------------------------------------
 Sort
   Sort Key: _hyper_1_2_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_1_2_chunk
               Filter: ("time" = 10)
(5 rows)

:PREFIX SELECT * FROM hyper WHERE 10 >= time ORDER BY value;
                QUERY PLAN                
------------------------------------------
 Sort
   Sort Key: _hyper_1_1_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_1_1_chunk
               Filter: (10 >= "time")
         ->  Seq Scan on _hyper_1_2_chunk
               Filter: (10 >= "time")
(7 rows)

--test lower bounds
:PREFIX SELECT * FROM hyper WHERE time >= 10 and time < 20 ORDER BY value;
                        QUERY PLAN                        
----------------------------------------------------------
 Sort
   Sort Key: _hyper_1_2_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_1_2_chunk
               Filter: (("time" >= 10) AND ("time" < 20))
(5 rows)

:PREFIX SELECT * FROM hyper WHERE 10 < time and 20 >= time ORDER BY value;
                        QUERY PLAN                        
----------------------------------------------------------
 Sort
   Sort Key: _hyper_1_2_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_1_2_chunk
               Filter: ((10 < "time") AND (20 >= "time"))
         ->  Seq Scan on _hyper_1_3_chunk
               Filter: ((10 < "time") AND (20 >= "time"))
(7 rows)

:PREFIX SELECT * FROM hyper WHERE time >= 9 and time < 20 ORDER BY value;
                       QUERY PLAN                        
---------------------------------------------------------
 Sort
   Sort Key: _hyper_1_1_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_1_1_chunk
               Filter: (("time" >= 9) AND ("time" < 20))
         ->  Seq Scan on _hyper_1_2_chunk
               Filter: (("time" >= 9) AND ("time" < 20))
(7 rows)

:PREFIX SELECT * FROM hyper WHERE time > 9 and time < 20 ORDER BY value;
                       QUERY PLAN                       
--------------------------------------------------------
 Sort
   Sort Key: _hyper_1_2_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_1_2_chunk
               Filter: (("time" > 9) AND ("time" < 20))
(5 rows)

--test empty result
:PREFIX SELECT * FROM hyper WHERE time < 0;
        QUERY PLAN        
--------------------------
 Result
   One-Time Filter: false
(2 rows)

--test expression evaluation
:PREFIX SELECT * FROM hyper WHERE time < (5*2)::smallint;
                QUERY PLAN                 
-------------------------------------------
 Append
   ->  Seq Scan on _hyper_1_1_chunk
         Filter: ("time" < '10'::smallint)
(3 rows)

--test logic at INT64_MAX
:PREFIX SELECT * FROM hyper WHERE time = 9223372036854775807::bigint ORDER BY value;
                           QUERY PLAN                           
----------------------------------------------------------------
 Sort
   Sort Key: _hyper_1_102_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_1_102_chunk
               Filter: ("time" = '9223372036854775807'::bigint)
(5 rows)

:PREFIX SELECT * FROM hyper WHERE time = 9223372036854775806::bigint ORDER BY value;
                           QUERY PLAN                           
----------------------------------------------------------------
 Sort
   Sort Key: _hyper_1_102_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_1_102_chunk
               Filter: ("time" = '9223372036854775806'::bigint)
(5 rows)

:PREFIX SELECT * FROM hyper WHERE time >= 9223372036854775807::bigint ORDER BY value;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Sort
   Sort Key: _hyper_1_102_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_1_102_chunk
               Filter: ("time" >= '9223372036854775807'::bigint)
(5 rows)

:PREFIX SELECT * FROM hyper WHERE time > 9223372036854775807::bigint ORDER BY value;
           QUERY PLAN           
--------------------------------
 Sort
   Sort Key: value
   ->  Result
         One-Time Filter: false
(4 rows)

:PREFIX SELECT * FROM hyper WHERE time > 9223372036854775806::bigint ORDER BY value;
                           QUERY PLAN                           
----------------------------------------------------------------
 Sort
   Sort Key: _hyper_1_102_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_1_102_chunk
               Filter: ("time" > '9223372036854775806'::bigint)
(5 rows)

--cte
:PREFIX WITH cte AS(
  SELECT * FROM hyper WHERE time < 10
)
SELECT * FROM cte ORDER BY value;
                 QUERY PLAN                 
--------------------------------------------
 Sort
   Sort Key: cte.value
   CTE cte
     ->  Append
           ->  Seq Scan on _hyper_1_1_chunk
                 Filter: ("time" < 10)
   ->  CTE Scan on cte
(7 rows)

--subquery
:PREFIX SELECT 0 = ANY (SELECT value FROM hyper WHERE time < 10);
                 QUERY PLAN                 
--------------------------------------------
 Result
   SubPlan 1
     ->  Append
           ->  Seq Scan on _hyper_1_1_chunk
                 Filter: ("time" < 10)
(5 rows)

--no space constraint
:PREFIX SELECT * FROM hyper_w_space WHERE time < 10 ORDER BY value;
                 QUERY PLAN                 
--------------------------------------------
 Sort
   Sort Key: _hyper_2_106_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_2_106_chunk
               Filter: ("time" < 10)
         ->  Seq Scan on _hyper_2_104_chunk
               Filter: ("time" < 10)
         ->  Seq Scan on _hyper_2_105_chunk
               Filter: ("time" < 10)
         ->  Seq Scan on _hyper_2_103_chunk
               Filter: ("time" < 10)
(11 rows)

--valid space constraint
:PREFIX SELECT * FROM hyper_w_space WHERE time < 10 and device_id = 'dev5' ORDER BY value;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Sort
   Sort Key: _hyper_2_106_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_2_106_chunk
               Filter: (("time" < 10) AND (device_id = 'dev5'::text))
(5 rows)

:PREFIX SELECT * FROM hyper_w_space WHERE time < 10 and 'dev5' = device_id ORDER BY value;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Sort
   Sort Key: _hyper_2_106_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_2_106_chunk
               Filter: (("time" < 10) AND ('dev5'::text = device_id))
(5 rows)

:PREFIX SELECT * FROM hyper_w_space WHERE time < 10 and 'dev'||(2+3) = device_id ORDER BY value;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Sort
   Sort Key: _hyper_2_106_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_2_106_chunk
               Filter: (("time" < 10) AND ('dev5'::text = device_id))
(5 rows)

--only space constraint
:PREFIX SELECT * FROM hyper_w_space WHERE 'dev5' = device_id ORDER BY value;
                    QUERY PLAN                    
--------------------------------------------------
 Sort
   Sort Key: _hyper_2_106_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_2_106_chunk
               Filter: ('dev5'::text = device_id)
         ->  Seq Scan on _hyper_2_111_chunk
               Filter: ('dev5'::text = device_id)
         ->  Seq Scan on _hyper_2_109_chunk
               Filter: ('dev5'::text = device_id)
(9 rows)

--unhandled space constraint
:PREFIX SELECT * FROM hyper_w_space WHERE time < 10 and device_id > 'dev5' ORDER BY value;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Sort
   Sort Key: _hyper_2_106_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_2_106_chunk
               Filter: (("time" < 10) AND (device_id > 'dev5'::text))
         ->  Seq Scan on _hyper_2_104_chunk
               Filter: (("time" < 10) AND (device_id > 'dev5'::text))
         ->  Seq Scan on _hyper_2_105_chunk
               Filter: (("time" < 10) AND (device_id > 'dev5'::text))
         ->  Seq Scan on _hyper_2_103_chunk
               Filter: (("time" < 10) AND (device_id > 'dev5'::text))
(11 rows)

--use of OR - does not filter chunks
:PREFIX SELECT * FROM hyper_w_space WHERE time < 10 AND (device_id = 'dev5' or device_id = 'dev6') ORDER BY value;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: _hyper_2_106_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_2_106_chunk
               Filter: (("time" < 10) AND ((device_id = 'dev5'::text) OR (device_id = 'dev6'::text)))
         ->  Seq Scan on _hyper_2_104_chunk
               Filter: (("time" < 10) AND ((device_id = 'dev5'::text) OR (device_id = 'dev6'::text)))
         ->  Seq Scan on _hyper_2_105_chunk
               Filter: (("time" < 10) AND ((device_id = 'dev5'::text) OR (device_id = 'dev6'::text)))
         ->  Seq Scan on _hyper_2_103_chunk
               Filter: (("time" < 10) AND ((device_id = 'dev5'::text) OR (device_id = 'dev6'::text)))
(11 rows)

--cte
:PREFIX WITH cte AS(
   SELECT * FROM hyper_w_space WHERE time < 10 and device_id = 'dev5'
)
SELECT * FROM cte ORDER BY value;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort
   Sort Key: cte.value
   CTE cte
     ->  Append
           ->  Seq Scan on _hyper_2_106_chunk
                 Filter: (("time" < 10) AND (device_id = 'dev5'::text))
   ->  CTE Scan on cte
(7 rows)

--subquery
:PREFIX SELECT 0 = ANY (SELECT value FROM hyper_w_space WHERE time < 10 and device_id = 'dev5');
                               QUERY PLAN                               
------------------------------------------------------------------------
 Result
   SubPlan 1
     ->  Append
           ->  Seq Scan on _hyper_2_106_chunk
                 Filter: (("time" < 10) AND (device_id = 'dev5'::text))
(5 rows)

--view
:PREFIX SELECT * FROM hyper_w_space_view WHERE time < 10 and device_id = 'dev5' ORDER BY value;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Sort
   Sort Key: _hyper_2_106_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_2_106_chunk
               Filter: (("time" < 10) AND (device_id = 'dev5'::text))
(5 rows)

--IN statement - simple
:PREFIX SELECT * FROM hyper_w_space WHERE time < 10 AND device_id IN ('dev5') ORDER BY value;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Sort
   Sort Key: _hyper_2_106_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_2_106_chunk
               Filter: (("time" < 10) AND (device_id = 'dev5'::text))
(5 rows)

--IN statement - two chunks
:PREFIX SELECT * FROM hyper_w_space WHERE time < 10 AND device_id IN ('dev5','dev6') ORDER BY value;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Sort
   Sort Key: _hyper_2_106_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_2_106_chunk
               Filter: (("time" < 10) AND (device_id = ANY ('{dev5,dev6}'::text[])))
         ->  Seq Scan on _hyper_2_105_chunk
               Filter: (("time" < 10) AND (device_id = ANY ('{dev5,dev6}'::text[])))
(7 rows)

--IN statement - one chunk
:PREFIX SELECT * FROM hyper_w_space WHERE time < 10 AND device_id IN ('dev4','dev5') ORDER BY value;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Sort
   Sort Key: _hyper_2_106_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_2_106_chunk
               Filter: (("time" < 10) AND (device_id = ANY ('{dev4,dev5}'::text[])))
(5 rows)

--NOT IN - does not filter chunks
:PREFIX SELECT * FROM hyper_w_space WHERE time < 10 AND device_id NOT IN ('dev5','dev6') ORDER BY value;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Sort
   Sort Key: _hyper_2_106_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_2_106_chunk
               Filter: (("time" < 10) AND (device_id <> ALL ('{dev5,dev6}'::text[])))
         ->  Seq Scan on _hyper_2_104_chunk
               Filter: (("time" < 10) AND (device_id <> ALL ('{dev5,dev6}'::text[])))
         ->  Seq Scan on _hyper_2_105_chunk
               Filter: (("time" < 10) AND (device_id <> ALL ('{dev5,dev6}'::text[])))
         ->  Seq Scan on _hyper_2_103_chunk
               Filter: (("time" < 10) AND (device_id <> ALL ('{dev5,dev6}'::text[])))
(11 rows)

--IN statement with subquery - does not filter chunks
:PREFIX SELECT * FROM hyper_w_space WHERE time < 10 AND device_id IN (SELECT 'dev5'::text) ORDER BY value;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Sort
   Sort Key: _hyper_2_106_chunk.value
   ->  Nested Loop
         ->  HashAggregate
               Group Key: 'dev5'::text
               ->  Result
         ->  Append
               ->  Seq Scan on _hyper_2_106_chunk
                     Filter: (("time" < 10) AND (('dev5'::text) = device_id))
               ->  Seq Scan on _hyper_2_104_chunk
                     Filter: (("time" < 10) AND (('dev5'::text) = device_id))
               ->  Seq Scan on _hyper_2_105_chunk
                     Filter: (("time" < 10) AND (('dev5'::text) = device_id))
               ->  Seq Scan on _hyper_2_103_chunk
                     Filter: (("time" < 10) AND (('dev5'::text) = device_id))
(15 rows)

--ANY
:PREFIX SELECT * FROM hyper_w_space WHERE time < 10 AND device_id = ANY(ARRAY['dev5','dev6']) ORDER BY value;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Sort
   Sort Key: _hyper_2_106_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_2_106_chunk
               Filter: (("time" < 10) AND (device_id = ANY ('{dev5,dev6}'::text[])))
         ->  Seq Scan on _hyper_2_105_chunk
               Filter: (("time" < 10) AND (device_id = ANY ('{dev5,dev6}'::text[])))
(7 rows)

--ANY with intersection
:PREFIX SELECT * FROM hyper_w_space WHERE time < 10 AND device_id = ANY(ARRAY['dev5','dev6']) AND device_id = ANY(ARRAY['dev6','dev7']) ORDER BY value;
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: _hyper_2_105_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_2_105_chunk
               Filter: (("time" < 10) AND (device_id = ANY ('{dev5,dev6}'::text[])) AND (device_id = ANY ('{dev6,dev7}'::text[])))
(5 rows)

--ANY without intersection shouldn't scan any chunks
:PREFIX SELECT * FROM hyper_w_space WHERE time < 10 AND device_id = ANY(ARRAY['dev5','dev6']) AND device_id = ANY(ARRAY['dev8','dev9']) ORDER BY value;
           QUERY PLAN           
--------------------------------
 Sort
   Sort Key: value
   ->  Result
         One-Time Filter: false
(4 rows)

--ANY/IN/ALL only works for equals operator
:PREFIX SELECT * FROM hyper_w_space WHERE device_id < ANY(ARRAY['dev5','dev6']) ORDER BY value;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Sort
   Sort Key: _hyper_2_103_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_2_103_chunk
               Filter: (device_id < ANY ('{dev5,dev6}'::text[]))
         ->  Seq Scan on _hyper_2_104_chunk
               Filter: (device_id < ANY ('{dev5,dev6}'::text[]))
         ->  Seq Scan on _hyper_2_105_chunk
               Filter: (device_id < ANY ('{dev5,dev6}'::text[]))
         ->  Seq Scan on _hyper_2_106_chunk
               Filter: (device_id < ANY ('{dev5,dev6}'::text[]))
         ->  Seq Scan on _hyper_2_107_chunk
               Filter: (device_id < ANY ('{dev5,dev6}'::text[]))
         ->  Seq Scan on _hyper_2_108_chunk
               Filter: (device_id < ANY ('{dev5,dev6}'::text[]))
         ->  Seq Scan on _hyper_2_109_chunk
               Filter: (device_id < ANY ('{dev5,dev6}'::text[]))
         ->  Seq Scan on _hyper_2_110_chunk
               Filter: (device_id < ANY ('{dev5,dev6}'::text[]))
         ->  Seq Scan on _hyper_2_111_chunk
               Filter: (device_id < ANY ('{dev5,dev6}'::text[]))
         ->  Seq Scan on _hyper_2_112_chunk
               Filter: (device_id < ANY ('{dev5,dev6}'::text[]))
         ->  Seq Scan on _hyper_2_113_chunk
               Filter: (device_id < ANY ('{dev5,dev6}'::text[]))
         ->  Seq Scan on _hyper_2_114_chunk
               Filter: (device_id < ANY ('{dev5,dev6}'::text[]))
         ->  Seq Scan on _hyper_2_115_chunk
               Filter: (device_id < ANY ('{dev5,dev6}'::text[]))
(29 rows)

--ALL with equals and different values shouldn't scan any chunks
:PREFIX SELECT * FROM hyper_w_space WHERE device_id = ALL(ARRAY['dev5','dev6']) ORDER BY value;
           QUERY PLAN           
--------------------------------
 Sort
   Sort Key: value
   ->  Result
         One-Time Filter: false
(4 rows)

--Multi AND
:PREFIX SELECT * FROM hyper_w_space WHERE time < 10 AND time < 100 ORDER BY value;
                        QUERY PLAN                        
----------------------------------------------------------
 Sort
   Sort Key: _hyper_2_106_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_2_106_chunk
               Filter: (("time" < 10) AND ("time" < 100))
         ->  Seq Scan on _hyper_2_104_chunk
               Filter: (("time" < 10) AND ("time" < 100))
         ->  Seq Scan on _hyper_2_105_chunk
               Filter: (("time" < 10) AND ("time" < 100))
         ->  Seq Scan on _hyper_2_103_chunk
               Filter: (("time" < 10) AND ("time" < 100))
(11 rows)

--Time dimension doesn't filter chunks when using IN/ANY with multiple arguments
:PREFIX SELECT * FROM hyper_w_space WHERE time < ANY(ARRAY[1,2]) ORDER BY value;
                        QUERY PLAN                         
-----------------------------------------------------------
 Sort
   Sort Key: _hyper_2_103_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_2_103_chunk
               Filter: ("time" < ANY ('{1,2}'::integer[]))
         ->  Seq Scan on _hyper_2_104_chunk
               Filter: ("time" < ANY ('{1,2}'::integer[]))
         ->  Seq Scan on _hyper_2_105_chunk
               Filter: ("time" < ANY ('{1,2}'::integer[]))
         ->  Seq Scan on _hyper_2_106_chunk
               Filter: ("time" < ANY ('{1,2}'::integer[]))
         ->  Seq Scan on _hyper_2_107_chunk
               Filter: ("time" < ANY ('{1,2}'::integer[]))
         ->  Seq Scan on _hyper_2_108_chunk
               Filter: ("time" < ANY ('{1,2}'::integer[]))
         ->  Seq Scan on _hyper_2_109_chunk
               Filter: ("time" < ANY ('{1,2}'::integer[]))
         ->  Seq Scan on _hyper_2_110_chunk
               Filter: ("time" < ANY ('{1,2}'::integer[]))
         ->  Seq Scan on _hyper_2_111_chunk
               Filter: ("time" < ANY ('{1,2}'::integer[]))
         ->  Seq Scan on _hyper_2_112_chunk
               Filter: ("time" < ANY ('{1,2}'::integer[]))
         ->  Seq Scan on _hyper_2_113_chunk
               Filter: ("time" < ANY ('{1,2}'::integer[]))
         ->  Seq Scan on _hyper_2_114_chunk
               Filter: ("time" < ANY ('{1,2}'::integer[]))
         ->  Seq Scan on _hyper_2_115_chunk
               Filter: ("time" < ANY ('{1,2}'::integer[]))
(29 rows)

--Time dimension chunk filtering works for ANY with single argument
:PREFIX SELECT * FROM hyper_w_space WHERE time < ANY(ARRAY[1]) ORDER BY value;
                       QUERY PLAN                        
---------------------------------------------------------
 Sort
   Sort Key: _hyper_2_106_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_2_106_chunk
               Filter: ("time" < ANY ('{1}'::integer[]))
         ->  Seq Scan on _hyper_2_104_chunk
               Filter: ("time" < ANY ('{1}'::integer[]))
         ->  Seq Scan on _hyper_2_105_chunk
               Filter: ("time" < ANY ('{1}'::integer[]))
         ->  Seq Scan on _hyper_2_103_chunk
               Filter: ("time" < ANY ('{1}'::integer[]))
(11 rows)

--Time dimension chunk filtering works for ALL with single argument
:PREFIX SELECT * FROM hyper_w_space WHERE time < ALL(ARRAY[1]) ORDER BY value;
                       QUERY PLAN                        
---------------------------------------------------------
 Sort
   Sort Key: _hyper_2_106_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_2_106_chunk
               Filter: ("time" < ALL ('{1}'::integer[]))
         ->  Seq Scan on _hyper_2_104_chunk
               Filter: ("time" < ALL ('{1}'::integer[]))
         ->  Seq Scan on _hyper_2_105_chunk
               Filter: ("time" < ALL ('{1}'::integer[]))
         ->  Seq Scan on _hyper_2_103_chunk
               Filter: ("time" < ALL ('{1}'::integer[]))
(11 rows)

--Time dimension chunk filtering works for ALL with multiple arguments
:PREFIX SELECT * FROM hyper_w_space WHERE time < ALL(ARRAY[1,10,20,30]) ORDER BY value;
                            QUERY PLAN                            
------------------------------------------------------------------
 Sort
   Sort Key: _hyper_2_106_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_2_106_chunk
               Filter: ("time" < ALL ('{1,10,20,30}'::integer[]))
         ->  Seq Scan on _hyper_2_104_chunk
               Filter: ("time" < ALL ('{1,10,20,30}'::integer[]))
         ->  Seq Scan on _hyper_2_105_chunk
               Filter: ("time" < ALL ('{1,10,20,30}'::integer[]))
         ->  Seq Scan on _hyper_2_103_chunk
               Filter: ("time" < ALL ('{1,10,20,30}'::integer[]))
(11 rows)

--AND intersection using IN and EQUALS
:PREFIX SELECT * FROM hyper_w_space WHERE device_id IN ('dev1','dev2') AND device_id = 'dev1' ORDER BY value;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Sort
   Sort Key: _hyper_2_103_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_2_103_chunk
               Filter: ((device_id = ANY ('{dev1,dev2}'::text[])) AND (device_id = 'dev1'::text))
         ->  Seq Scan on _hyper_2_110_chunk
               Filter: ((device_id = ANY ('{dev1,dev2}'::text[])) AND (device_id = 'dev1'::text))
         ->  Seq Scan on _hyper_2_114_chunk
               Filter: ((device_id = ANY ('{dev1,dev2}'::text[])) AND (device_id = 'dev1'::text))
(9 rows)

--AND with no intersection using IN and EQUALS
:PREFIX SELECT * FROM hyper_w_space WHERE device_id IN ('dev1','dev2') AND device_id = 'dev3' ORDER BY value;
           QUERY PLAN           
--------------------------------
 Sort
   Sort Key: value
   ->  Result
         One-Time Filter: false
(4 rows)

--timestamps
--these should work since they are immutable functions
:PREFIX SELECT * FROM hyper_ts WHERE time < 'Wed Dec 31 16:00:10 1969 PST'::timestamptz ORDER BY value;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Sort
   Sort Key: _hyper_3_117_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_3_117_chunk
               Filter: ("time" < 'Wed Dec 31 16:00:10 1969 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_3_116_chunk
               Filter: ("time" < 'Wed Dec 31 16:00:10 1969 PST'::timestamp with time zone)
(7 rows)

:PREFIX SELECT * FROM hyper_ts WHERE time < to_timestamp(10) ORDER BY value;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Sort
   Sort Key: _hyper_3_117_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_3_117_chunk
               Filter: ("time" < 'Wed Dec 31 16:00:10 1969 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_3_116_chunk
               Filter: ("time" < 'Wed Dec 31 16:00:10 1969 PST'::timestamp with time zone)
(7 rows)

:PREFIX SELECT * FROM hyper_ts WHERE time < 'Wed Dec 31 16:00:10 1969'::timestamp AT TIME ZONE 'PST' ORDER BY value;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Sort
   Sort Key: _hyper_3_117_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_3_117_chunk
               Filter: ("time" < 'Wed Dec 31 16:00:10 1969 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_3_116_chunk
               Filter: ("time" < 'Wed Dec 31 16:00:10 1969 PST'::timestamp with time zone)
(7 rows)

:PREFIX SELECT * FROM hyper_ts WHERE time < to_timestamp(10) and device_id = 'dev1' ORDER BY value;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: _hyper_3_116_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_3_116_chunk
               Filter: (("time" < 'Wed Dec 31 16:00:10 1969 PST'::timestamp with time zone) AND (device_id = 'dev1'::text))
(5 rows)

--these should not work since uses stable functions;
:PREFIX SELECT * FROM hyper_ts WHERE time < 'Wed Dec 31 16:00:10 1969'::timestamp ORDER BY value;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Sort
   Sort Key: _hyper_3_116_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_3_116_chunk
               Filter: ("time" < 'Wed Dec 31 16:00:10 1969'::timestamp without time zone)
         ->  Seq Scan on _hyper_3_117_chunk
               Filter: ("time" < 'Wed Dec 31 16:00:10 1969'::timestamp without time zone)
         ->  Seq Scan on _hyper_3_118_chunk
               Filter: ("time" < 'Wed Dec 31 16:00:10 1969'::timestamp without time zone)
         ->  Seq Scan on _hyper_3_119_chunk
               Filter: ("time" < 'Wed Dec 31 16:00:10 1969'::timestamp without time zone)
         ->  Seq Scan on _hyper_3_120_chunk
               Filter: ("time" < 'Wed Dec 31 16:00:10 1969'::timestamp without time zone)
         ->  Seq Scan on _hyper_3_121_chunk
               Filter: ("time" < 'Wed Dec 31 16:00:10 1969'::timestamp without time zone)
         ->  Seq Scan on _hyper_3_122_chunk
               Filter: ("time" < 'Wed Dec 31 16:00:10 1969'::timestamp without time zone)
         ->  Seq Scan on _hyper_3_123_chunk
               Filter: ("time" < 'Wed Dec 31 16:00:10 1969'::timestamp without time zone)
(19 rows)

:PREFIX SELECT * FROM hyper_ts WHERE time < ('Wed Dec 31 16:00:10 1969'::timestamp::timestamptz) ORDER BY value;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: _hyper_3_116_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_3_116_chunk
               Filter: ("time" < ('Wed Dec 31 16:00:10 1969'::timestamp without time zone)::timestamp with time zone)
         ->  Seq Scan on _hyper_3_117_chunk
               Filter: ("time" < ('Wed Dec 31 16:00:10 1969'::timestamp without time zone)::timestamp with time zone)
         ->  Seq Scan on _hyper_3_118_chunk
               Filter: ("time" < ('Wed Dec 31 16:00:10 1969'::timestamp without time zone)::timestamp with time zone)
         ->  Seq Scan on _hyper_3_119_chunk
               Filter: ("time" < ('Wed Dec 31 16:00:10 1969'::timestamp without time zone)::timestamp with time zone)
         ->  Seq Scan on _hyper_3_120_chunk
               Filter: ("time" < ('Wed Dec 31 16:00:10 1969'::timestamp without time zone)::timestamp with time zone)
         ->  Seq Scan on _hyper_3_121_chunk
               Filter: ("time" < ('Wed Dec 31 16:00:10 1969'::timestamp without time zone)::timestamp with time zone)
         ->  Seq Scan on _hyper_3_122_chunk
               Filter: ("time" < ('Wed Dec 31 16:00:10 1969'::timestamp without time zone)::timestamp with time zone)
         ->  Seq Scan on _hyper_3_123_chunk
               Filter: ("time" < ('Wed Dec 31 16:00:10 1969'::timestamp without time zone)::timestamp with time zone)
(19 rows)

:PREFIX SELECT * FROM hyper_ts WHERE NOW() < time ORDER BY value;
                 QUERY PLAN                 
--------------------------------------------
 Sort
   Sort Key: _hyper_3_116_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_3_116_chunk
               Filter: (now() < "time")
         ->  Seq Scan on _hyper_3_117_chunk
               Filter: (now() < "time")
         ->  Seq Scan on _hyper_3_118_chunk
               Filter: (now() < "time")
         ->  Seq Scan on _hyper_3_119_chunk
               Filter: (now() < "time")
         ->  Seq Scan on _hyper_3_120_chunk
               Filter: (now() < "time")
         ->  Seq Scan on _hyper_3_121_chunk
               Filter: (now() < "time")
         ->  Seq Scan on _hyper_3_122_chunk
               Filter: (now() < "time")
         ->  Seq Scan on _hyper_3_123_chunk
               Filter: (now() < "time")
(19 rows)

--joins
:PREFIX SELECT * FROM hyper_ts WHERE tag_id IN (SELECT id FROM tag WHERE tag.id=1) and time < to_timestamp(10) and device_id = 'dev1' ORDER BY value;
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: _hyper_3_116_chunk.value
   ->  Nested Loop Semi Join
         ->  Append
               ->  Seq Scan on _hyper_3_116_chunk
                     Filter: (("time" < 'Wed Dec 31 16:00:10 1969 PST'::timestamp with time zone) AND (device_id = 'dev1'::text) AND (tag_id = 1))
         ->  Seq Scan on tag
               Filter: (id = 1)
(8 rows)

:PREFIX SELECT * FROM hyper_ts WHERE tag_id IN (SELECT id FROM tag WHERE tag.id=1) or (time < to_timestamp(10) and device_id = 'dev1') ORDER BY value;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: _hyper_3_116_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_3_116_chunk
               Filter: ((hashed SubPlan 1) OR (("time" < 'Wed Dec 31 16:00:10 1969 PST'::timestamp with time zone) AND (device_id = 'dev1'::text)))
               SubPlan 1
                 ->  Seq Scan on tag
                       Filter: (id = 1)
         ->  Seq Scan on _hyper_3_117_chunk
               Filter: ((hashed SubPlan 1) OR (("time" < 'Wed Dec 31 16:00:10 1969 PST'::timestamp with time zone) AND (device_id = 'dev1'::text)))
         ->  Seq Scan on _hyper_3_118_chunk
               Filter: ((hashed SubPlan 1) OR (("time" < 'Wed Dec 31 16:00:10 1969 PST'::timestamp with time zone) AND (device_id = 'dev1'::text)))
         ->  Seq Scan on _hyper_3_119_chunk
               Filter: ((hashed SubPlan 1) OR (("time" < 'Wed Dec 31 16:00:10 1969 PST'::timestamp with time zone) AND (device_id = 'dev1'::text)))
         ->  Seq Scan on _hyper_3_120_chunk
               Filter: ((hashed SubPlan 1) OR (("time" < 'Wed Dec 31 16:00:10 1969 PST'::timestamp with time zone) AND (device_id = 'dev1'::text)))
         ->  Seq Scan on _hyper_3_121_chunk
               Filter: ((hashed SubPlan 1) OR (("time" < 'Wed Dec 31 16:00:10 1969 PST'::timestamp with time zone) AND (device_id = 'dev1'::text)))
         ->  Seq Scan on _hyper_3_122_chunk
               Filter: ((hashed SubPlan 1) OR (("time" < 'Wed Dec 31 16:00:10 1969 PST'::timestamp with time zone) AND (device_id = 'dev1'::text)))
         ->  Seq Scan on _hyper_3_123_chunk
               Filter: ((hashed SubPlan 1) OR (("time" < 'Wed Dec 31 16:00:10 1969 PST'::timestamp with time zone) AND (device_id = 'dev1'::text)))
(22 rows)

:PREFIX SELECT * FROM hyper_ts WHERE tag_id IN (SELECT id FROM tag WHERE tag.name='tag1') and time < to_timestamp(10) and device_id = 'dev1' ORDER BY value;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: _hyper_3_116_chunk.value
   ->  Nested Loop
         Join Filter: (_hyper_3_116_chunk.tag_id = tag.id)
         ->  Append
               ->  Seq Scan on _hyper_3_116_chunk
                     Filter: (("time" < 'Wed Dec 31 16:00:10 1969 PST'::timestamp with time zone) AND (device_id = 'dev1'::text))
         ->  Seq Scan on tag
               Filter: (name = 'tag1'::text)
(9 rows)

:PREFIX SELECT * FROM hyper_ts JOIN tag on (hyper_ts.tag_id = tag.id ) WHERE time < to_timestamp(10) and device_id = 'dev1' ORDER BY value;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: _hyper_3_116_chunk.value
   ->  Merge Join
         Merge Cond: (tag.id = _hyper_3_116_chunk.tag_id)
         ->  Index Scan using tag_pkey on tag
         ->  Sort
               Sort Key: _hyper_3_116_chunk.tag_id
               ->  Append
                     ->  Seq Scan on _hyper_3_116_chunk
                           Filter: (("time" < 'Wed Dec 31 16:00:10 1969 PST'::timestamp with time zone) AND (device_id = 'dev1'::text))
(10 rows)

:PREFIX SELECT * FROM hyper_ts JOIN tag on (hyper_ts.tag_id = tag.id ) WHERE tag.name = 'tag1' and time < to_timestamp(10) and device_id = 'dev1' ORDER BY value;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: _hyper_3_116_chunk.value
   ->  Nested Loop
         Join Filter: (_hyper_3_116_chunk.tag_id = tag.id)
         ->  Append
               ->  Seq Scan on _hyper_3_116_chunk
                     Filter: (("time" < 'Wed Dec 31 16:00:10 1969 PST'::timestamp with time zone) AND (device_id = 'dev1'::text))
         ->  Seq Scan on tag
               Filter: (name = 'tag1'::text)
(9 rows)

--exclude chunks based on time column with partitioning function. This
--transparently applies the time partitioning function on the time
--value to be able to exclude chunks (similar to a closed dimension).
:PREFIX SELECT * FROM hyper_timefunc WHERE time < 4 ORDER BY value;
                       QUERY PLAN                       
--------------------------------------------------------
 Sort
   Sort Key: _hyper_4_125_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_4_125_chunk
               Filter: ("time" < '4'::double precision)
         ->  Seq Scan on _hyper_4_126_chunk
               Filter: ("time" < '4'::double precision)
         ->  Seq Scan on _hyper_4_127_chunk
               Filter: ("time" < '4'::double precision)
         ->  Seq Scan on _hyper_4_124_chunk
               Filter: ("time" < '4'::double precision)
(11 rows)

--excluding based on time expression is currently unoptimized
:PREFIX SELECT * FROM hyper_timefunc WHERE unix_to_timestamp(time) < 'Wed Dec 31 16:00:04 1969 PST' ORDER BY value;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: _hyper_4_124_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_4_124_chunk
               Filter: (to_timestamp("time") < 'Wed Dec 31 16:00:04 1969 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_4_125_chunk
               Filter: (to_timestamp("time") < 'Wed Dec 31 16:00:04 1969 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_4_126_chunk
               Filter: (to_timestamp("time") < 'Wed Dec 31 16:00:04 1969 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_4_127_chunk
               Filter: (to_timestamp("time") < 'Wed Dec 31 16:00:04 1969 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_4_128_chunk
               Filter: (to_timestamp("time") < 'Wed Dec 31 16:00:04 1969 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_4_129_chunk
               Filter: (to_timestamp("time") < 'Wed Dec 31 16:00:04 1969 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_4_130_chunk
               Filter: (to_timestamp("time") < 'Wed Dec 31 16:00:04 1969 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_4_131_chunk
               Filter: (to_timestamp("time") < 'Wed Dec 31 16:00:04 1969 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_4_132_chunk
               Filter: (to_timestamp("time") < 'Wed Dec 31 16:00:04 1969 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_4_133_chunk
               Filter: (to_timestamp("time") < 'Wed Dec 31 16:00:04 1969 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_4_134_chunk
               Filter: (to_timestamp("time") < 'Wed Dec 31 16:00:04 1969 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_4_135_chunk
               Filter: (to_timestamp("time") < 'Wed Dec 31 16:00:04 1969 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_4_136_chunk
               Filter: (to_timestamp("time") < 'Wed Dec 31 16:00:04 1969 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_4_137_chunk
               Filter: (to_timestamp("time") < 'Wed Dec 31 16:00:04 1969 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_4_138_chunk
               Filter: (to_timestamp("time") < 'Wed Dec 31 16:00:04 1969 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_4_139_chunk
               Filter: (to_timestamp("time") < 'Wed Dec 31 16:00:04 1969 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_4_140_chunk
               Filter: (to_timestamp("time") < 'Wed Dec 31 16:00:04 1969 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_4_141_chunk
               Filter: (to_timestamp("time") < 'Wed Dec 31 16:00:04 1969 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_4_142_chunk
               Filter: (to_timestamp("time") < 'Wed Dec 31 16:00:04 1969 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_4_143_chunk
               Filter: (to_timestamp("time") < 'Wed Dec 31 16:00:04 1969 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_4_144_chunk
               Filter: (to_timestamp("time") < 'Wed Dec 31 16:00:04 1969 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_4_145_chunk
               Filter: (to_timestamp("time") < 'Wed Dec 31 16:00:04 1969 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_4_146_chunk
               Filter: (to_timestamp("time") < 'Wed Dec 31 16:00:04 1969 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_4_147_chunk
               Filter: (to_timestamp("time") < 'Wed Dec 31 16:00:04 1969 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_4_148_chunk
               Filter: (to_timestamp("time") < 'Wed Dec 31 16:00:04 1969 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_4_149_chunk
               Filter: (to_timestamp("time") < 'Wed Dec 31 16:00:04 1969 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_4_150_chunk
               Filter: (to_timestamp("time") < 'Wed Dec 31 16:00:04 1969 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_4_151_chunk
               Filter: (to_timestamp("time") < 'Wed Dec 31 16:00:04 1969 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_4_152_chunk
               Filter: (to_timestamp("time") < 'Wed Dec 31 16:00:04 1969 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_4_153_chunk
               Filter: (to_timestamp("time") < 'Wed Dec 31 16:00:04 1969 PST'::timestamp with time zone)
         ->  Seq Scan on _hyper_4_154_chunk
               Filter: (to_timestamp("time") < 'Wed Dec 31 16:00:04 1969 PST'::timestamp with time zone)
(65 rows)

\ir include/plan_expand_hypertable_chunks_in_query.sql
-- This file and its contents are licensed under the Apache License 2.0.
-- Please see the included NOTICE for copyright information and
-- LICENSE-APACHE for a copy of the license.
--we want to see how our logic excludes chunks
--and not how much work constraint_exclusion does
SET constraint_exclusion = 'off';
:PREFIX SELECT * FROM hyper ORDER BY value;
                 QUERY PLAN                 
--------------------------------------------
 Sort
   Sort Key: _hyper_1_1_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_1_1_chunk
         ->  Seq Scan on _hyper_1_2_chunk
         ->  Seq Scan on _hyper_1_3_chunk
         ->  Seq Scan on _hyper_1_4_chunk
         ->  Seq Scan on _hyper_1_5_chunk
         ->  Seq Scan on _hyper_1_6_chunk
         ->  Seq Scan on _hyper_1_7_chunk
         ->  Seq Scan on _hyper_1_8_chunk
         ->  Seq Scan on _hyper_1_9_chunk
         ->  Seq Scan on _hyper_1_10_chunk
         ->  Seq Scan on _hyper_1_11_chunk
         ->  Seq Scan on _hyper_1_12_chunk
         ->  Seq Scan on _hyper_1_13_chunk
         ->  Seq Scan on _hyper_1_14_chunk
         ->  Seq Scan on _hyper_1_15_chunk
         ->  Seq Scan on _hyper_1_16_chunk
         ->  Seq Scan on _hyper_1_17_chunk
         ->  Seq Scan on _hyper_1_18_chunk
         ->  Seq Scan on _hyper_1_19_chunk
         ->  Seq Scan on _hyper_1_20_chunk
         ->  Seq Scan on _hyper_1_21_chunk
         ->  Seq Scan on _hyper_1_22_chunk
         ->  Seq Scan on _hyper_1_23_chunk
         ->  Seq Scan on _hyper_1_24_chunk
         ->  Seq Scan on _hyper_1_25_chunk
         ->  Seq Scan on _hyper_1_26_chunk
         ->  Seq Scan on _hyper_1_27_chunk
         ->  Seq Scan on _hyper_1_28_chunk
         ->  Seq Scan on _hyper_1_29_chunk
         ->  Seq Scan on _hyper_1_30_chunk
         ->  Seq Scan on _hyper_1_31_chunk
         ->  Seq Scan on _hyper_1_32_chunk
         ->  Seq Scan on _hyper_1_33_chunk
         ->  Seq Scan on _hyper_1_34_chunk
         ->  Seq Scan on _hyper_1_35_chunk
         ->  Seq Scan on _hyper_1_36_chunk
         ->  Seq Scan on _hyper_1_37_chunk
         ->  Seq Scan on _hyper_1_38_chunk
         ->  Seq Scan on _hyper_1_39_chunk
         ->  Seq Scan on _hyper_1_40_chunk
         ->  Seq Scan on _hyper_1_41_chunk
         ->  Seq Scan on _hyper_1_42_chunk
         ->  Seq Scan on _hyper_1_43_chunk
         ->  Seq Scan on _hyper_1_44_chunk
         ->  Seq Scan on _hyper_1_45_chunk
         ->  Seq Scan on _hyper_1_46_chunk
         ->  Seq Scan on _hyper_1_47_chunk
         ->  Seq Scan on _hyper_1_48_chunk
         ->  Seq Scan on _hyper_1_49_chunk
         ->  Seq Scan on _hyper_1_50_chunk
         ->  Seq Scan on _hyper_1_51_chunk
         ->  Seq Scan on _hyper_1_52_chunk
         ->  Seq Scan on _hyper_1_53_chunk
         ->  Seq Scan on _hyper_1_54_chunk
         ->  Seq Scan on _hyper_1_55_chunk
         ->  Seq Scan on _hyper_1_56_chunk
         ->  Seq Scan on _hyper_1_57_chunk
         ->  Seq Scan on _hyper_1_58_chunk
         ->  Seq Scan on _hyper_1_59_chunk
         ->  Seq Scan on _hyper_1_60_chunk
         ->  Seq Scan on _hyper_1_61_chunk
         ->  Seq Scan on _hyper_1_62_chunk
         ->  Seq Scan on _hyper_1_63_chunk
         ->  Seq Scan on _hyper_1_64_chunk
         ->  Seq Scan on _hyper_1_65_chunk
         ->  Seq Scan on _hyper_1_66_chunk
         ->  Seq Scan on _hyper_1_67_chunk
         ->  Seq Scan on _hyper_1_68_chunk
         ->  Seq Scan on _hyper_1_69_chunk
         ->  Seq Scan on _hyper_1_70_chunk
         ->  Seq Scan on _hyper_1_71_chunk
         ->  Seq Scan on _hyper_1_72_chunk
         ->  Seq Scan on _hyper_1_73_chunk
         ->  Seq Scan on _hyper_1_74_chunk
         ->  Seq Scan on _hyper_1_75_chunk
         ->  Seq Scan on _hyper_1_76_chunk
         ->  Seq Scan on _hyper_1_77_chunk
         ->  Seq Scan on _hyper_1_78_chunk
         ->  Seq Scan on _hyper_1_79_chunk
         ->  Seq Scan on _hyper_1_80_chunk
         ->  Seq Scan on _hyper_1_81_chunk
         ->  Seq Scan on _hyper_1_82_chunk
         ->  Seq Scan on _hyper_1_83_chunk
         ->  Seq Scan on _hyper_1_84_chunk
         ->  Seq Scan on _hyper_1_85_chunk
         ->  Seq Scan on _hyper_1_86_chunk
         ->  Seq Scan on _hyper_1_87_chunk
         ->  Seq Scan on _hyper_1_88_chunk
         ->  Seq Scan on _hyper_1_89_chunk
         ->  Seq Scan on _hyper_1_90_chunk
         ->  Seq Scan on _hyper_1_91_chunk
         ->  Seq Scan on _hyper_1_92_chunk
         ->  Seq Scan on _hyper_1_93_chunk
         ->  Seq Scan on _hyper_1_94_chunk
         ->  Seq Scan on _hyper_1_95_chunk
         ->  Seq Scan on _hyper_1_96_chunk
         ->  Seq Scan on _hyper_1_97_chunk
         ->  Seq Scan on _hyper_1_98_chunk
         ->  Seq Scan on _hyper_1_99_chunk
         ->  Seq Scan on _hyper_1_100_chunk
         ->  Seq Scan on _hyper_1_101_chunk
         ->  Seq Scan on _hyper_1_102_chunk
(105 rows)

-- explicit chunk exclusion
:PREFIX SELECT * FROM hyper WHERE _timescaledb_internal.chunks_in(hyper, ARRAY[1,2]) ORDER BY value;
                QUERY PLAN                
------------------------------------------
 Sort
   Sort Key: _hyper_1_1_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_1_1_chunk
         ->  Seq Scan on _hyper_1_2_chunk
(5 rows)

:PREFIX SELECT * FROM (SELECT * FROM hyper h WHERE _timescaledb_internal.chunks_in(h, ARRAY[1,2,3])) T ORDER BY value;
                  QUERY PLAN                  
----------------------------------------------
 Sort
   Sort Key: h.value
   ->  Append
         ->  Seq Scan on _hyper_1_1_chunk h
         ->  Seq Scan on _hyper_1_2_chunk h_1
         ->  Seq Scan on _hyper_1_3_chunk h_2
(6 rows)

:PREFIX SELECT * FROM hyper WHERE _timescaledb_internal.chunks_in(hyper, ARRAY[1,2,3]) AND time < 10 ORDER BY value;
                QUERY PLAN                
------------------------------------------
 Sort
   Sort Key: _hyper_1_1_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_1_1_chunk
               Filter: ("time" < 10)
         ->  Seq Scan on _hyper_1_2_chunk
               Filter: ("time" < 10)
         ->  Seq Scan on _hyper_1_3_chunk
               Filter: ("time" < 10)
(9 rows)

:PREFIX SELECT * FROM hyper_ts WHERE device_id = 'dev1' AND time < to_timestamp(10) AND _timescaledb_internal.chunks_in(hyper_ts, ARRAY[116]) ORDER BY value;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: _hyper_3_116_chunk.value
   ->  Append
         ->  Seq Scan on _hyper_3_116_chunk
               Filter: (("time" < 'Wed Dec 31 16:00:10 1969 PST'::timestamp with time zone) AND (device_id = 'dev1'::text))
(5 rows)

:PREFIX SELECT * FROM hyper_ts h JOIN tag on (h.tag_id = tag.id ) WHERE _timescaledb_internal.chunks_in(h, ARRAY[116]) AND time < to_timestamp(10) AND device_id = 'dev1' ORDER BY value;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: h.value
   ->  Merge Join
         Merge Cond: (tag.id = h.tag_id)
         ->  Index Scan using tag_pkey on tag
         ->  Sort
               Sort Key: h.tag_id
               ->  Append
                     ->  Seq Scan on _hyper_3_116_chunk h
                           Filter: (("time" < 'Wed Dec 31 16:00:10 1969 PST'::timestamp with time zone) AND (device_id = 'dev1'::text))
(10 rows)

:PREFIX SELECT * FROM hyper_w_space h1 JOIN hyper_ts h2 ON h1.device_id=h2.device_id WHERE _timescaledb_internal.chunks_in(h1, ARRAY[104,105]) AND _timescaledb_internal.chunks_in(h2, ARRAY[116,117]) ORDER BY h1.value;
                         QUERY PLAN                          
-------------------------------------------------------------
 Sort
   Sort Key: h1.value
   ->  Hash Join
         Hash Cond: (h2.device_id = h1.device_id)
         ->  Append
               ->  Seq Scan on _hyper_3_116_chunk h2
               ->  Seq Scan on _hyper_3_117_chunk h2_1
         ->  Hash
               ->  Append
                     ->  Seq Scan on _hyper_2_104_chunk h1
                     ->  Seq Scan on _hyper_2_105_chunk h1_1
(11 rows)

:PREFIX SELECT * FROM hyper h1, hyper h2 WHERE _timescaledb_internal.chunks_in(h1, ARRAY[1,2]) AND _timescaledb_internal.chunks_in(h2, ARRAY[2,3]);
                     QUERY PLAN                      
-----------------------------------------------------
 Nested Loop
   ->  Append
         ->  Seq Scan on _hyper_1_1_chunk h1
         ->  Seq Scan on _hyper_1_2_chunk h1_1
   ->  Materialize
         ->  Append
               ->  Seq Scan on _hyper_1_2_chunk h2
               ->  Seq Scan on _hyper_1_3_chunk h2_1
(8 rows)

SET enable_seqscan=false;
-- Should perform index-only scan. Since we pass whole row into the function it might block planner from using index-only scan.
-- But since we'll remove the function from the query tree before planner decision it shouldn't affect index-only decision.
:PREFIX SELECT time FROM hyper WHERE time=0 AND _timescaledb_internal.chunks_in(hyper, ARRAY[1]);
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Append
   ->  Index Only Scan using _hyper_1_1_chunk_hyper_time_idx on _hyper_1_1_chunk
         Index Cond: ("time" = 0)
(3 rows)

:PREFIX SELECT first(value, time) FROM hyper h WHERE _timescaledb_internal.chunks_in(h, ARRAY[1]);
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Result
   InitPlan 1 (returns $0)
     ->  Limit
           ->  Merge Append
                 Sort Key: h."time"
                 ->  Index Scan Backward using _hyper_1_1_chunk_hyper_time_idx on _hyper_1_1_chunk h
                       Index Cond: ("time" IS NOT NULL)
(7 rows)

\set ON_ERROR_STOP 0
:PREFIX SELECT * FROM hyper WHERE _timescaledb_internal.chunks_in(hyper, ARRAY[1,2]) AND _timescaledb_internal.chunks_in(hyper, ARRAY[2,3]);
psql:include/plan_expand_hypertable_chunks_in_query.sql:24: ERROR:  only one chunks_in call is allowed per hypertable
:PREFIX SELECT * FROM hyper WHERE _timescaledb_internal.chunks_in(2, ARRAY[1]);
psql:include/plan_expand_hypertable_chunks_in_query.sql:25: ERROR:  function _timescaledb_internal.chunks_in(integer, integer[]) does not exist at character 48
SELECT * FROM hyper WHERE time < 10 OR _timescaledb_internal.chunks_in(hyper, ARRAY[1,2]);
psql:include/plan_expand_hypertable_chunks_in_query.sql:26: ERROR:  illegal invocation of chunks_in function
SELECT _timescaledb_internal.chunks_in(hyper, ARRAY[1,2]) FROM hyper;
psql:include/plan_expand_hypertable_chunks_in_query.sql:27: ERROR:  illegal invocation of chunks_in function
-- non existing chunk id
:PREFIX SELECT * FROM hyper WHERE _timescaledb_internal.chunks_in(hyper, ARRAY[123456789]);
psql:include/plan_expand_hypertable_chunks_in_query.sql:29: ERROR:  chunk id 123456789 not found
-- chunk that belongs to another hypertable
:PREFIX SELECT * FROM hyper WHERE _timescaledb_internal.chunks_in(hyper, ARRAY[104]);
psql:include/plan_expand_hypertable_chunks_in_query.sql:31: ERROR:  chunk id 104 does not belong to hypertable "hyper"
-- passing wrong row ref
SELECT * FROM hyper WHERE _timescaledb_internal.chunks_in(ROW(1,2), ARRAY[104]);
psql:include/plan_expand_hypertable_chunks_in_query.sql:33: ERROR:  illegal invocation of chunks_in function
-- passing func as chunk id
:PREFIX SELECT * FROM hyper h WHERE _timescaledb_internal.chunks_in(h, array_append(ARRAY[1],current_setting('server_version_num')::int));
psql:include/plan_expand_hypertable_chunks_in_query.sql:35: ERROR:  second argument to chunk_in should contain only integer consts
-- chunks_in is STRICT function and for NULL arguments a null result is returned
SELECT * FROM hyper h WHERE _timescaledb_internal.chunks_in(h, NULL);
 value | time 
-------+------
(0 rows)

:PREFIX SELECT * FROM hyper h WHERE _timescaledb_internal.chunks_in(h, ARRAY[NULL::int]);
psql:include/plan_expand_hypertable_chunks_in_query.sql:38: ERROR:  chunk id can't be NULL
\set ECHO errors
