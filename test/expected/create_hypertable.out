\ir include/create_single_db.sql
SET client_min_messages = WARNING;
DROP DATABASE IF EXISTS single;
SET client_min_messages = NOTICE;
CREATE DATABASE single;
\c single
CREATE EXTENSION IF NOT EXISTS timescaledb;
create schema test_schema;
create table test_schema.test_table(time BIGINT, temp float8, device_id text, device_type text, location text, id int, id2 int);
\dt "test_schema".*
              List of relations
   Schema    |    Name    | Type  |  Owner   
-------------+------------+-------+----------
 test_schema | test_table | table | postgres
(1 row)

select * from create_hypertable('test_schema.test_table', 'time', 'device_id', 2, chunk_time_interval=>_timescaledb_internal.interval_to_usec('1 month'));
 create_hypertable 
-------------------
 
(1 row)

--test adding one more closed dimension
select add_dimension('test_schema.test_table', 'location', 2);
 add_dimension 
---------------
 
(1 row)

select * from _timescaledb_catalog.hypertable where table_name = 'test_table';
 id | schema_name | table_name | associated_schema_name | associated_table_prefix | num_dimensions 
----+-------------+------------+------------------------+-------------------------+----------------
  1 | test_schema | test_table | _timescaledb_internal  | _hyper_1                |              3
(1 row)

select * from _timescaledb_catalog.dimension;
 id | hypertable_id | column_name | column_type | aligned | num_slices | partitioning_func_schema |   partitioning_func   | interval_length 
----+---------------+-------------+-------------+---------+------------+--------------------------+-----------------------+-----------------
  1 |             1 | time        | bigint      | t       |            |                          |                       |   2592000000000
  2 |             1 | device_id   | text        | f       |          2 | _timescaledb_internal    | get_partition_for_key |                
  3 |             1 | location    | text        | f       |          2 | _timescaledb_internal    | get_partition_for_key |                
(3 rows)

--test adding one more open dimension
select add_dimension('test_schema.test_table', 'id', interval_length => 1000);
 add_dimension 
---------------
 
(1 row)

select * from _timescaledb_catalog.hypertable where table_name = 'test_table';
 id | schema_name | table_name | associated_schema_name | associated_table_prefix | num_dimensions 
----+-------------+------------+------------------------+-------------------------+----------------
  1 | test_schema | test_table | _timescaledb_internal  | _hyper_1                |              4
(1 row)

select * from _timescaledb_catalog.dimension;
 id | hypertable_id | column_name | column_type | aligned | num_slices | partitioning_func_schema |   partitioning_func   | interval_length 
----+---------------+-------------+-------------+---------+------------+--------------------------+-----------------------+-----------------
  1 |             1 | time        | bigint      | t       |            |                          |                       |   2592000000000
  2 |             1 | device_id   | text        | f       |          2 | _timescaledb_internal    | get_partition_for_key |                
  3 |             1 | location    | text        | f       |          2 | _timescaledb_internal    | get_partition_for_key |                
  4 |             1 | id          | integer     | t       |            |                          |                       |            1000
(4 rows)

\set ON_ERROR_STOP 0
--adding the same dimension twice should fail
select add_dimension('test_schema.test_table', 'location', 2);
ERROR:  A dimension on column "location" already exists
--adding dimension with both number_partitions and interval_length should fail
select add_dimension('test_schema.test_table', 'id2', number_partitions => 2, interval_length => 1000);
ERROR:  Cannot specify both interval and number of slices/partitions for a single dimension
--adding a new dimension on a non-empty table should also fail
insert into test_schema.test_table values (123456789, 23.8, 'blue', 'type1', 'nyc', 1, 1);
select add_dimension('test_schema.test_table', 'device_type', 2);
ERROR:  Cannot add new dimension to a non-empty table
\set ON_ERROR_STOP 1
--test partitioning in only time dimension
create table test_schema.test_1dim(time timestamp, temp float);
select create_hypertable('test_schema.test_1dim', 'time');
 create_hypertable 
-------------------
 
(1 row)

\dt "test_schema".*
              List of relations
   Schema    |    Name    | Type  |  Owner   
-------------+------------+-------+----------
 test_schema | test_1dim  | table | postgres
 test_schema | test_table | table | postgres
(2 rows)

select create_hypertable('test_schema.test_1dim', 'time', if_not_exists => true);
NOTICE:  hypertable test_schema.test_1dim already exists, skipping
 create_hypertable 
-------------------
 
(1 row)

-- Should error when creating again without if_not_exists set to true
\set ON_ERROR_STOP 0
select create_hypertable('test_schema.test_1dim', 'time');
ERROR:  hypertable test_schema.test_1dim already exists
\set ON_ERROR_STOP 1
-- if_not_exist should also work with data in the hypertable
insert into test_schema.test_1dim VALUES ('2004-10-19 10:23:54+02', 1.0);
select create_hypertable('test_schema.test_1dim', 'time', if_not_exists => true);
NOTICE:  hypertable test_schema.test_1dim already exists, skipping
 create_hypertable 
-------------------
 
(1 row)

-- Should error when creating again without if_not_exists set to true
\set ON_ERROR_STOP 0
select create_hypertable('test_schema.test_1dim', 'time');
ERROR:  hypertable test_schema.test_1dim already exists
\set ON_ERROR_STOP 1
