-- This file and its contents are licensed under the Apache License 2.0.
-- Please see the included NOTICE for copyright information and
-- LICENSE-APACHE for a copy of the license.
\set TEST_BASE_NAME append
SELECT format('include/%s_load.sql', :'TEST_BASE_NAME') as "TEST_LOAD_NAME",
       format('include/%s_query.sql', :'TEST_BASE_NAME') as "TEST_QUERY_NAME",
       format('%s/results/%s_results_optimized.out', :'TEST_OUTPUT_DIR', :'TEST_BASE_NAME') as "TEST_RESULTS_OPTIMIZED",
       format('%s/results/%s_results_unoptimized.out', :'TEST_OUTPUT_DIR', :'TEST_BASE_NAME') as "TEST_RESULTS_UNOPTIMIZED"
\gset
SELECT format('\! diff %s %s', :'TEST_RESULTS_OPTIMIZED', :'TEST_RESULTS_UNOPTIMIZED') as "DIFF_CMD"
\gset
\set PREFIX 'EXPLAIN (costs OFF)'
\ir :TEST_LOAD_NAME
-- This file and its contents are licensed under the Apache License 2.0.
-- Please see the included NOTICE for copyright information and
-- LICENSE-APACHE for a copy of the license.
-- create a now() function for repeatable testing that always returns
-- the same timestamp. It needs to be marked STABLE
CREATE OR REPLACE FUNCTION now_s()
RETURNS timestamptz LANGUAGE PLPGSQL STABLE AS
$BODY$
BEGIN
    RAISE NOTICE 'Stable function now_s() called!';
    RETURN '2017-08-22T10:00:00'::timestamptz;
END;
$BODY$;
CREATE OR REPLACE FUNCTION now_i()
RETURNS timestamptz LANGUAGE PLPGSQL IMMUTABLE AS
$BODY$
BEGIN
    RAISE NOTICE 'Immutable function now_i() called!';
    RETURN '2017-08-22T10:00:00'::timestamptz;
END;
$BODY$;
CREATE OR REPLACE FUNCTION now_v()
RETURNS timestamptz LANGUAGE PLPGSQL VOLATILE AS
$BODY$
BEGIN
    RAISE NOTICE 'Volatile function now_v() called!';
    RETURN '2017-08-22T10:00:00'::timestamptz;
END;
$BODY$;
CREATE TABLE append_test(time timestamptz, temp float, colorid integer);
SELECT create_hypertable('append_test', 'time', chunk_time_interval => 2628000000000);
psql:include/append_load.sql:35: NOTICE:  adding not-null constraint to column "time"
    create_hypertable     
--------------------------
 (1,public,append_test,t)
(1 row)

-- create three chunks
INSERT INTO append_test VALUES ('2017-03-22T09:18:22', 23.5, 1),
                               ('2017-03-22T09:18:23', 21.5, 1),
                               ('2017-05-22T09:18:22', 36.2, 2),
                               ('2017-05-22T09:18:23', 15.2, 2),
                               ('2017-08-22T09:18:22', 34.1, 3);
-- Create another hypertable to join with
CREATE TABLE join_test(time timestamptz, temp float, colorid integer);
SELECT create_hypertable('join_test', 'time', chunk_time_interval => 2628000000000);
psql:include/append_load.sql:46: NOTICE:  adding not-null constraint to column "time"
   create_hypertable    
------------------------
 (2,public,join_test,t)
(1 row)

INSERT INTO join_test VALUES ('2017-01-22T09:18:22', 15.2, 1),
                             ('2017-02-22T09:18:22', 24.5, 2),
                             ('2017-08-22T09:18:22', 23.1, 3);
-- create hypertable with DATE time dimension
CREATE TABLE metrics_date(time DATE NOT NULL);
SELECT create_hypertable('metrics_date','time');
     create_hypertable     
---------------------------
 (3,public,metrics_date,t)
(1 row)

INSERT INTO metrics_date SELECT generate_series('2000-01-01'::date, '2000-02-01'::date, '1h'::interval);
-- create hypertable with TIMESTAMP time dimension
CREATE TABLE metrics_timestamp(time TIMESTAMP NOT NULL);
SELECT create_hypertable('metrics_timestamp','time');
       create_hypertable        
--------------------------------
 (4,public,metrics_timestamp,t)
(1 row)

INSERT INTO metrics_timestamp SELECT generate_series('2000-01-01'::date, '2000-02-01'::date, '1h'::interval);
-- create hypertable with TIMESTAMPTZ time dimension
CREATE TABLE metrics_timestamptz(time TIMESTAMPTZ NOT NULL);
SELECT create_hypertable('metrics_timestamptz','time');
        create_hypertable         
----------------------------------
 (5,public,metrics_timestamptz,t)
(1 row)

INSERT INTO metrics_timestamptz SELECT generate_series('2000-01-01'::date, '2000-02-01'::date, '1h'::interval);
\ir :TEST_QUERY_NAME
-- This file and its contents are licensed under the Apache License 2.0.
-- Please see the included NOTICE for copyright information and
-- LICENSE-APACHE for a copy of the license.
-- query should exclude all chunks with optimization on
:PREFIX
SELECT * FROM append_test WHERE time > now_s() + '1 month'
ORDER BY time DESC;
psql:include/append_query.sql:8: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:8: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:8: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:8: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:8: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:8: NOTICE:  Stable function now_s() called!
                QUERY PLAN                
------------------------------------------
 Custom Scan (ChunkAppend) on append_test
   Order: append_test."time" DESC
   Chunks excluded during startup: 3
(3 rows)

--query should exclude all chunks and be a MergeAppend
:PREFIX
SELECT * FROM append_test WHERE time > now_s() + '1 month'
ORDER BY time DESC limit 1;
psql:include/append_query.sql:13: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:13: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:13: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:13: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:13: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:13: NOTICE:  Stable function now_s() called!
                   QUERY PLAN                   
------------------------------------------------
 Limit
   ->  Custom Scan (ChunkAppend) on append_test
         Order: append_test."time" DESC
         Chunks excluded during startup: 3
(4 rows)

-- when optimized, the plan should be a constraint-aware append and
-- cover only one chunk. It should be a backward index scan due to
-- descending index on time. Should also skip the main table, since it
-- cannot hold tuples
:PREFIX
SELECT * FROM append_test WHERE time > now_s() - interval '2 months';
psql:include/append_query.sql:20: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:20: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:20: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:20: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:20: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:20: NOTICE:  Stable function now_s() called!
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Custom Scan (ConstraintAwareAppend)
   Hypertable: append_test
   Chunks left after exclusion: 1
   ->  Append
         ->  Index Scan using _hyper_1_3_chunk_append_test_time_idx on _hyper_1_3_chunk
               Index Cond: ("time" > (now_s() - '@ 2 mons'::interval))
(6 rows)

-- adding ORDER BY and LIMIT should turn the plan into an optimized
-- ordered append plan
:PREFIX
SELECT * FROM append_test WHERE time > now_s() - interval '2 months'
ORDER BY time LIMIT 3;
psql:include/append_query.sql:26: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:26: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:26: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:26: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:26: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:26: NOTICE:  Stable function now_s() called!
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Limit
   ->  Custom Scan (ChunkAppend) on append_test
         Order: append_test."time"
         Chunks excluded during startup: 2
         ->  Index Scan Backward using _hyper_1_3_chunk_append_test_time_idx on _hyper_1_3_chunk
               Index Cond: ("time" > (now_s() - '@ 2 mons'::interval))
(6 rows)

-- no optimized plan for queries with restrictions that can be
-- constified at planning time. Regular planning-time constraint
-- exclusion should occur.
:PREFIX
SELECT * FROM append_test WHERE time > now_i() - interval '2 months'
ORDER BY time;
psql:include/append_query.sql:33: NOTICE:  Immutable function now_i() called!
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on append_test
   Order: append_test."time"
   Chunks excluded during startup: 2
   ->  Index Scan Backward using _hyper_1_3_chunk_append_test_time_idx on _hyper_1_3_chunk
         Index Cond: ("time" > ('Tue Aug 22 10:00:00 2017 PDT'::timestamp with time zone - '@ 2 mons'::interval))
(5 rows)

-- currently, we cannot distinguish between stable and volatile
-- functions as far as applying our modified plan. However, volatile
-- function should not be pre-evaluated to constants, so no chunk
-- exclusion should occur.
:PREFIX
SELECT * FROM append_test WHERE time > now_v() - interval '2 months'
ORDER BY time;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on append_test
   Order: append_test."time"
   Chunks excluded during startup: 0
   ->  Index Scan Backward using _hyper_1_1_chunk_append_test_time_idx on _hyper_1_1_chunk
         Filter: ("time" > (now_v() - '@ 2 mons'::interval))
   ->  Index Scan Backward using _hyper_1_2_chunk_append_test_time_idx on _hyper_1_2_chunk
         Filter: ("time" > (now_v() - '@ 2 mons'::interval))
   ->  Index Scan Backward using _hyper_1_3_chunk_append_test_time_idx on _hyper_1_3_chunk
         Filter: ("time" > (now_v() - '@ 2 mons'::interval))
(9 rows)

-- prepared statement output should be the same regardless of
-- optimizations
PREPARE query_opt AS
SELECT * FROM append_test WHERE time > now_s() - interval '2 months'
ORDER BY time;
:PREFIX EXECUTE query_opt;
psql:include/append_query.sql:49: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:49: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:49: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:49: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:49: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:49: NOTICE:  Stable function now_s() called!
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on append_test
   Order: append_test."time"
   Chunks excluded during startup: 2
   ->  Index Scan Backward using _hyper_1_3_chunk_append_test_time_idx on _hyper_1_3_chunk
         Index Cond: ("time" > (now_s() - '@ 2 mons'::interval))
(5 rows)

DEALLOCATE query_opt;
-- aggregates should produce same output
:PREFIX
SELECT date_trunc('year', time) t, avg(temp) FROM append_test
WHERE time > now_s() - interval '4 months'
GROUP BY t
ORDER BY t DESC;
psql:include/append_query.sql:58: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:58: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:58: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:58: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:58: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:58: NOTICE:  Stable function now_s() called!
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Sort
   Sort Key: (date_trunc('year'::text, append_test."time")) DESC
   ->  HashAggregate
         Group Key: date_trunc('year'::text, append_test."time")
         ->  Custom Scan (ConstraintAwareAppend)
               Hypertable: append_test
               Chunks left after exclusion: 2
               ->  Append
                     ->  Index Scan using _hyper_1_2_chunk_append_test_time_idx on _hyper_1_2_chunk
                           Index Cond: ("time" > (now_s() - '@ 4 mons'::interval))
                     ->  Index Scan using _hyper_1_3_chunk_append_test_time_idx on _hyper_1_3_chunk
                           Index Cond: ("time" > (now_s() - '@ 4 mons'::interval))
(12 rows)

-- querying outside the time range should return nothing. This tests
-- that ConstraintAwareAppend can handle the case when an Append node
-- is turned into a Result node due to no children
:PREFIX
SELECT date_trunc('year', time) t, avg(temp)
FROM append_test
WHERE time < '2016-03-22'
AND date_part('dow', time) between 1 and 5
GROUP BY t
ORDER BY t DESC;
                        QUERY PLAN                         
-----------------------------------------------------------
 GroupAggregate
   Group Key: (date_trunc('year'::text, "time"))
   ->  Sort
         Sort Key: (date_trunc('year'::text, "time")) DESC
         ->  Result
               One-Time Filter: false
(6 rows)

-- a parameterized query can safely constify params, so won't be
-- optimized by constraint-aware append since regular constraint
-- exclusion works just fine
PREPARE query_param AS
SELECT * FROM append_test WHERE time > $1 ORDER BY time;
:PREFIX
EXECUTE query_param(now_s() - interval '2 months');
psql:include/append_query.sql:78: NOTICE:  Stable function now_s() called!
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on append_test
   Order: append_test."time"
   ->  Index Scan Backward using _hyper_1_3_chunk_append_test_time_idx on _hyper_1_3_chunk
         Index Cond: ("time" > 'Thu Jun 22 10:00:00 2017 PDT'::timestamp with time zone)
(4 rows)

DEALLOCATE query_param;
--test with cte
:PREFIX
WITH data AS (
    SELECT time_bucket(INTERVAL '30 day', TIME) AS btime, AVG(temp) AS VALUE
    FROM append_test
    WHERE
        TIME > now_s() - INTERVAL '400 day'
    AND colorid > 0
    GROUP BY btime
),
period AS (
    SELECT time_bucket(INTERVAL '30 day', TIME) AS btime
      FROM  GENERATE_SERIES('2017-03-22T01:01:01', '2017-08-23T01:01:01', INTERVAL '30 day') TIME
  )
SELECT period.btime, VALUE
    FROM period
    LEFT JOIN DATA USING (btime)
    ORDER BY period.btime;
psql:include/append_query.sql:98: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:98: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:98: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:98: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:98: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:98: NOTICE:  Stable function now_s() called!
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Merge Left Join
   Merge Cond: (period.btime = data.btime)
   CTE data
     ->  HashAggregate
           Group Key: time_bucket('@ 30 days'::interval, append_test."time")
           ->  Custom Scan (ConstraintAwareAppend)
                 Hypertable: append_test
                 Chunks left after exclusion: 3
                 ->  Append
                       ->  Index Scan Backward using _hyper_1_1_chunk_append_test_time_idx on _hyper_1_1_chunk
                             Index Cond: ("time" > (now_s() - '@ 400 days'::interval))
                             Filter: (colorid > 0)
                       ->  Index Scan Backward using _hyper_1_2_chunk_append_test_time_idx on _hyper_1_2_chunk
                             Index Cond: ("time" > (now_s() - '@ 400 days'::interval))
                             Filter: (colorid > 0)
                       ->  Index Scan Backward using _hyper_1_3_chunk_append_test_time_idx on _hyper_1_3_chunk
                             Index Cond: ("time" > (now_s() - '@ 400 days'::interval))
                             Filter: (colorid > 0)
   CTE period
     ->  Function Scan on generate_series "time"
   ->  Sort
         Sort Key: period.btime
         ->  CTE Scan on period
   ->  Sort
         Sort Key: data.btime
         ->  CTE Scan on data
(26 rows)

WITH data AS (
    SELECT time_bucket(INTERVAL '30 day', TIME) AS btime, AVG(temp) AS VALUE
    FROM append_test
    WHERE
        TIME > now_s() - INTERVAL '400 day'
    AND colorid > 0
    GROUP BY btime
),
period AS (
    SELECT time_bucket(INTERVAL '30 day', TIME) AS btime
      FROM  GENERATE_SERIES('2017-03-22T01:01:01', '2017-08-23T01:01:01', INTERVAL '30 day') TIME
  )
SELECT period.btime, VALUE
    FROM period
    LEFT JOIN DATA USING (btime)
    ORDER BY period.btime;
psql:include/append_query.sql:115: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:115: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:115: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:115: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:115: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:115: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:115: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:115: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:115: NOTICE:  Stable function now_s() called!
            btime             | value 
------------------------------+-------
 Fri Mar 03 16:00:00 2017 PST |  22.5
 Sun Apr 02 17:00:00 2017 PDT |      
 Tue May 02 17:00:00 2017 PDT |  25.7
 Thu Jun 01 17:00:00 2017 PDT |      
 Sat Jul 01 17:00:00 2017 PDT |      
 Mon Jul 31 17:00:00 2017 PDT |  34.1
(6 rows)

-- force nested loop join with no materialization. This tests that the
-- inner ConstraintAwareScan supports resetting its scan for every
-- iteration of the outer relation loop
set enable_hashjoin = 'off';
set enable_mergejoin = 'off';
set enable_material = 'off';
:PREFIX
SELECT * FROM append_test a INNER JOIN join_test j ON (a.colorid = j.colorid)
WHERE a.time > now_s() - interval '3 hours' AND j.time > now_s() - interval '3 hours';
psql:include/append_query.sql:126: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:126: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:126: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:126: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:126: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:126: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:126: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:126: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:126: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:126: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:126: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:126: NOTICE:  Stable function now_s() called!
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Nested Loop
   Join Filter: (a.colorid = j.colorid)
   ->  Custom Scan (ConstraintAwareAppend)
         Hypertable: append_test
         Chunks left after exclusion: 1
         ->  Append
               ->  Index Scan using _hyper_1_3_chunk_append_test_time_idx on _hyper_1_3_chunk a_1
                     Index Cond: ("time" > (now_s() - '@ 3 hours'::interval))
   ->  Custom Scan (ConstraintAwareAppend)
         Hypertable: join_test
         Chunks left after exclusion: 1
         ->  Append
               ->  Index Scan using _hyper_2_6_chunk_join_test_time_idx on _hyper_2_6_chunk j_1
                     Index Cond: ("time" > (now_s() - '@ 3 hours'::interval))
(14 rows)

reset enable_hashjoin;
reset enable_mergejoin;
reset enable_material;
-- test constraint_exclusion with date time dimension and DATE/TIMESTAMP/TIMESTAMPTZ constraints
-- the queries should all have 3 chunks
:PREFIX SELECT * FROM metrics_date WHERE time > '2000-01-15'::date ORDER BY time;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_date
   Order: metrics_date."time"
   ->  Index Only Scan Backward using _hyper_3_9_chunk_metrics_date_time_idx on _hyper_3_9_chunk
         Index Cond: ("time" > '01-15-2000'::date)
   ->  Index Only Scan Backward using _hyper_3_10_chunk_metrics_date_time_idx on _hyper_3_10_chunk
         Index Cond: ("time" > '01-15-2000'::date)
   ->  Index Only Scan Backward using _hyper_3_11_chunk_metrics_date_time_idx on _hyper_3_11_chunk
         Index Cond: ("time" > '01-15-2000'::date)
(8 rows)

:PREFIX SELECT * FROM metrics_date WHERE time > '2000-01-15'::timestamp ORDER BY time;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_date
   Order: metrics_date."time"
   ->  Index Only Scan Backward using _hyper_3_9_chunk_metrics_date_time_idx on _hyper_3_9_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
   ->  Index Only Scan Backward using _hyper_3_10_chunk_metrics_date_time_idx on _hyper_3_10_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
   ->  Index Only Scan Backward using _hyper_3_11_chunk_metrics_date_time_idx on _hyper_3_11_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
(8 rows)

:PREFIX SELECT * FROM metrics_date WHERE time > '2000-01-15'::timestamptz ORDER BY time;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_date
   Order: metrics_date."time"
   Chunks excluded during startup: 2
   ->  Index Only Scan Backward using _hyper_3_9_chunk_metrics_date_time_idx on _hyper_3_9_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
   ->  Index Only Scan Backward using _hyper_3_10_chunk_metrics_date_time_idx on _hyper_3_10_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
   ->  Index Only Scan Backward using _hyper_3_11_chunk_metrics_date_time_idx on _hyper_3_11_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
(9 rows)

-- test Const OP Var
-- the queries should all have 3 chunks
:PREFIX SELECT * FROM metrics_date WHERE '2000-01-15'::date < time ORDER BY time;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_date
   Order: metrics_date."time"
   ->  Index Only Scan Backward using _hyper_3_9_chunk_metrics_date_time_idx on _hyper_3_9_chunk
         Index Cond: ("time" > '01-15-2000'::date)
   ->  Index Only Scan Backward using _hyper_3_10_chunk_metrics_date_time_idx on _hyper_3_10_chunk
         Index Cond: ("time" > '01-15-2000'::date)
   ->  Index Only Scan Backward using _hyper_3_11_chunk_metrics_date_time_idx on _hyper_3_11_chunk
         Index Cond: ("time" > '01-15-2000'::date)
(8 rows)

:PREFIX SELECT * FROM metrics_date WHERE '2000-01-15'::timestamp < time ORDER BY time;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_date
   Order: metrics_date."time"
   ->  Index Only Scan Backward using _hyper_3_9_chunk_metrics_date_time_idx on _hyper_3_9_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
   ->  Index Only Scan Backward using _hyper_3_10_chunk_metrics_date_time_idx on _hyper_3_10_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
   ->  Index Only Scan Backward using _hyper_3_11_chunk_metrics_date_time_idx on _hyper_3_11_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
(8 rows)

:PREFIX SELECT * FROM metrics_date WHERE '2000-01-15'::timestamptz < time ORDER BY time;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_date
   Order: metrics_date."time"
   Chunks excluded during startup: 2
   ->  Index Only Scan Backward using _hyper_3_9_chunk_metrics_date_time_idx on _hyper_3_9_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
   ->  Index Only Scan Backward using _hyper_3_10_chunk_metrics_date_time_idx on _hyper_3_10_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
   ->  Index Only Scan Backward using _hyper_3_11_chunk_metrics_date_time_idx on _hyper_3_11_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
(9 rows)

-- test 2 constraints
-- the queries should all have 2 chunks
:PREFIX SELECT * FROM metrics_date WHERE time > '2000-01-15'::date AND time < '2000-01-21'::date ORDER BY time;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_date
   Order: metrics_date."time"
   ->  Index Only Scan Backward using _hyper_3_9_chunk_metrics_date_time_idx on _hyper_3_9_chunk
         Index Cond: (("time" > '01-15-2000'::date) AND ("time" < '01-21-2000'::date))
   ->  Index Only Scan Backward using _hyper_3_10_chunk_metrics_date_time_idx on _hyper_3_10_chunk
         Index Cond: (("time" > '01-15-2000'::date) AND ("time" < '01-21-2000'::date))
(6 rows)

:PREFIX SELECT * FROM metrics_date WHERE time > '2000-01-15'::timestamp AND time < '2000-01-21'::timestamp ORDER BY time;
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_date
   Order: metrics_date."time"
   ->  Index Only Scan Backward using _hyper_3_9_chunk_metrics_date_time_idx on _hyper_3_9_chunk
         Index Cond: (("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone) AND ("time" < 'Fri Jan 21 00:00:00 2000'::timestamp without time zone))
   ->  Index Only Scan Backward using _hyper_3_10_chunk_metrics_date_time_idx on _hyper_3_10_chunk
         Index Cond: (("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone) AND ("time" < 'Fri Jan 21 00:00:00 2000'::timestamp without time zone))
(6 rows)

:PREFIX SELECT * FROM metrics_date WHERE time > '2000-01-15'::timestamptz AND time < '2000-01-21'::timestamptz ORDER BY time;
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_date
   Order: metrics_date."time"
   Chunks excluded during startup: 3
   ->  Index Only Scan Backward using _hyper_3_9_chunk_metrics_date_time_idx on _hyper_3_9_chunk
         Index Cond: (("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone) AND ("time" < 'Fri Jan 21 00:00:00 2000 PST'::timestamp with time zone))
   ->  Index Only Scan Backward using _hyper_3_10_chunk_metrics_date_time_idx on _hyper_3_10_chunk
         Index Cond: (("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone) AND ("time" < 'Fri Jan 21 00:00:00 2000 PST'::timestamp with time zone))
(7 rows)

-- test constraint_exclusion with timestamp time dimension and DATE/TIMESTAMP/TIMESTAMPTZ constraints
-- the queries should all have 3 chunks
:PREFIX SELECT * FROM metrics_timestamp WHERE time > '2000-01-15'::date ORDER BY time;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamp
   Order: metrics_timestamp."time"
   ->  Index Only Scan Backward using _hyper_4_14_chunk_metrics_timestamp_time_idx on _hyper_4_14_chunk
         Index Cond: ("time" > '01-15-2000'::date)
   ->  Index Only Scan Backward using _hyper_4_15_chunk_metrics_timestamp_time_idx on _hyper_4_15_chunk
         Index Cond: ("time" > '01-15-2000'::date)
   ->  Index Only Scan Backward using _hyper_4_16_chunk_metrics_timestamp_time_idx on _hyper_4_16_chunk
         Index Cond: ("time" > '01-15-2000'::date)
(8 rows)

:PREFIX SELECT * FROM metrics_timestamp WHERE time > '2000-01-15'::timestamp ORDER BY time;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamp
   Order: metrics_timestamp."time"
   ->  Index Only Scan Backward using _hyper_4_14_chunk_metrics_timestamp_time_idx on _hyper_4_14_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
   ->  Index Only Scan Backward using _hyper_4_15_chunk_metrics_timestamp_time_idx on _hyper_4_15_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
   ->  Index Only Scan Backward using _hyper_4_16_chunk_metrics_timestamp_time_idx on _hyper_4_16_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
(8 rows)

:PREFIX SELECT * FROM metrics_timestamp WHERE time > '2000-01-15'::timestamptz ORDER BY time;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamp
   Order: metrics_timestamp."time"
   Chunks excluded during startup: 2
   ->  Index Only Scan Backward using _hyper_4_14_chunk_metrics_timestamp_time_idx on _hyper_4_14_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
   ->  Index Only Scan Backward using _hyper_4_15_chunk_metrics_timestamp_time_idx on _hyper_4_15_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
   ->  Index Only Scan Backward using _hyper_4_16_chunk_metrics_timestamp_time_idx on _hyper_4_16_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
(9 rows)

-- test Const OP Var
-- the queries should all have 3 chunks
:PREFIX SELECT * FROM metrics_timestamp WHERE '2000-01-15'::date < time ORDER BY time;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamp
   Order: metrics_timestamp."time"
   ->  Index Only Scan Backward using _hyper_4_14_chunk_metrics_timestamp_time_idx on _hyper_4_14_chunk
         Index Cond: ("time" > '01-15-2000'::date)
   ->  Index Only Scan Backward using _hyper_4_15_chunk_metrics_timestamp_time_idx on _hyper_4_15_chunk
         Index Cond: ("time" > '01-15-2000'::date)
   ->  Index Only Scan Backward using _hyper_4_16_chunk_metrics_timestamp_time_idx on _hyper_4_16_chunk
         Index Cond: ("time" > '01-15-2000'::date)
(8 rows)

:PREFIX SELECT * FROM metrics_timestamp WHERE '2000-01-15'::timestamp < time ORDER BY time;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamp
   Order: metrics_timestamp."time"
   ->  Index Only Scan Backward using _hyper_4_14_chunk_metrics_timestamp_time_idx on _hyper_4_14_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
   ->  Index Only Scan Backward using _hyper_4_15_chunk_metrics_timestamp_time_idx on _hyper_4_15_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
   ->  Index Only Scan Backward using _hyper_4_16_chunk_metrics_timestamp_time_idx on _hyper_4_16_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
(8 rows)

:PREFIX SELECT * FROM metrics_timestamp WHERE '2000-01-15'::timestamptz < time ORDER BY time;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamp
   Order: metrics_timestamp."time"
   Chunks excluded during startup: 2
   ->  Index Only Scan Backward using _hyper_4_14_chunk_metrics_timestamp_time_idx on _hyper_4_14_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
   ->  Index Only Scan Backward using _hyper_4_15_chunk_metrics_timestamp_time_idx on _hyper_4_15_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
   ->  Index Only Scan Backward using _hyper_4_16_chunk_metrics_timestamp_time_idx on _hyper_4_16_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
(9 rows)

-- test 2 constraints
-- the queries should all have 2 chunks
:PREFIX SELECT * FROM metrics_timestamp WHERE time > '2000-01-15'::date AND time < '2000-01-21'::date ORDER BY time;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamp
   Order: metrics_timestamp."time"
   ->  Index Only Scan Backward using _hyper_4_14_chunk_metrics_timestamp_time_idx on _hyper_4_14_chunk
         Index Cond: (("time" > '01-15-2000'::date) AND ("time" < '01-21-2000'::date))
   ->  Index Only Scan Backward using _hyper_4_15_chunk_metrics_timestamp_time_idx on _hyper_4_15_chunk
         Index Cond: (("time" > '01-15-2000'::date) AND ("time" < '01-21-2000'::date))
(6 rows)

:PREFIX SELECT * FROM metrics_timestamp WHERE time > '2000-01-15'::timestamp AND time < '2000-01-21'::timestamp ORDER BY time;
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamp
   Order: metrics_timestamp."time"
   ->  Index Only Scan Backward using _hyper_4_14_chunk_metrics_timestamp_time_idx on _hyper_4_14_chunk
         Index Cond: (("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone) AND ("time" < 'Fri Jan 21 00:00:00 2000'::timestamp without time zone))
   ->  Index Only Scan Backward using _hyper_4_15_chunk_metrics_timestamp_time_idx on _hyper_4_15_chunk
         Index Cond: (("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone) AND ("time" < 'Fri Jan 21 00:00:00 2000'::timestamp without time zone))
(6 rows)

:PREFIX SELECT * FROM metrics_timestamp WHERE time > '2000-01-15'::timestamptz AND time < '2000-01-21'::timestamptz ORDER BY time;
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamp
   Order: metrics_timestamp."time"
   Chunks excluded during startup: 3
   ->  Index Only Scan Backward using _hyper_4_14_chunk_metrics_timestamp_time_idx on _hyper_4_14_chunk
         Index Cond: (("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone) AND ("time" < 'Fri Jan 21 00:00:00 2000 PST'::timestamp with time zone))
   ->  Index Only Scan Backward using _hyper_4_15_chunk_metrics_timestamp_time_idx on _hyper_4_15_chunk
         Index Cond: (("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone) AND ("time" < 'Fri Jan 21 00:00:00 2000 PST'::timestamp with time zone))
(7 rows)

-- test constraint_exclusion with timestamptz time dimension and DATE/TIMESTAMP/TIMESTAMPTZ constraints
-- the queries should all have 3 chunks
:PREFIX SELECT * FROM metrics_timestamptz WHERE time > '2000-01-15'::date ORDER BY time;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz
   Order: metrics_timestamptz."time"
   Chunks excluded during startup: 2
   ->  Index Only Scan Backward using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk
         Index Cond: ("time" > '01-15-2000'::date)
   ->  Index Only Scan Backward using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk
         Index Cond: ("time" > '01-15-2000'::date)
   ->  Index Only Scan Backward using _hyper_5_21_chunk_metrics_timestamptz_time_idx on _hyper_5_21_chunk
         Index Cond: ("time" > '01-15-2000'::date)
(9 rows)

:PREFIX SELECT * FROM metrics_timestamptz WHERE time > '2000-01-15'::timestamp ORDER BY time;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz
   Order: metrics_timestamptz."time"
   Chunks excluded during startup: 2
   ->  Index Only Scan Backward using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
   ->  Index Only Scan Backward using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
   ->  Index Only Scan Backward using _hyper_5_21_chunk_metrics_timestamptz_time_idx on _hyper_5_21_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
(9 rows)

:PREFIX SELECT * FROM metrics_timestamptz WHERE time > '2000-01-15'::timestamptz ORDER BY time;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz
   Order: metrics_timestamptz."time"
   ->  Index Only Scan Backward using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
   ->  Index Only Scan Backward using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
   ->  Index Only Scan Backward using _hyper_5_21_chunk_metrics_timestamptz_time_idx on _hyper_5_21_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
(8 rows)

-- test Const OP Var
-- the queries should all have 3 chunks
:PREFIX SELECT * FROM metrics_timestamptz WHERE '2000-01-15'::date < time ORDER BY time;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz
   Order: metrics_timestamptz."time"
   Chunks excluded during startup: 2
   ->  Index Only Scan Backward using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk
         Index Cond: ("time" > '01-15-2000'::date)
   ->  Index Only Scan Backward using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk
         Index Cond: ("time" > '01-15-2000'::date)
   ->  Index Only Scan Backward using _hyper_5_21_chunk_metrics_timestamptz_time_idx on _hyper_5_21_chunk
         Index Cond: ("time" > '01-15-2000'::date)
(9 rows)

:PREFIX SELECT * FROM metrics_timestamptz WHERE '2000-01-15'::timestamp < time ORDER BY time;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz
   Order: metrics_timestamptz."time"
   Chunks excluded during startup: 2
   ->  Index Only Scan Backward using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
   ->  Index Only Scan Backward using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
   ->  Index Only Scan Backward using _hyper_5_21_chunk_metrics_timestamptz_time_idx on _hyper_5_21_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone)
(9 rows)

:PREFIX SELECT * FROM metrics_timestamptz WHERE '2000-01-15'::timestamptz < time ORDER BY time;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz
   Order: metrics_timestamptz."time"
   ->  Index Only Scan Backward using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
   ->  Index Only Scan Backward using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
   ->  Index Only Scan Backward using _hyper_5_21_chunk_metrics_timestamptz_time_idx on _hyper_5_21_chunk
         Index Cond: ("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone)
(8 rows)

-- test 2 constraints
-- the queries should all have 2 chunks
:PREFIX SELECT * FROM metrics_timestamptz WHERE time > '2000-01-15'::date AND time < '2000-01-21'::date ORDER BY time;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz
   Order: metrics_timestamptz."time"
   Chunks excluded during startup: 3
   ->  Index Only Scan Backward using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk
         Index Cond: (("time" > '01-15-2000'::date) AND ("time" < '01-21-2000'::date))
   ->  Index Only Scan Backward using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk
         Index Cond: (("time" > '01-15-2000'::date) AND ("time" < '01-21-2000'::date))
(7 rows)

:PREFIX SELECT * FROM metrics_timestamptz WHERE time > '2000-01-15'::timestamp AND time < '2000-01-21'::timestamp ORDER BY time;
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz
   Order: metrics_timestamptz."time"
   Chunks excluded during startup: 3
   ->  Index Only Scan Backward using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk
         Index Cond: (("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone) AND ("time" < 'Fri Jan 21 00:00:00 2000'::timestamp without time zone))
   ->  Index Only Scan Backward using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk
         Index Cond: (("time" > 'Sat Jan 15 00:00:00 2000'::timestamp without time zone) AND ("time" < 'Fri Jan 21 00:00:00 2000'::timestamp without time zone))
(7 rows)

:PREFIX SELECT * FROM metrics_timestamptz WHERE time > '2000-01-15'::timestamptz AND time < '2000-01-21'::timestamptz ORDER BY time;
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz
   Order: metrics_timestamptz."time"
   ->  Index Only Scan Backward using _hyper_5_19_chunk_metrics_timestamptz_time_idx on _hyper_5_19_chunk
         Index Cond: (("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone) AND ("time" < 'Fri Jan 21 00:00:00 2000 PST'::timestamp with time zone))
   ->  Index Only Scan Backward using _hyper_5_20_chunk_metrics_timestamptz_time_idx on _hyper_5_20_chunk
         Index Cond: (("time" > 'Sat Jan 15 00:00:00 2000 PST'::timestamp with time zone) AND ("time" < 'Fri Jan 21 00:00:00 2000 PST'::timestamp with time zone))
(6 rows)

-- test CURRENT_DATE
-- should be 0 chunks
:PREFIX SELECT * FROM metrics_date WHERE time > CURRENT_DATE ORDER BY time;
                QUERY PLAN                 
-------------------------------------------
 Custom Scan (ChunkAppend) on metrics_date
   Order: metrics_date."time"
   Chunks excluded during startup: 5
(3 rows)

:PREFIX SELECT * FROM metrics_timestamp WHERE time > CURRENT_DATE ORDER BY time;
                   QUERY PLAN                   
------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamp
   Order: metrics_timestamp."time"
   Chunks excluded during startup: 5
(3 rows)

:PREFIX SELECT * FROM metrics_timestamptz WHERE time > CURRENT_DATE ORDER BY time;
                    QUERY PLAN                    
--------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz
   Order: metrics_timestamptz."time"
   Chunks excluded during startup: 5
(3 rows)

-- test CURRENT_TIMESTAMP
-- should be 0 chunks
:PREFIX SELECT * FROM metrics_date WHERE time > CURRENT_TIMESTAMP ORDER BY time;
                QUERY PLAN                 
-------------------------------------------
 Custom Scan (ChunkAppend) on metrics_date
   Order: metrics_date."time"
   Chunks excluded during startup: 5
(3 rows)

:PREFIX SELECT * FROM metrics_timestamp WHERE time > CURRENT_TIMESTAMP ORDER BY time;
                   QUERY PLAN                   
------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamp
   Order: metrics_timestamp."time"
   Chunks excluded during startup: 5
(3 rows)

:PREFIX SELECT * FROM metrics_timestamptz WHERE time > CURRENT_TIMESTAMP ORDER BY time;
                    QUERY PLAN                    
--------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz
   Order: metrics_timestamptz."time"
   Chunks excluded during startup: 5
(3 rows)

-- test now()
-- should be 0 chunks
:PREFIX SELECT * FROM metrics_date WHERE time > now() ORDER BY time;
                QUERY PLAN                 
-------------------------------------------
 Custom Scan (ChunkAppend) on metrics_date
   Order: metrics_date."time"
   Chunks excluded during startup: 5
(3 rows)

:PREFIX SELECT * FROM metrics_timestamp WHERE time > now() ORDER BY time;
                   QUERY PLAN                   
------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamp
   Order: metrics_timestamp."time"
   Chunks excluded during startup: 5
(3 rows)

:PREFIX SELECT * FROM metrics_timestamptz WHERE time > now() ORDER BY time;
                    QUERY PLAN                    
--------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_timestamptz
   Order: metrics_timestamptz."time"
   Chunks excluded during startup: 5
(3 rows)

-- query with tablesample
:PREFIX
SELECT * FROM append_test TABLESAMPLE SYSTEM(1)
WHERE TIME > now_s() - INTERVAL '400 day'
ORDER BY time DESC;
psql:include/append_query.sql:208: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:208: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:208: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:208: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:208: NOTICE:  Stable function now_s() called!
psql:include/append_query.sql:208: NOTICE:  Stable function now_s() called!
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Sort
   Sort Key: append_test."time" DESC
   ->  Custom Scan (ConstraintAwareAppend)
         Hypertable: append_test
         Chunks left after exclusion: 3
         ->  Append
               ->  Sample Scan on _hyper_1_3_chunk
                     Sampling: system ('1'::real)
                     Filter: ("time" > (now_s() - '@ 400 days'::interval))
               ->  Sample Scan on _hyper_1_2_chunk
                     Sampling: system ('1'::real)
                     Filter: ("time" > (now_s() - '@ 400 days'::interval))
               ->  Sample Scan on _hyper_1_1_chunk
                     Sampling: system ('1'::real)
                     Filter: ("time" > (now_s() - '@ 400 days'::interval))
(15 rows)

--generate the results into two different files
\set ECHO errors
